package com.cricketsocial.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cricketsocial.bean.BoardSearchRequest;
import com.cricketsocial.bean.HubRequest;
import com.cricketsocial.bean.NewResponse;
import com.cricketsocial.bean.PlayerSummaryResponse;
import com.cricketsocial.bean.banner.BannerInformation;
import com.cricketsocial.bean.board.BoardAttrbutesResponse;
import com.cricketsocial.bean.board.BoardCancelledMatchList;
import com.cricketsocial.bean.board.BoardCoordinatorMap;
import com.cricketsocial.bean.board.BoardDTO;
import com.cricketsocial.bean.board.BoardFanRequest;
import com.cricketsocial.bean.board.BoardFormAttributes;
import com.cricketsocial.bean.board.BoardListFunction;
import com.cricketsocial.bean.board.BoardProfile;
import com.cricketsocial.bean.board.BoardResponse;
import com.cricketsocial.bean.board.BoardUmpire;
import com.cricketsocial.bean.board.BoardUpcomingMatchList;
import com.cricketsocial.bean.board.CancelScheduleDTO;
import com.cricketsocial.bean.board.CoOrdinator;
import com.cricketsocial.bean.board.CompletedMatches;
import com.cricketsocial.bean.board.DeleteRosterResponse;
import com.cricketsocial.bean.board.EditRoster;
import com.cricketsocial.bean.board.GameSchedule;
import com.cricketsocial.bean.board.GameScheduleFilter;
import com.cricketsocial.bean.board.InprogressMatches;
import com.cricketsocial.bean.board.MatchIdListInfo;
import com.cricketsocial.bean.board.OrganizationDetails;
import com.cricketsocial.bean.board.OrganizationResponse;
import com.cricketsocial.bean.board.Roaster;
import com.cricketsocial.bean.board.RoasterMemembers;
import com.cricketsocial.bean.board.Scheduler;
import com.cricketsocial.bean.board.ScoreCard;
import com.cricketsocial.bean.board.ScorerBean;
import com.cricketsocial.bean.board.ScorerNameList;
import com.cricketsocial.bean.board.SponserDetails;
import com.cricketsocial.bean.board.SponserResponse;
import com.cricketsocial.bean.board.TeamDetailsDTO;
import com.cricketsocial.bean.board.Tournament;
import com.cricketsocial.bean.board.TournamentScheduler;
import com.cricketsocial.bean.board.UmpireIds;
import com.cricketsocial.bean.board.UmpireNameList;
import com.cricketsocial.bean.buddy.CountryCodes;
import com.cricketsocial.bean.buddy.ImageDetails;
import com.cricketsocial.bean.buddy.PlayerComparisionPerformanceList;
import com.cricketsocial.bean.buddy.PlayerSearch;
import com.cricketsocial.bean.buddy.PlayerSearchResponse;
import com.cricketsocial.bean.buddy.SelectedPlayers;
import com.cricketsocial.bean.buddy.SelectedPlayersInfo;
import com.cricketsocial.bean.buddy.SendInviteByMail;
import com.cricketsocial.bean.buddy.UserActivate;
import com.cricketsocial.bean.buddy.UserBattingPerformanceDTO;
import com.cricketsocial.bean.buddy.UserConnection;
import com.cricketsocial.bean.buddy.UserPlayrInfo;
import com.cricketsocial.bean.buddy.UserProfile;
import com.cricketsocial.bean.buddy.UserProfileUpdate2;
import com.cricketsocial.bean.buddy.UserRole;
import com.cricketsocial.bean.buddy.UserSearchVO;
import com.cricketsocial.bean.event.AcceptEventInfo;
import com.cricketsocial.bean.event.BuddyEventInvitationList;
import com.cricketsocial.bean.event.EditEvent;
import com.cricketsocial.bean.event.Event;
import com.cricketsocial.bean.event.Event2;
import com.cricketsocial.bean.event.EventResponse;
import com.cricketsocial.bean.event.SchedulAcceptEventInfo;
import com.cricketsocial.bean.event.SheduleAcceptEventResponse;
import com.cricketsocial.bean.event.TournmentSearch;
import com.cricketsocial.bean.event.UserEventUpate;
import com.cricketsocial.bean.feed.FeedComment;
import com.cricketsocial.bean.feed.FeedDelete;
import com.cricketsocial.bean.feed.FeedHit;
import com.cricketsocial.bean.feed.FeedImage;
import com.cricketsocial.bean.feed.Feeds;
import com.cricketsocial.bean.ground.Ground;
import com.cricketsocial.bean.leauge.AutoScheduleDTO;
import com.cricketsocial.bean.leauge.CenturiesSerach;
import com.cricketsocial.bean.leauge.MenuList;
import com.cricketsocial.bean.leauge.MenuURL;
import com.cricketsocial.bean.leauge.TournamentDTO;
import com.cricketsocial.bean.leauge.UmpireRating;
import com.cricketsocial.bean.notification.EventNotificationDTO;
import com.cricketsocial.bean.response.BullPreferenceVO;
import com.cricketsocial.bean.response.CodeVerificationResponse;
import com.cricketsocial.bean.response.FanResponse;
import com.cricketsocial.bean.response.ForgotPasswordResponse;
import com.cricketsocial.bean.response.ForgotPasswordResults;
import com.cricketsocial.bean.response.HubResponse;
import com.cricketsocial.bean.response.LoginResponse;
import com.cricketsocial.bean.response.MailInvitaionResponse;
import com.cricketsocial.bean.response.MatchesAroundYouResponse;
import com.cricketsocial.bean.response.ResponseType;
import com.cricketsocial.bean.response.ResponseTypeSchedule;
import com.cricketsocial.bean.response.RoasterResponseById;
import com.cricketsocial.bean.response.ScheduleResponse;
import com.cricketsocial.bean.response.SearchMainResponse;
import com.cricketsocial.bean.response.SearchResponse;
import com.cricketsocial.bean.response.SearchResults;
import com.cricketsocial.bean.response.UserActivationResponse;
import com.cricketsocial.bean.response.UserFeedHitResponse;
import com.cricketsocial.bean.response.UserFeedResponse;
import com.cricketsocial.bean.response.UserResponse;
import com.cricketsocial.bean.roaster.RoasterEventSearch;
import com.cricketsocial.bean.roaster.RoasterMedia;
import com.cricketsocial.bean.roaster.RosterProfile;
import com.cricketsocial.bean.roaster.ScoreBean;
import com.cricketsocial.bean.roaster.UmpireList;
import com.cricketsocial.bean.role.SubRoleLevelFour;
import com.cricketsocial.bean.role.SubRoleLevelOne;
import com.cricketsocial.bean.role.SubRoleLevelThree;
import com.cricketsocial.bean.role.SubRoleLevelTwo;
import com.cricketsocial.bean.role.UserLanguageMap;
import com.cricketsocial.bean.role.UserPlaceMap;
import com.cricketsocial.bean.role.UserProfileRole;
import com.cricketsocial.bean.role.UserRoleMap;
import com.cricketsocial.bean.role.UserSubRoleLevelFourMap;
import com.cricketsocial.bean.role.UserSubRoleLevelOneMap;
import com.cricketsocial.bean.role.UserSubRoleLevelThreeMap;
import com.cricketsocial.bean.role.UserSubRoleLevelTwoMap;
import com.cricketsocial.bean.updatedevent.EventMatchMap;
import com.cricketsocial.bean.user.CodeVerification;
import com.cricketsocial.bean.user.ForgotPasswordBean;
import com.cricketsocial.bean.user.MergeDTO;
import com.cricketsocial.bean.user.UserCodeVerification;
import com.cricketsocial.bean.user.UserResults;
import com.cricketsocial.common.CSException;
import com.cricketsocial.common.CSRestFullService;
import com.cricketsocial.common.DateUtil;
import com.cricketsocial.common.GsonConverters;
import com.cricketsocial.common.UserCommons;
import com.cricketsocial.common.Util;
import com.cricketsocial.restservice.CSRestTemplateService;
import com.cricketsocial.restservice.CricketSocialRestTemplateService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.zxing.Result;

@Controller
public class CricketSocialController {

	
	@Autowired
	private CricketSocialRestTemplateService cricketSocialRestTemplateService;
	
	
	@Autowired
	private CSRestTemplateService csRestTemplateService;
	
	
	private HubRequest hubReq=null;
	

	/*private static String defaultBuddyAroundYouLatlongValue="13.082680199999999,80.2707184";	
	private static String defaultTeamBoardAroundYouLatLongValue="13.082680199999999,80.2707184";
	private static String defaultMatchesAroundYouLatLongValue="13.082680199999999,80.2707184";
	private static String defaultLeagueBoardAroundYouLatLongValue="13.082680199999999,80.2707184";
	private static String defaultMerchantAroundYouLatLongValue="13.082680199999999,80.2707184";
*/
	
	private static String defaultBuddyAroundYouLatlongValue="";	
	private static String defaultTeamBoardAroundYouLatLongValue="";
	private static String defaultMatchesAroundYouLatLongValue="";
	private static String defaultLeagueBoardAroundYouLatLongValue="";
	private static String defaultMerchantAroundYouLatLongValue="";

	@SuppressWarnings("unused")
	private Gson gsonobj=null;
	
	private Logger logger = Logger.getLogger(CricketSocialController.class);
	
	@RequestMapping(value="/healthcheck",method=RequestMethod.GET)
	public  @ResponseBody String healthcheck(HttpServletRequest request)
	{
          String response=null; 
		try{
			 ModelMap map=new ModelMap();
             map.put("Status", "Ok");
             map.put("ResponseCode", 200);
             response=GsonConverters.getGsonObject().toJson(map);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return response;
	}
	
	@RequestMapping(value="/home",method=RequestMethod.GET)
	public ModelAndView homePage(HttpServletRequest request)
	{
		System.out.println("controller : ");
		ModelAndView model= null;
		try{
			model= new ModelAndView("welcome");
			 
					
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	}
	
	@RequestMapping(value="/registration", method=RequestMethod.POST)
	public @ResponseBody UserResponse userRegestration(HttpServletRequest request,@RequestBody UserProfile userProfile)
	{
		
		UserResponse re=null;
		
		//if (Util.rpHash(userProfile.getDefaultReal()).equals(userProfile.getDefaultRealHash())) {
			try{
				 hubReq=new HubRequest(3);
				 hubReq.setMsgType(3);
				 //hubReq.setProperty("targetItem",  "{\"emailAddress\":\""+userProfile.getEmailAddress()+"\",\"firstName\":\""+userProfile.getFirstName()+"\",\"password\":\""+userProfile.getPassword()+"\",\"loginType\":\""+userProfile.getLoginType()+"\"}");
				 hubReq.setRequestParam(userProfile);
				 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("controller result -------------------> "+result );
				 
				 JSONObject json;
					GsonBuilder builder = new GsonBuilder();
				    Gson gson = builder.create();
				    LoginResponse he=gson.fromJson(result, LoginResponse.class);
				 
						System.out.println("response : "+he.getRequestStatus());
						System.out.println(""+he.getResults());
						re=he.getResults();
						System.out.println("userneme : "+re.getUserExist());
						UserProfile e=re.getItemsFound()[0];
						
						System.out.println("user email : "+e.getEmailAddress());
			}catch(CSException e)
			{
				e.printStackTrace();
			}
			catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		/*}else {
			re=new UserResponse();
			re.setCaptchaValidation("Invalid captcha");
			System.out.println("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
		}*/
		return re;
	}
	
	
	
	@RequestMapping(value="/oAuthRegistration", method=RequestMethod.POST)
	public @ResponseBody UserResponse oAuthRegistration(HttpServletRequest request,@RequestBody UserProfile userProfile)
	{
		System.out.println("email address : "+userProfile.getEmailAddress());
		System.out.println("first name : "+userProfile.getFirstName());
		System.out.println("password : "+userProfile.getPassword());
		System.out.println("last name ----> "+userProfile.getLastName());
		UserResponse re=null;
		
			try{
				 hubReq=new HubRequest(3);
				 hubReq.setMsgType(3);
				 //hubReq.setProperty("targetItem",  "{\"emailAddress\":\""+userProfile.getEmailAddress()+"\",\"firstName\":\""+userProfile.getFirstName()+"\",\"password\":\""+userProfile.getPassword()+"\",\"loginType\":\""+userProfile.getLoginType()+"\"}");
				 hubReq.setRequestParam(userProfile);
				 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("controller result -------------------> "+result );
				 
				 JSONObject json;
					GsonBuilder builder = new GsonBuilder();
				    Gson gson = builder.create();
				    LoginResponse he=gson.fromJson(result, LoginResponse.class);
				 
						System.out.println("response : "+he.getRequestStatus());
						System.out.println(""+he.getResults());
						re=he.getResults();
						System.out.println("userneme : "+re.getUserExist());
						UserProfile e=re.getItemsFound()[0];
						
			}catch(CSException e)
			{
				e.printStackTrace();
			}
		
		return re;
	}
	
	
	@RequestMapping(value="/success", method=RequestMethod.GET)
	public ModelAndView registrationSucces(@RequestParam String suid, String smg)
	{
		ModelAndView model=null;
		try{
			if(suid!=null)
			{
				model=new ModelAndView("loginsuccess");
				System.out.println("smg........... "+smg);
				if(smg!=null)
				{
					if(smg.equalsIgnoreCase("NO"))
					{
						model.addObject("SUCCMSG", "REG");
						System.out.println("NOOOOOOOOOOOOOOOOOOOO");
					}else{
						model.addObject("SUCCMSG", "Already REG");
						System.out.println("YEEEEEEEEEEEEEEEEEEEEEEESSSSSSSSSSSSSS");
					}
				}else{
					System.out.println("NNNNNNNNNNNNNNNNNNNNNN");
				}
			}else{
				model=new ModelAndView("redirect:/login.htm");
			}
		}catch(Exception e)
		{
		e.printStackTrace();	
		}
		return model;
		
	}
	
	@RequestMapping(value="/registration2", method=RequestMethod.GET)
	public ModelAndView userRegestration2(@ModelAttribute UserProfile userProfile)
	{
		
		ModelAndView model=null;
		
		try{
			hubReq=new HubRequest(3);
			 hubReq.setMsgType(3);
			// hubReq.setProperty("targetItem", "{\"storeUserName\":\"testeeee\",\"status\":\"*\"}");
			 hubReq.setProperty("targetItem",  "{\"emailAddress\":\"test1239@gmail.com\",\"firstName\":\"test firstname\",\"password\":\"test password\"}");
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result );
			 
			 JSONObject json;
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    LoginResponse he=gson.fromJson(result, LoginResponse.class);
			 
					System.out.println("response : "+he.getRequestStatus());
					System.out.println(""+he.getResults());
					UserResponse re=he.getResults();
					System.out.println("userneme : "+re.getUserExist());
					UserProfile e=re.getItemsFound()[0];
					
					System.out.println("user email : "+e.getEmailAddress());
		}catch(Exception e)
		{
			e.printStackTrace();
			
		}
		return model;
		
	}
	
	@RequestMapping(value="/loginValidate", method=RequestMethod.POST)
	public ModelAndView loginValidate(HttpServletRequest request,UserProfile userProfile)
	{
		UserProfile profile=null;
		ModelAndView model=null;
		try{
			System.out.println("useremailaddress : "+userProfile.getEmailAddress());
			System.out.println("password : -------> "+userProfile.getPassword());
			System.out.println("logitude :=-----------------> "+userProfile.getLatLang());
			
			String u="{\"emailAddress\":\""+userProfile.getEmailAddress()+"\",\"password\":\""+userProfile.getPassword()+"\"}";
			hubReq=new HubRequest(6);
			 hubReq.setMsgType(6);			
			// userProfile.setLoginType("CricketSocial");
			 System.out.println("The login type :"+userProfile.getType());
			 if(userProfile.getType().equalsIgnoreCase("Valid")){
			 userProfile.setLoginType("CricketSocial");
			 userProfile.setLoginTypeId("bc7d0685-a030-485b-832a-2b18dd193e0d");
			 }else
			 {
				 userProfile.setLoginType("Manual");
				 userProfile.setLoginTypeId("c3bfa2b8-78ec-4bf5-b533-0023ce7688a2"); 
			 }
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result );
			 
			 JSONObject json;
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    LoginResponse he=gson.fromJson(result, LoginResponse.class);
			   // System.out.println("he.getResults().getLoginStatus() : "+he.getResults().getLoginStatus());
			  
			    if(he!= null && he.getResults() != null&&  he.getResults().getLoginStatus()!=null){
			    	  if(he.getResults().getLoginStatus().equalsIgnoreCase("Matched"))
					    {
			    		  
			    		 if(userProfile.getLoginType().equalsIgnoreCase("CricketSocial")){
					    	System.out.println("LOGIN SUCCESS");
					    	
					    	profile=he.getResults().getItemsFound()[0];
							  
						 
							 HttpSession session=request.getSession();
							 session.setAttribute("USRID", profile.getUserId());
							 session.setAttribute("USRFNA", profile.getFirstName());
							 session.setAttribute("USREMAIL", profile.getEmailAddress());			 
							// System.out.println("session id : "+session.getAttribute("USRID"));
							 session.setAttribute("USRIMG", profile.getUserImageUrl());
							// USRLastName
							 String name=profile.getFirstName();
							 if(profile.getLastName()!=null){
								 name=name+" "+profile.getLastName();
							 }
							 session.setAttribute("USRLastName", name);
							// session.setAttribute("LoginLatLong", arg1);
							 String userLatLongVal=userProfile.getLatLang();
							 HubRequest hubReq=new HubRequest(13);
							 hubReq.setMsgType(13);				
							 UserProfile userdetails= new UserProfile();
							 userdetails.setUserId(profile.getUserId());
							 hubReq.setRequestParam(userdetails);
							 String struserDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("user details getting ofter update -------------------> "+struserDetails );
							 GsonBuilder builder1 = new GsonBuilder();
							    Gson gson2 = builder1.create();
							 
							  LoginResponse profile2=gson2.fromJson(struserDetails, LoginResponse.class);
							  
						    if(profile2.getResults().getItemsFound()!=null)
						    {

							   
							    	 
							    	 System.out.println("session valude===============");
							    	    session.removeAttribute("USRIMG");
							    	    System.out.println("user image==============="+ session.getAttribute("USRIMG"));
							    		 session.setAttribute("USRIMG", profile2.getResults().getItemsFound()[0].getUserImageUrl());
							    		  System.out.println("user image===============11  "+session.getAttribute("USRIMG"));
							    		  session.removeAttribute("USRFNA");
							    		 session.setAttribute("USRFNA",profile2.getResults().getItemsFound()[0].getFirstName());
							    		 String name2=profile2.getResults().getItemsFound()[0].getFirstName();
										 if(profile2.getResults().getItemsFound()[0].getLastName()!=null){
											 name2=name2+" "+profile2.getResults().getItemsFound()[0].getLastName();
										 }
										 session.removeAttribute("USRLastName");
										 session.setAttribute("USRLastName", name2);
							    		 //userprofileupdate
							    	 
							    	 //session.setMaxInactiveInterval(arg0)
							     
							    		 if(userLatLongVal==null || userLatLongVal==""){
							    			 userLatLongVal=profile2.getResults().getItemsFound()[0].getLatLang();
							    			 session.setAttribute("USRLocationAllowed", "No"); 
							    		 }else
							    		 {
							    			 session.setAttribute("USRLocationAllowed", "Yes"); 
							    		 }
							    		 
							    		 
						    }
						   
							 session.setAttribute("USRLocation", userLatLongVal);
							 
							 
							 System.out.println("user location----------------------------------------->"+session.getAttribute("USRLocation"));
							 
							 
							 //  For Score Card Redirect
							 
							 if(profile.getDateOfBirth()!=null){
								 model= new ModelAndView("redirect:/");
								 
							 }else{
								 model= new ModelAndView("redirect:/");
							 }
							 
					    }else
					    {
					    	System.out.println("the manual users");
					    	/*request.setAttribute("LogedinUserId", he.getResults().getItemsFound()[0].getUserId());
					    	model=new ModelAndView("redirect:/manualLogineduser");*/
					    	model=new ModelAndView("ManualLogin");
					    	HttpSession session=request.getSession();
							 session.setAttribute("LogedinUserId", he.getResults().getItemsFound()[0].getUserId());
					    }
							
					    }else if(he.getResults().getLoginStatus().equalsIgnoreCase("Not Activated")){
					    	
					    	if(!(userProfile.getType().equalsIgnoreCase("Valid"))){
					    		model=new ModelAndView("redirect:/login.htm?loginvalidation=Invalid Credentials");
						    	request.setAttribute("loginvalidation", "Invalid Credentials");
					    		
					    	}else{
					    	model=new ModelAndView("redirect:/login.htm?loginvalidation=Please activate your account to continue");
					    	//model.addObject("loginvalidation", "Invalid Credentials");
					    	request.setAttribute("loginvalidation", "Invalid Credentials");}
					    }else{
					    	
					    	model=new ModelAndView("redirect:/login.htm?loginvalidation=Invalid Credentials");
					    	//model.addObject("loginvalidation", "Invalid Credentials");
					    	request.setAttribute("loginvalidation", "Invalid Credentials");
					    	//model.addObject("LGIN", "Login");
					    	
					    	 
					    }
			    }else{
			    	System.out.println("invalid  service unavailable");
			    	model=new ModelAndView("redirect:/login.htm?loginvalidation=service unavailable");
			    	request.setAttribute("loginvalidation", "service unavailable");
			    }
			 
			 
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	}
	
	/*@RequestMapping(value="manualLogineduser", method=RequestMethod.GET)
	public ModelAndView manualLogineduser(HttpServletRequest request)
	{
		ModelAndView mav=null;
		try{
			mav=new ModelAndView("ManualLogin");
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return mav;
	}*/
	
	@RequestMapping(value="ManualLoginYes",method=RequestMethod.GET)
	public ModelAndView ManualLoginYes(HttpServletRequest request)
	{
		ModelAndView mav=null;
		HttpSession session=request.getSession(true);
		try{
			if(session!=null && session.getAttribute("LogedinUserId")!=null)
			{
			UUID LogedinUserId=(UUID) session.getAttribute("LogedinUserId");
			System.out.println("The loginuserid :"+LogedinUserId);
			mav=new ModelAndView("ManualLoginYes");
			mav.addObject("LogedinUserId", LogedinUserId);
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}}
			catch(Exception e)
		{
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping(value="/ManualLoginNo", method=RequestMethod.GET)
	public ModelAndView noPage(HttpServletRequest request){
		 
		 ModelAndView model=null;
		 HttpSession session=request.getSession(true);
		 try{
			if(session!=null && session.getAttribute("LogedinUserId")!=null)
			{
				UUID LogedinUserId= (UUID) session.getAttribute("LogedinUserId");
				System.out.println("the user id :"+LogedinUserId);
				model=new ModelAndView("ManualLoginno");
				model.addObject("LogedinUserId", LogedinUserId);
			
			}else{
				model = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}}catch(Exception e)
			{
				e.printStackTrace();
			}
		return model;
	}
	
	@RequestMapping(value="/Manualnewmailotp", method=RequestMethod.POST)
	public ModelAndView noOtp(HttpServletRequest request){
	ModelAndView model=null;
	String response = null;
	try{
	model=new ModelAndView("otp");  
	String LogedinUserId=request.getParameter("LogedinUserId");
	String mail=request.getParameter("accountRecoveryBoxId");
	
	//for otp
	hubReq = new HubRequest();
	hubReq.setMsgType(208);
	ModelMap map = new ModelMap();
	map.put("emailAddress", mail);
	hubReq.setRequestParam(map);
	String otpResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
	System.out.println("the rsponse is :"+otpResponse);
	if(otpResponse != null){
		HubResponse res = GsonConverters.getGsonObject().fromJson(otpResponse, HubResponse.class);
		if(res != null && res.getRequestStatus() != null && res.getResults().getMergeOTPResult() != null){
			response = res.getResults().getMergeOTPResult().getMergeOTPResultStatus();
			System.out.println("response in controller :"+response);
		}
		model.addObject("Email",mail);
		model.addObject("ResetType",res.getResults().getMergeOTPResult().getMergeOTPResultType());
		model.addObject("LogedinUserId", LogedinUserId);
	}else
	{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=service unavailable");
	}
	}catch(Exception e){
	e.printStackTrace();
	} 
	return model;
	}
	
	
	@RequestMapping(value="/ManualLoginsearch", method=RequestMethod.GET)
	public ModelAndView ManualLoginsearch(HttpServletRequest request) throws CSException{
		String keyToFindAccount=request.getParameter("accountMergeBoxName");
		ModelAndView model=null;
		 HttpSession session=request.getSession(true);
		try{
			if(session!=null && session.getAttribute("LogedinUserId")!=null)
			{
                System.out.println("keyToFindAccount-----> "+keyToFindAccount);
                
                UUID LogedinUserId= (UUID) session.getAttribute("LogedinUserId");
        		System.out.println("manual login search : :"+LogedinUserId);
				hubReq=new HubRequest(240);
				
				ModelMap map=new ModelMap();
				map.put("searchQuery", keyToFindAccount);
				map.put("startNode", 0);
				map.put("endNode", 30);
				map.put("searchPage", "ETLMerge");
				hubReq.setRequestParam(map);
				String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    
			    HubResponse hubres =gson.fromJson(result, HubResponse.class);
			    List<UserProfile> userList=null;
				   if(hubres.getResults()!=null) {
					   SearchResponse searchResponse=hubres.getResults().getSearchResponse();
					    userList =searchResponse.getUserList();
				   }
				   model=new ModelAndView("ManualLoginuseridentify");
					model.addObject("Users", userList);
					model.addObject("LogedinUserId", LogedinUserId);
				   if(userList.size() <=0){
					   userList=null;
					   
					 
					   model.addObject("ErrorMSG", "We are not able to find any account that matched your Name or Phone No or E-mail ID");
				   }
				    System.out.println("searchResponse.getUserList();"+userList);
			}else
			{
				model=new ModelAndView("redirect:/login.htm?loginvalidation=service unavailable");
			}
				   
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return model;
	}
	
	@RequestMapping(value="/ManualLoginmail", method=RequestMethod.POST)
	public ModelAndView ManualLoginmail(HttpServletRequest request){
		
		String email=request.getParameter("email");
		String userId=request.getParameter("userId");
		String LogedinUserId=request.getParameter("LogedinUserId");
		ModelAndView model=new ModelAndView("ManualLoginmail");
		model.addObject("email", email);
		model.addObject("UserId", userId);
		model.addObject("LogedinUserId", LogedinUserId);
		
		return model;
		
	}
	
	@RequestMapping(value="/ManualLoginOtp", method = RequestMethod.POST)
	public @ResponseBody ModelAndView ManualLoginOtp(HttpServletRequest req){
		String response = null;
		ModelAndView model=null;
		try{
			model=new ModelAndView("ManualLoginsecurecode");
			String email=req.getParameter("email1");
			String userid=req.getParameter("UserId");
			String LogedinUserId=req.getParameter("LogedinUserId");
			System.out.println("email id to sent :"+email);
				hubReq = new HubRequest();
				hubReq.setMsgType(208);
				ModelMap map = new ModelMap();
				map.put("emailAddress", email);
				map.put("userId", userid);
				hubReq.setRequestParam(map);
				String otpResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
				System.out.println("the rsponse is :"+otpResponse);
				if(otpResponse != null){
					HubResponse res = GsonConverters.getGsonObject().fromJson(otpResponse, HubResponse.class);
					if(res != null && res.getRequestStatus() != null && res.getResults().getMergeOTPResult() != null){
						response = res.getResults().getMergeOTPResult().getMergeOTPResultStatus();
						System.out.println("response in controller :"+response);
					}
					model.addObject("UserId",userid);
					model.addObject("Email",email);
					model.addObject("ResetType",res.getResults().getMergeOTPResult().getMergeOTPResultType());
					model.addObject("LogedinUserId", LogedinUserId);
					
				}else
				{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=service unavailable");
				}
			
			
		}catch(Exception ex){
			ex.printStackTrace();
		}
		return model;
	}
	
	@RequestMapping(value="/sendmeotpagain", method=RequestMethod.POST)
	public @ResponseBody String sendMeOtpAgain(HttpServletRequest request,@RequestBody ForgotPasswordBean forgot){
		System.out.println(" email"+forgot.getEmailAddress());
		String response=null;
		
		try{
			
			hubReq = new HubRequest();
			hubReq.setMsgType(208);
			ModelMap map = new ModelMap();
			map.put("emailAddress", forgot.getEmailAddress());
			map.put("userId", forgot.getUserId());
			hubReq.setRequestParam(map);
			String otpResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			System.out.println("the rsponse is :"+otpResponse);
			if(otpResponse != null){
				HubResponse res = GsonConverters.getGsonObject().fromJson(otpResponse, HubResponse.class);
				if(res != null && res.getRequestStatus() != null && res.getResults().getMergeOTPResult() != null){
					response = res.getResults().getMergeOTPResult().getMergeOTPResultStatus();
					System.out.println("response in controller :"+response);
				}
			}
		}catch(CSException e)
		{
			e.printStackTrace();
		}
		return response;
	}
	
	
	@RequestMapping(value="/ManualcodeVerfication", method=RequestMethod.POST)
	public ModelAndView ManualcodeVerfication(HttpServletRequest request){
		
		ModelAndView model=new ModelAndView();
		String merge = null;
		try {

			HttpSession session = request.getSession(true);
			
			hubReq=new HubRequest(20);
			 hubReq.setMsgType(20);
			 String userId=request.getParameter("userId");
			 String LogedinUserId=request.getParameter("LogedinUserId");
			 String codeToAuthorise=request.getParameter("secureCode");
			 String Email=request.getParameter("Email");
			 System.out.println("before : : :userId :"+userId);
		    	System.out.println("before : : :Email :"+Email);
		    	System.out.println("before : : :LogedinUserId :"+LogedinUserId);
			 UserCodeVerification userCode=new UserCodeVerification();
			 userCode.setCodeNumber(codeToAuthorise);
			 userCode.setUserId(userId);
			 userCode.setFlag("ETL");
			 hubReq.setRequestParam(userCode);
			 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    CodeVerificationResponse cricResponse=gson.fromJson(response, CodeVerificationResponse.class);
			    CodeVerification codeVerification=(CodeVerification) cricResponse.getResults();
			    if(codeVerification.isCodeVerificationStatus()){
			    	
			    	//  merging
			    	
			    	hubReq =  new HubRequest();
					hubReq.setMsgType(212);

					ModelMap map = new ModelMap();
					map.put("mergedUserId", LogedinUserId);      //  Login Person Userid
					map.put("currentUserId", userId);            //search userid
					map.put("flag", "ETL");
				
					hubReq.setRequestParam(map);
					
					String mergeUser = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(mergeUser != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(mergeUser, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getMergeAccountStatus() != null){
							merge = hubRes.getResults().getMergeAccountStatus();
							model=new ModelAndView("welcome");
							model.addObject("responsestring", "success");
							
						}
					}else
					{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
			    	
			    	
			    }else{
			    	
			    	System.out.println("Fail : : :userId :"+userId);
			    	System.out.println("Fail : : :Email :"+Email);
			    	System.out.println("Fail : : :LogedinUserId :"+LogedinUserId);
			    	
					model=new ModelAndView("ManualLoginsecurecode");
			    	model.addObject("UserId",userId);
					model.addObject("Email",Email);
					model.addObject("LogedinUserId", LogedinUserId);
					model.addObject("Fromsubmit", "Yes");
					request.setAttribute("codeVerificationFlag", true);
					
			    }
		} catch (CSException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		 
		return model;
		
	}
	
	
	/*@RequestMapping(value="/verifyEmailAddressMergeNo",method=RequestMethod.POST)
	@ResponseBody
	public String verifyEmailAddressMergeNo(@RequestBody ForgotPasswordBean forgot){
		String response = "";
		try{
			hubReq = new HubRequest();
			hubReq.setMsgType(208);
			ModelMap map = new ModelMap();
			map.put("emailAddress", forgot.getEmailAddress());
			map.put("userId", forgot.getUserId());
			hubReq.setRequestParam(map);
			String otpResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			System.out.println("the rsponse is :"+otpResponse);
			if(otpResponse != null){
				HubResponse res = GsonConverters.getGsonObject().fromJson(otpResponse, HubResponse.class);
				if(res != null && res.getRequestStatus() != null && res.getResults().getMergeOTPResult() != null){
					response = res.getResults().getMergeOTPResult().getMergeOTPResultStatus();
					System.out.println("response in controller :"+response);
				}
			}

		}catch(CSException e){
			e.printStackTrace();
		}
		return response;
	}*/
	@RequestMapping(value="/verifyEmailAddressMergeNo",method=RequestMethod.POST)
	@ResponseBody
	public String verifyEmailAddressMergeNo(@RequestBody ForgotPasswordBean forgot) throws JSONException{
		String response = "";
		try{
			hubReq = new HubRequest();
			hubReq.setMsgType(255);
			ModelMap map1 = new ModelMap();
			map1.put("email_address", forgot.getEmailAddress());
			hubReq.setRequestParam(map1);
			String emailResponse = cricketSocialRestTemplateService.userRegistration(hubReq);

			JSONObject resresultlist=new JSONObject(emailResponse);
			JSONObject responseresult=resresultlist.getJSONObject("results");
			JSONObject array=responseresult.getJSONObject("EmailDetails");

			if(array.get("userFlag").equals("Exist"))
			{
				response = "AlreadyExists";
				System.out.println("response=------------>"+response);
			}
			else{

				hubReq = new HubRequest();
				hubReq.setMsgType(208);
				ModelMap map = new ModelMap();
				map.put("emailAddress", forgot.getEmailAddress());
				map.put("userId", forgot.getUserId());
				hubReq.setRequestParam(map);
				String otpResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
				System.out.println("the rsponse is :"+otpResponse);
				if(otpResponse != null){
					HubResponse res = GsonConverters.getGsonObject().fromJson(otpResponse, HubResponse.class);
					if(res != null && res.getRequestStatus() != null && res.getResults().getMergeOTPResult() != null){
						response = res.getResults().getMergeOTPResult().getMergeOTPResultStatus();
						System.out.println("response in controller :"+response);
					}
					response = "success";
				}
			}
		}catch(CSException e){
			e.printStackTrace();
		}
		return response;
	}




@RequestMapping(value="/ManualNoCodeVerification",method=RequestMethod.POST)
	@ResponseBody
	public String manualNoCodeVerification(@RequestBody UserCodeVerification userCode,HttpServletRequest req){
		String response = null;
		ModelAndView mav=null;
		try{
			HttpSession session = req.getSession(true);
			hubReq=new HubRequest();
			hubReq.setMsgType(20);
			ModelMap map = new ModelMap();
			map.put("userId", userCode.getUserId());
			map.put("codeNumber", userCode.getCodeNumber());
			map.put("flag", "ETL");
			hubReq.setRequestParam(map);
			String codeVerification = cricketSocialRestTemplateService.userRegistration(hubReq);
			GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		    CodeVerificationResponse cricResponse=gson.fromJson(codeVerification, CodeVerificationResponse.class);
		    CodeVerification codeVerification1=(CodeVerification) cricResponse.getResults();
		    if(codeVerification1.isCodeVerificationStatus()){
		    	hubReq =  new HubRequest();
				hubReq.setMsgType(254);

				ModelMap map1 = new ModelMap();
				map1.put("user_id", userCode.getUserId());      //  Login Person Userid
				map1.put("email_address", userCode.getEmailAddress());            //search userid
				map1.put("password", userCode.getPassword());
				hubReq.setRequestParam(map1);

				String noResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
				System.out.println("noResponse----->"+noResponse);
				if(noResponse != null){
					HubResponse hubRes = GsonConverters.getGsonObject().fromJson(noResponse, HubResponse.class);
					if(hubRes != null && hubRes.getResults() != null ){
						/*response = hubRes.getResults();*/
                        			response="success";			
					}
					response="success";	
				//	mav=new ModelAndView("redirect:/manualloginmerge");
		    }else{
		    	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
				
		    }else{
		    	response="code mismatch";	
		    }
		}catch(Exception e){
			e.printStackTrace();
		}
		return response;
		
	}

@RequestMapping(value="/manualloginmerge", method=RequestMethod.GET)
public ModelAndView manualloginmerge(HttpServletRequest request)
{
	ModelAndView mav=null;
	try{
		mav=new ModelAndView("welcome");
		mav.addObject("responsestring", "success1");
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return mav;
}
	
@RequestMapping(value="/userprofile", method=RequestMethod.GET)
public ModelAndView userprofile(HttpServletRequest request)
{
	ModelAndView model=null;
	try{
		//model=new ModelAndView("userprofile");
		 HttpSession session = request.getSession(true);
		 System.out.println("session.getAttribute()"+session.getAttribute("USRID"));
		 if(session.getAttribute("USRID")!=null)
		 {
		 gsonobj=GsonConverters.getGsonObject();
		 UUID userid=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);
			// hubReq.setProperty("targetItem", "{\"storeUserName\":\"testeeee\",\"status\":\"*\"}");
		//	 hubReq.setProperty("targetItem",  "{\"userId\":\""+userid+"\"}");
			UserProfile userProfile= new UserProfile();
			userProfile.setUserId(userid);
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result val 123-------------------> "+result );
		 
			 
			  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
			  HubResponse userDetails=GsonConverters.getGsonObject().fromJson(result, HubResponse.class);
			  
			 if(profile.getResults()!=null)
			 {
				 
				 
				if(profile.getResults().getItemsFound()!=null)
				{
					
						//  model=new ModelAndView("userprofile");
				//model= new ModelAndView("userProfile2");
					model= new ModelAndView("userProfile3");
					 
					List<CountryCodes> countryCodes = userDetails.getResults().getItemsFound().get(0).getCountryCodes();
					 model.addObject("countryCodes", countryCodes);
					 System.out.println("country code ------------>>>>"+countryCodes.get(0).getCountryName()+",,"+countryCodes.get(0).getCountryCode());
					 UserProfileRole userProfileRole=userDetails.getResults().getItemsFound().get(0);
					  model.addObject("UserProfileOBJ", profile.getResults().getItemsFound()[0]);
					  if(profile.getResults().getItemsFound()[0].getDob()!=null){
					     Date dateInString = profile.getResults().getItemsFound()[0].getDob();
					     System.out.println("dateInString------->"+dateInString);
					     Calendar cal = Calendar.getInstance();
					     cal.setTime(dateInString);
			             System.out.println("dateInString----->"+dateInString);
			             model.addObject("year",cal.get(Calendar.YEAR));
						 model.addObject("month",cal.get(Calendar.MONTH)+1);
						 model.addObject("date",cal.get(Calendar.DATE));
					     }else{
					    	
					     }
						  System.out.println("profile.getResults().getItemsFound()[0] "+profile.getResults().getItemsFound()[0].getUserId());
						     hubReq=new HubRequest(14);
							 hubReq.setMsgType(14);
							// hubReq.setProperty("targetItem", "{\"storeUserName\":\"testeeee\",\"status\":\"*\"}");
							// hubReq.setProperty("targetItem",  "{}");
							 //hubReq.setRequestParam(userid);
							 hubReq.setRequestParam("");
							 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("Get the role details  -------------------> "+result2 );
						 
							 
							// UserProfileRoleResponse role=gsonobj.fromJson(result2, UserProfileRoleResponse.class);
							  HubResponse role=GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
							 if(role.getResults()!=null)
							 {
								 model.addObject("RoleList", role.getResults().getRolesAndSubRoles().getRole());
								 System.out.println(role.getResults());
								/* for(Role r : role.getResults().getRolesAndSubRoles().getRole())
								 {
									 System.out.println("role name : "+r.getRole());
								 }
								 System.out.println("==============================================");*/
								 
								 model.addObject("SubCAT1", role.getResults().getRolesAndSubRoles().getSubroleLevelOne());
								 
								/* for(SubRoleLevelOne s : role.getResults().getRolesAndSubRoles().getSubroleLevelOne())
								 {
									 System.out.println("subcate name : "+s.getSub_role_level_one()+"       Subcategory ID : "+s.getSub_role_level_one_id());
									 
								 }*/
								 								 
								 
								 model.addObject("SubCAT2",role.getResults().getRolesAndSubRoles().getSubroleLevelTwo());
								 
								/* for(SubRoleLevelThree s : role.getResults().getRolesAndSubRoles().getSubroleLevelThree())
								 {
									 System.out.println("subcat3 ----->"+s.getSubRoleLevelThree());
								 }*/
								 model.addObject("SubCAT3",role.getResults().getRolesAndSubRoles().getSubroleLevelThree());
								 /*for(SubRoleLevelFour s : role.getResults().getRolesAndSubRoles().getSubroleLevelFour())
								 {
									 System.out.println("subcate4 -----> "+s.getSubRoleLevelFour());
								 }*/
									 
								 model.addObject("SubCAT4",role.getResults().getRolesAndSubRoles().getSubroleLevelFour());
							 }
							 
							 
							 hubReq=new HubRequest();
							 hubReq.setMsgType(22);
							 BoardSearchRequest searchReq= new BoardSearchRequest();
							 //searchReq.setLatlang("13.082680199999999,80.2707184");
							 searchReq.setStartNode("0");
							 searchReq.setEndNode("40");
							 searchReq.setCategory("League");
							 searchReq.setLatlang("");
							 hubReq.setRequestParam(searchReq);
						    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("board result : "+strboardlist);
							 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
							 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
							
							 if(strsearchResponse.getResults().getSearchResponse()!=null)
							 {
								 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
								 model.addObject("BoardList", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
							 }
							 
							 
							
							 hubReq=new HubRequest();
							 hubReq.setMsgType(22);
							
							 searchReq.setCategory("Team");
							 searchReq.setLatlang("");

							 hubReq.setRequestParam(searchReq);
						    String strteamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("board result : "+strteamlist);
							 HubResponse strteamsearchResponse= GsonConverters.getGsonObject().fromJson(strteamlist, HubResponse.class); 
							 System.out.println("logitude : "+strteamsearchResponse.getResults().getSearchResponse());
							
							 if(strteamsearchResponse.getResults().getSearchResponse()!=null)
							 {
								 System.out.println("board list :---------->" +strteamsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
								 model.addObject("TeamList", strteamsearchResponse.getResults().getSearchResponse().getBoardProfileList());
							 }
							 HubRequest hubReq1=new HubRequest();
							 hubReq1=new HubRequest();
							 hubReq1.setMsgType(37);
							 
							 hubReq1.setRequestParam(new CodeVerification());
							  String ballPreferenceResponse=cricketSocialRestTemplateService.userRegistration(hubReq1);
							  
							  HubResponse ballResponse=GsonConverters.getGsonObject().fromJson(ballPreferenceResponse, HubResponse.class); 
							  List<BullPreferenceVO> ballPreferences=null;
							  if(ballResponse != null && ballResponse.getResults()!=null){
								 ballPreferences=ballResponse.getResults().getBallPrefenrenceList();	
							  }
							  model.addObject("BallPreferences",ballPreferences);
							 
							 
							 
				}else{
					 model= new ModelAndView("redirect:/");
				}
				 
				 
				 
			 }else{
				 model= new ModelAndView("redirect:/");
			 }
			 
		 }else{
			 model= new ModelAndView("redirect:/");
		 }
		
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
  return model;
	
}

	
	@RequestMapping(value="/homepage",method=RequestMethod.GET)
	public ModelAndView buddyhome(HttpServletRequest request)
	{
		ModelAndView model=null;
		try{
			model=new ModelAndView("homepage");
			
		 
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	}
	
	@RequestMapping(value="/",method=RequestMethod.GET)
	public ModelAndView buddyhome2(HttpServletRequest request)
	{
		ModelAndView model=null;
		try{
			
			 String ipAddress = request.getHeader("X-FORWARDED-FOR");
			 if (ipAddress == null) {
			     ipAddress = request.getRemoteAddr();
			 }
			 HttpSession session = request.getSession(true);
			 if(session.getAttribute("USRID")!=null)
			 {
				 gsonobj=GsonConverters.getGsonObject();
				 UUID userid=(UUID) session.getAttribute("USRID");
					hubReq=new HubRequest(13);
					 hubReq.setMsgType(13);
					
					 UserProfile userProfile= new UserProfile();
					 userProfile.setUserId(userid);
					 hubReq.setRequestParam(userProfile);
					 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
					  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
					  
					 if(profile!= null &&  profile.getResults()!=null)
					 {
						 
						if(profile.getResults().getItemsFound()!=null)
						{
							
							
							if(profile.getResults().getItemsFound()[0].getZipcode().length()>2)
							  {
								
								//Score Card Redirect
								System.out.println("Session for score card               "+session.getAttribute("ScoreCardSession"));
								
								if(session.getAttribute("ScoreCardSession") != null){
									 String score=(String) session.getAttribute("ScoreCardSession");
									 String boardId=(String) session.getAttribute("ScoreCardBoardId");
									 String matchId=(String) session.getAttribute("ScoreCardSessionMatchId");
									 if(score.equalsIgnoreCase("CompletedCard")){
										 model=new ModelAndView("redirect:/showScoreCard/boardId/"+boardId+"/matchId/"+matchId); 
									 }else if(score.equalsIgnoreCase("InprogressCard"))
									 {
										 model=new ModelAndView("redirect:/showScoreCardForInProgress/boardId/"+boardId+"/matchId/"+matchId); 
									 }
									 }else{
								
								
								//model=new ModelAndView("homepageLatest");
								model=new ModelAndView("homepageLatestnew");
								/*hubReq=new HubRequest(53);
								 hubReq.setMsgType(53);
								
								 ModelMap modelmap=new ModelMap();
								 modelmap.put("invitorId", userid);
								 hubReq.setRequestParam(modelmap);
								 String friendRequestCountString=cricketSocialRestTemplateService.userRegistration(hubReq);
								 
								 if(friendRequestCountString != null){
									 HubResponse requestCountResp= GsonConverters.getGsonObject().fromJson(friendRequestCountString, HubResponse.class);
										
									 if(requestCountResp != null && requestCountResp.getResults() != null ){
										 model.addObject("FriendRequestCount", requestCountResp.getResults().getUserConnection());

									 }else{
										 model.addObject("FriendRequestCount", new BuddyRequestCount());
									 }
									
								 }else{
									 model.addObject("FriendRequestCount", new BuddyRequestCount());
								 }
								*/
								
								 hubReq=new HubRequest(34);
								 hubReq.setMsgType(34);
								 ModelMap map1=new ModelMap();
								 map1.put("userId", userid.toString());
								 map1.put("startNode", 0);
								 map1.put("endNode", 100);
								 hubReq.setRequestParam(map1);
								 
								 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
								
							    SearchMainResponse response2=GsonConverters.getGsonObject().fromJson(invitaionResponse, SearchMainResponse.class);
								
							    SearchResults searchResults1=response2.getResults();
							    SearchResponse searchResponse1=searchResults1.getSearchResponse();
							    List<UserProfile> invitationUsers=new ArrayList<UserProfile>();
							    if(searchResponse1.getUserList() != null){
							    	invitationUsers=searchResponse1.getUserList();
							    	
							    	 model.addObject("MyRequests", invitationUsers);
									 model.addObject("requestsCount", invitationUsers.size() );
							    }								 
							    
							   								
								 hubReq=new HubRequest(8);
								 hubReq.setMsgType(8);
								
								 Feeds feed= new Feeds();
								 feed.setStartNode("0");
								 feed.setEndNode("50");
								 feed.setUserId(userid.toString());
								 feed.setFeedHitUserId(userid.toString());
								 hubReq.setRequestParam(feed);
								 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
								 
								 HubResponse resp= GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
								 model.addObject("FeedsList", resp.getResults().getFeedResponse().getFeedList());
								 
								 
								 
								 hubReq=new HubRequest();
								 hubReq.setMsgType(77);
								 BoardSearchRequest searchReq= new BoardSearchRequest();
								 String userlocation=(String) session.getAttribute("USRLocation");
								 System.out.println("userlocation"+userlocation);
								 if(userlocation!=null)
								 {
									if(userlocation.length()>3)
									{
										
										 searchReq.setLatlang(userlocation);
										 
									}else{
										 //searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
										// searchReq.setLatlang("13.082680199999999,80.2707184");
										 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
									}
								 }else{
									// searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
									// searchReq.setLatlang("13.082680199999999,80.2707184");
									 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
								 }
								
								 
								 searchReq.setStartNode("0");
								 searchReq.setEndNode("20");
								 searchReq.setCategory("Matches");
								 hubReq.setRequestParam(searchReq);
							    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
								 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
								
								 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
								 {
									 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
								 }
								
								 
								 
								 hubReq=new HubRequest();
								 hubReq.setMsgType(22);
								
								
								 if(userlocation!=null)
								 {
									if(userlocation.length()>3)
									{
										 searchReq.setLatlang(userlocation);
									}else{
										 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
									}
								 }else{
									 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
								 }
								
								 
								 searchReq.setStartNode("0");
								 searchReq.setEndNode("4");
								 searchReq.setCategory("League");
								 hubReq.setRequestParam(searchReq);
							    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
								 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
								
								 if(strsearchResponse.getResults().getSearchResponse()!=null)
								 {
									 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
								 }
								 
								 searchReq.setCategory("Team");
								 //searchReq.setLatlang("17.3700,78.4800");
								 if(userlocation!=null)
								 {
									if(userlocation.length()>3)
									{
										 searchReq.setLatlang(userlocation);
									}else{
										 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
									}
								 }else{
									 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
								 }
								 hubReq.setRequestParam(searchReq);
								 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
								 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
								 
								 if(strTeamResponse.getResults().getSearchResponse()!=null)
								 {
									 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
								 }
								 
								 hubReq.setMsgType(23);
								 searchReq.setCategory("");
								 //searchReq.setLatlang("17.3700,78.4800");
								 if(userlocation!=null)
								 {
									if(userlocation.length()>3)
									{
										 searchReq.setLatlang(userlocation);
									}else{
										 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
									}
								 }else{
									 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
								 }
								 hubReq.setRequestParam(searchReq);
								 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
								 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
								 if(buddyResponse.getResults().getSearchResponse()!=null)
								 {
									 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
									 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
								 }
								 
								 
								 
								 hubReq.setMsgType(79);
								 searchReq.setCategory("Merchants");
								 //searchReq.setLatlang("17.3700,78.4800");
								 if(userlocation!=null)
								 {
									if(userlocation.length()>3)
									{
										 searchReq.setLatlang(userlocation);
									}else{
										 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
									}
								 }else{
									 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
								 }
								 hubReq.setRequestParam(searchReq);
								 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
								 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
								 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
								 {
									 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
									 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
								 }
								
								 hubReq= new HubRequest();
								 hubReq.setMsgType(41);
								 ModelMap map=new ModelMap();
								 map.put("userId", userid);
								 map.put("startNode", 0);
								 map.put("endNode", 200);
								  hubReq.setRequestParam(map);
									 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
									 GsonBuilder builder = new GsonBuilder();
									 Gson gson = builder.create();
									 if(strBoardList!=null)
									 {
										 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
										 if(hubResponse!=null && hubResponse.getResults()!=null)
										 {
											 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
										 }else{
											 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
										 }
									 }else{
										 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
									 }
								 
									 
									 //userlocation
									 
									 //hubReq= new HubRequest();
									 System.out.println("user latlong location ----------------> "+userlocation);
									 hubReq.setMsgType(215);
									 ModelMap bannermap=new ModelMap();
									 bannermap.put("geolocation", userlocation);
									 bannermap.put("bannerType", "user");
									 hubReq.setRequestParam(bannermap);
								     String strUserBannerList=cricketSocialRestTemplateService.userRegistration(hubReq);
									if(strUserBannerList!=null){
										 HubResponse hubResponse= gson.fromJson(strUserBannerList, HubResponse.class);
										 if(hubResponse!=null && hubResponse.getResults()!=null && hubResponse.getResults().getBannerListByLatLang()!=null){
											 session.setAttribute("UserBannerList", hubResponse.getResults().getBannerListByLatLang().getBannerList());
										 }
										 /*if(hubResponse!=null && hubResponse.getResults()!=null && hubResponse.getResults().getSearchResponse()!=null){
											 session.setAttribute("UserBannerList", hubResponse.getResults().getSearchResponse().getBannerList());
											 System.out.println("banner list "+hubResponse.getResults().getSearchResponse().getBannerList().size());
											 List<BannerInformation> bannlist=(List<BannerInformation>) session.getAttribute("UserBannerList");
											 System.out.println("bannlist ---------> "+bannlist.size());
										 }*/
									}
							  }	
								 
							  }else{
								  model=new ModelAndView("redirect:/userprofile");
							  }
							 
							 
						}else{
							 model=new ModelAndView("welcome");
						} 
						 
						 
						 
					 }else{
						 model=new ModelAndView("welcome");
					 }
					 
				 
			 }else{
				 	model=new ModelAndView("welcome");
			 }
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
		//return null;
	}
	@RequestMapping(value="/login",method=RequestMethod.GET)
	public ModelAndView buddylogin(HttpServletRequest request)
	{
		ModelAndView model=null;
		try{
			String loginvalidation=(String) request.getParameter("loginvalidation");
			 //session.setAttribute("USRID", profile.getUserId());
			
			//System.out.println("loginvalidation is   "+loginvalidation.replace("%20", " "));
			
			model=new ModelAndView("welcome");
	    	model.addObject("LGIN", "Login");
	    	if(loginvalidation!=null){
	    		model.addObject("loginvalidation", loginvalidation.replace("%20", " "));
	    	}
	    	HttpSession session=request.getSession(true);
	    	if(session.getAttribute("Schedulemessage") != null){
	    		System.out.println("Schedulemessage :"+session.getAttribute("Schedulemessage"));
	    		model.addObject("Schedulemessage", session.getAttribute("Schedulemessage"));
	    		session.removeAttribute("Schedulemessage");
				session.removeValue("Schedulemessage");
	    	}
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	}
	
	@RequestMapping(value="/logout",method=RequestMethod.GET)
	public ModelAndView buddylogout(HttpServletRequest request)
	{
		ModelAndView model=null;
		try{
			 HttpSession session = request.getSession(true);
			 System.out.println("session.getAttribute()"+session.getAttribute("USRID"));
			 if(session!=null)
				 
			 {
				 session.invalidate();
				 System.out.println("session.invalidate();");
			 }
			 model=new ModelAndView("redirect:/");
		    	
			
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	}
	
	@RequestMapping(value="/buddyActivation",method=RequestMethod.GET)
	public ModelAndView buddyActivation(HttpServletRequest request, @RequestParam String active)
	{
		ModelAndView model=null;
		try{
			
			 
			 JSONObject json;
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			hubReq=new HubRequest(7);
			 hubReq.setMsgType(7);
		//	 hubReq.setProperty("targetItem",  "{\"userId\":\""+active+"\"}");
			 UserActivate userProfile=new UserActivate();
			 //userProfile.setUserId(active);
			
			 userProfile.setUserId(active);
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("User activation result -------------------> "+result);
			
			 UserActivationResponse useractive= gson.fromJson(result, UserActivationResponse.class);
			 
			 if(useractive!=null)
			 {
				 model= new ModelAndView("userActivemsg");
			 }else{
				 model=new ModelAndView("welcome");
			    //	model.addObject("LGIN", "Login");
			 }
			 
			 //session.setAttribute("USRID", profile.getUserId());
			
			
			
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	}
	
	@RequestMapping(value="/oAuthloginValidate", method=RequestMethod.POST)
	public @ResponseBody UserResponse oAuthloginValidate(HttpServletRequest request,@RequestBody UserProfile userProfile)
	{
		UserProfile profile=null;
		ModelAndView model=null;
		UserResponse response=null;
		try{
		
			hubReq=new HubRequest(6);
			 hubReq.setMsgType(6);
			
			hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    LoginResponse he=gson.fromJson(result, LoginResponse.class);
			    System.out.println("he.getResults().getLoginStatus() : "+he.getResults().getLoginStatus());
			   
			  response=he.getResults();
			  
			  
			  if(he.getResults().getLoginStatus()!=null)
			    {
			    	  if(he.getResults().getLoginStatus().equalsIgnoreCase("Matched"))
					    {
					    	System.out.println("LOGIN SUCCESS");
					    	
					    	profile=he.getResults().getItemsFound()[0];
							  
						    System.out.println("email address "+profile.getEmailAddress());
						    System.out.println("username :"+profile.getFirstName());
							    System.out.println("address : "+profile.getAddress1());
							 HttpSession session=request.getSession();
							 session.setAttribute("USRID", profile.getUserId());
							 session.setAttribute("USRFNA", profile.getFirstName());
							 
							 String name=profile.getFirstName();
							 if(profile.getLastName()!=null){
								 name=name+" "+profile.getLastName();
							 }
							 session.setAttribute("USRLastName", name);
							 session.setAttribute("USREMAIL", profile.getEmailAddress());	
							 session.setAttribute("USRIMG", profile.getUserImageUrl());
							 System.out.println("session id : "+session.getAttribute("USRID"));		
							// session.setAttribute("USRLocation", userProfile.getLatLang());
							 
							 String userLatLongVal=userProfile.getLatLang();
							 HubRequest hubReq=new HubRequest(13);
							 hubReq.setMsgType(13);				
							 UserProfile userdetails= new UserProfile();
							 userdetails.setUserId(profile.getUserId());
							 hubReq.setRequestParam(userdetails);
							 String struserDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("user details getting ofter update -------------------> "+struserDetails );
							 GsonBuilder builder1 = new GsonBuilder();
							    Gson gson2 = builder1.create();
							 
							  LoginResponse profile2=gson2.fromJson(struserDetails, LoginResponse.class);
							  
						    if(profile2.getResults().getItemsFound()!=null)
						    {

							   
							    	 
							    	 System.out.println("session valude===============");
							    	    session.removeAttribute("USRIMG");
							    	    System.out.println("user image==============="+ session.getAttribute("USRIMG"));
							    		 session.setAttribute("USRIMG", profile2.getResults().getItemsFound()[0].getUserImageUrl());
							    		  System.out.println("user image===============11  "+session.getAttribute("USRIMG"));
							    		 session.removeAttribute("USRFNA");
							    		 session.setAttribute("USRFNA",profile2.getResults().getItemsFound()[0].getFirstName());
							    		 
							    		 //userprofileupdate
							    	 
							    		 String name2=profile2.getResults().getItemsFound()[0].getFirstName();
										 if(profile2.getResults().getItemsFound()[0].getLastName()!=null){
											 name2=name2+" "+profile2.getResults().getItemsFound()[0].getLastName();
										 }
										 session.removeAttribute("USRLastName");
										 session.setAttribute("USRLastName", name2);
							    		 
							    	 //session.setMaxInactiveInterval(arg0)
							     
							    		 if(userLatLongVal==null || userLatLongVal==""){
							    			 userLatLongVal=profile2.getResults().getItemsFound()[0].getLatLang();
							    		 }
							    		 
							    		 
						    }
						   
							 session.setAttribute("USRLocation", userLatLongVal);
							 
							 
							 
							 if(profile.getDateOfBirth()!=null)
							 {
								 model= new ModelAndView("redirect:/");
								 
							 }else{
								// model= new ModelAndView("redirect:/userprofile.htm");
								 model= new ModelAndView("redirect:/");
							 }
							
							 
					    	
					    }else{
					    	
					    	
					    	
					    	System.out.println("not matched");
					    	
					    	model=new ModelAndView("redirect:/login.htm");
					    	//model.addObject("LGIN", "Login");
					    	
					    	 
					    }
			    }else{
			    	model=new ModelAndView("redirect:/login.htm");
			    }
			  
			 
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return response;
	}
	
	
	
	@RequestMapping(value="/boardSearchInUserProfile", method=RequestMethod.GET)

	public @ResponseBody SearchResponse teamBoardSearch(HttpServletRequest request,@RequestParam String key,@RequestParam String category) throws CSException
	{
		System.out.println("request board search");
		SearchResponse response=null;
		HttpSession session=request.getSession();
		 UUID userid=(UUID) session.getAttribute("USRID");
		 if(userid !=null){
			 hubReq=new HubRequest(24);
			 hubReq.setMsgType(24);
			
			 ModelMap model=new ModelMap();
			 model.put("searchQuery", key);
			 model.put("userId", userid);
			 model.put("boardType", category);
			hubReq.setRequestParam(model);
			
			System.out.println("request hubReq"+hubReq);

			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			   HubResponse hubres =gson.fromJson(result, HubResponse.class);
			   if(hubres.getResults()!=null) {
				   response=hubres.getResults().getSearchResponse();
			   }

		 }
		
		
		return response;
	}
	
	
	@RequestMapping(value="/boardSearchInUsereditteam", method=RequestMethod.GET)

	public @ResponseBody Object boardSearchInUsereditteam(HttpServletRequest request, @RequestParam String category, @RequestParam String q) throws CSException
	{
		System.out.println("request board search");
		SearchResponse response=null;
		HttpSession session=request.getSession();
		Object ob=null;
		 UUID userid=(UUID) session.getAttribute("USRID");
		 if(userid !=null){
			 hubReq=new HubRequest(24);
			 hubReq.setMsgType(24);
			
			 ModelMap model=new ModelMap();
			 model.put("searchQuery", q);
			 model.put("userId", userid);
			 model.put("boardType", category);
			hubReq.setRequestParam(model);
			
			System.out.println("request hubReq"+hubReq);

			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			   HubResponse hubres =gson.fromJson(result, HubResponse.class);
			   if(hubres.getResults()!=null) {
				   /*response=hubres.getResults().getSearchResponse();*/
				   ob=hubres.getResults().getSearchResponse().getBoardProfileList();
			   }else
			   {
				   ob=new ArrayList<SearchResponse>();
			   }

		 }
		
		
		return ob;
	}
	
	
	@RequestMapping(value="/profileUpdate", method=RequestMethod.POST)
	public ModelAndView profileUpdate(@ModelAttribute UserProfileUpdate2 userProfile, BindingResult result, ModelMap modelMap,HttpServletRequest request, Date bodDate )throws IOException
	{
		ModelAndView model=null;
		try{
			System.out.println("user first name : "+userProfile.getLastName());
			System.out.println("gendral : "+userProfile.getGender());
			System.out.println("lat lng : "+userProfile.getLatLang());
			   System.out.println("userProfile.getUserimgfile().getContentType()---->"+userProfile.getUserimgfile());
			   System.out.println("request ===========> "+request.getParameter("userimgfile"));
			
			   
			   
			 List<SubRoleLevelOne> subRoleLevelOne= new ArrayList<SubRoleLevelOne>();
			 List<SubRoleLevelTwo> subRoleLevelTwo = new ArrayList<SubRoleLevelTwo>();
			 List<SubRoleLevelThree> subRoleLevelThrees = new ArrayList<SubRoleLevelThree>();
			 List<SubRoleLevelFour> subRoleLevelFours = new ArrayList<SubRoleLevelFour>();
			 
			 GsonBuilder builder= new GsonBuilder();
			    Gson gson = builder.create();
			    String bytstring = gson.toJson(userProfile.getUpload());
			  
			    userProfile.getUserimgfile().getName();
			    if(userProfile.getUserimgfile()!=null)
			    {
			    	ImageDetails imgfile= new ImageDetails();
				    imgfile.setMimeType(userProfile.getUserimgfile().getContentType());
				    imgfile.setImageInbyteArray(userProfile.getUserimgfile().getBytes());
				 //   String imageDataString = Base64.encodeBase64URLSafeString(imageByteArray)
				    //		String imageDataString = new String(userProfile.getUserimgfile().getBytes(), "UTF-8");	
				    //userProfile.setImageData(userProfile.getUserimgfile().getBytes());
				    String imageDataString= new sun.misc.BASE64Encoder().encode(userProfile.getUserimgfile().getBytes());
				    userProfile.setImageData(imageDataString);
			    }
			    
			 
			userProfile.setSubRoleLevelTwo(subRoleLevelTwo);
			String reqString2 = gson.toJson(subRoleLevelTwo);
			userProfile.setUserimgfile(null);
			
			if(userProfile.getSubcat1()!=null)
			{
				
				if(userProfile.getSubcat1().length>0)
				{
					
						/*sub1.setRole_id(userProfile.getSubcat1()[1].toString());
						sub1.setSub_role_level_one(userProfile.getSubcat1()[0].toString());
						subRoleLevelOne.add(sub1);*/
					
						/*System.out.println("subcate output  ------------------> "+userProfile.getSubcat1()[1].toString());
						System.out.println("userProfile.getSubcat1()[0].toString() ----------------------------> "+userProfile.getSubcat1()[0].toString());
						*/
						for(String k : userProfile.getSubcat1())
						{
							SubRoleLevelOne sub1= new SubRoleLevelOne();
							sub1.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
							//sub1.setSub_role_level_one(k);
							sub1.setSub_role_level_one_id(k);
							sub1.setUserId(userProfile.getUserId().toString());
							subRoleLevelOne.add(sub1);
							System.out.println("k--------------------> "+k);
						}
						
						/*for(int i=0;i<roleid.length;i++)
						{
							SubRoleLevelOne sub1= new SubRoleLevelOne();
							sub1.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
							sub1.setSub_role_level_one(subcat1[i]);
							sub1.setUserId(userProfile.getUserId().toString());
							subRoleLevelOne.add(sub1);
							System.out.println("roleid[i]------------->"+roleid[i]);
						}*/
						
				
						System.out.println("userProfile.getSubcat2BatsmanOptions()---------------------------> "+userProfile.getSubcat2BatsmanOptions());
						System.out.println("userProfile.getSubcat2Allrounder()-------------------------------> "+userProfile.getSubcat2Allrounder());
						System.out.println("userProfile.getSubcat2BowlerOptions()--------------------------> "+userProfile.getSubcat2BowlerOptions());
						
						if(userProfile.getSubcat2BatsmanOptions()!=null)
						{
							String[] sub2val=userProfile.getSubcat2BatsmanOptions().split(",");
							SubRoleLevelTwo sub2= new SubRoleLevelTwo();
							sub2.setSub_role_level_one_id(sub2val[1]);
							sub2.setSub_role_level_two_id(sub2val[0]);
							sub2.setUserId(userProfile.getUserId().toString());
							sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
							subRoleLevelTwo.add(sub2);
						}
						if(userProfile.getSubcat2BowlerOptions()!=null)
						{
							String[] sub2val=userProfile.getSubcat2BowlerOptions().split(",");
							SubRoleLevelTwo sub2= new SubRoleLevelTwo();
							sub2.setSub_role_level_one_id(sub2val[1]);
							sub2.setSub_role_level_two_id(sub2val[0]);
							sub2.setUserId(userProfile.getUserId().toString());
							sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
							subRoleLevelTwo.add(sub2);
						}
						
						if(userProfile.getSubcat2Allrounder()!=null)
						{
							String[] sub2val=userProfile.getSubcat2Allrounder().split(",");
							SubRoleLevelTwo sub2= new SubRoleLevelTwo();
							sub2.setSub_role_level_one_id(sub2val[1]);
							sub2.setSub_role_level_two_id(sub2val[0]);
							sub2.setUserId(userProfile.getUserId().toString());
							sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
							subRoleLevelTwo.add(sub2);
						}
						
						
						userProfile.setSubRoleLevelOne(subRoleLevelOne);
						if(userProfile.getSubcat3()!=null)
						{
							if(userProfile.getSubcat3().length>1)
							{
								SubRoleLevelThree sub3= new SubRoleLevelThree();
								sub3.setSubRoleLevelThreeId(userProfile.getSubcat3()[0].toString());
								sub3.setSubRoleLevelTwoId(userProfile.getSubcat3()[1].toString());
								sub3.setUserId(userProfile.getUserId().toString());
								sub3.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
								subRoleLevelThrees.add(sub3);
								if(userProfile.getSubcat4()!=null)
								{
									if(userProfile.getSubcat4().length>1)
									{
										SubRoleLevelFour sub4= new SubRoleLevelFour();
										sub4.setSubRoleLevelFourId(userProfile.getSubcat4()[0].toString());
										sub4.setSubRoleLevelThreeId(userProfile.getSubcat4()[1].toString());
										sub4.setSubRoleLevelOneId("18d09d29-aaef-46d6-8785-b587e9ed5c22");
										sub4.setUserId(userProfile.getUserId().toString());
										sub4.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
										subRoleLevelFours.add(sub4);
									}
										
								}
							}
							
							
						}
						if(userProfile.getSubcat2()!=null)
						{
							
							
							
							
							if(userProfile.getSubcat2().length>1)
							{
								String[] asubcat1=userProfile.getSubcat2()[0].toString().split(",");
								String[] subcat2=userProfile.getSubcat2()[1].toString().split(",");
								for(int i=0;i < subcat2.length;i++)
								{
									SubRoleLevelTwo sub2= new SubRoleLevelTwo();
									sub2.setSub_role_level_one_id(subcat2[i]);
									sub2.setSub_role_level_two_id(asubcat1[i]);
									sub2.setUserId(userProfile.getUserId().toString());
									subRoleLevelTwo.add(sub2);
								}
								
								
								
								
								/*if(userProfile.getSubcat3()!=null)
								{
									SubRoleLevelThree sub3= new SubRoleLevelThree();
									
									if(userProfile.getSubcat3().length>1)
									{
										sub3.setSubRoleLevelThreeId(userProfile.getSubcat3()[0].toString());
										sub3.setSubRoleLevelTwoId(userProfile.getSubcat3()[1].toString());
										subRoleLevelThrees.add(sub3);
										
										
										if(userProfile.getSubcat4()!=null)
										{
											
											if(userProfile.getSubcat4().length>1)
											{
												SubRoleLevelFour sub4= new SubRoleLevelFour();
												sub4.setSubRoleLevelFourId(userProfile.getSubcat4()[0].toString());
												sub4.setSubRoleLevelThreeId(userProfile.getSubcat4()[1].toString());
												subRoleLevelFours.add(sub4);
											}
											
											for(String sub : userProfile.getSubcat4())
											{
												System.out.println("subcat4 ------------>"+sub);
											}
													
										}
									}
									for(String sub : userProfile.getSubcat3()){
										System.out.println("subcat3 ------------>"+sub);
										
									}
									
									
								}
								*/
								
							}
							
						}
				}
				
				
				
				
				
				
				
			}
			
			
			
			/// dassssssssssssss
			
			System.out.println("userProfile.getModifiedDate()------------> "+bodDate);
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	        
	        String strdate= dateFormat.format(bodDate);
	        System.out.println("converted Date -----> "+strdate);
			userProfile.setDateOfBirth(strdate);
			
			//  default setting ....................
			
			userProfile.setSubroleLevelThree(subRoleLevelThrees);
			 userProfile.setSubroleLevelFour(subRoleLevelFours);
			
			if(userProfile.getPhoneNumber().length()<=0)
			{
				userProfile.setPhoneNumber("0");
			}
			if(userProfile.getLandLineNumber().length()<=0)
			{
				userProfile.setLandLineNumber("0");
			}
			if(userProfile.getZipcode().length()<=0)
			{
				userProfile.setZipcode("0");
			}
			
			
			 userProfile.setSubroleLevelThree(subRoleLevelThrees);
			 userProfile.setSubroleLevelFour(subRoleLevelFours);
			
			userProfile.setSubRoleLevelOne(subRoleLevelOne);
			//String reqString3 = gson.toJson(subRoleLevelOne);
			
			hubReq=new HubRequest(16);
			 hubReq.setMsgType(16);
			 byte[] img=userProfile.getUpload();			 
			
			String imgStr=null;
			 if(img!=null)
			 {
				 imgStr= img.toString();
			 }
			
			 userProfile.setSubRoleLevelOne(subRoleLevelOne);
			 userProfile.setSubRoleLevelTwo(subRoleLevelTwo);
			 
			 hubReq.setRequestParam(userProfile);
			
			 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result2);
				model=new ModelAndView("redirect:/");
			 	/*GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create()*/;
			    LoginResponse he=gson.fromJson(result2, LoginResponse.class);
			
			    
			    HubRequest hubReq=new HubRequest(13);
				 hubReq.setMsgType(13);				
				 UserProfile userdetails= new UserProfile();
				 userdetails.setUserId(userProfile.getUserId());
				 hubReq.setRequestParam(userdetails);
				 String struserDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("user details getting ofter update -------------------> "+struserDetails );
				 GsonBuilder builder1 = new GsonBuilder();
				    Gson gson2 = builder1.create();
				 
				  LoginResponse profile=gson2.fromJson(struserDetails, LoginResponse.class);
				  
			    if(profile.getResults().getItemsFound()!=null)
			    {

				    HttpSession session= request.getSession(true);
				     if(session!=null)
				     {
				    	 
				    	 System.out.println("session valude===============");
				    	    session.removeAttribute("USRIMG");
				    	    System.out.println("user image==============="+ session.getAttribute("USRIMG"));
				    		 session.setAttribute("USRIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
				    		  System.out.println("user image===============11  "+session.getAttribute("USRIMG"));
				    		 session.removeAttribute("USRFNA");
				    		 session.setAttribute("USRFNA",profile.getResults().getItemsFound()[0].getFirstName());
				    		 
				    		 //userprofileupdate
				    	 
				    	 //session.setMaxInactiveInterval(arg0)
				     }
			    }
			   
		
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
		//return null;
	}
	
	@RequestMapping(value="/profileUpdate2", method=RequestMethod.POST)
	public ModelAndView profileUpdate2(@ModelAttribute UserProfileUpdate2 userProfile, BindingResult result, ModelMap modelMap,HttpServletRequest request )throws IOException
	{
		ModelAndView model=null;
		try{
			System.out.println("user first name : "+userProfile.getLastName());
			System.out.println("gendral : "+userProfile.getGender());
			System.out.println("lat lng : "+userProfile.getLatLang());
			   System.out.println("userProfile.getUserimgfile().getContentType()---->"+userProfile.getUserimgfile());
			   System.out.println("request ===========> "+request.getParameter("userimgfile"));
			
			 List<SubRoleLevelOne> subRoleLevelOne= new ArrayList<SubRoleLevelOne>();
			 List<SubRoleLevelTwo> subRoleLevelTwo = new ArrayList<SubRoleLevelTwo>();
			 List<SubRoleLevelThree> subRoleLevelThrees = new ArrayList<SubRoleLevelThree>();
			 List<SubRoleLevelFour> subRoleLevelFours = new ArrayList<SubRoleLevelFour>();
			 
			 GsonBuilder builder= new GsonBuilder();
			    Gson gson = builder.create();
			    String bytstring = gson.toJson(userProfile.getUpload());
			  
			    userProfile.getUserimgfile().getName();
			    if(userProfile.getUserimgfile()!=null)
			    {
			    	ImageDetails imgfile= new ImageDetails();
				    imgfile.setMimeType(userProfile.getUserimgfile().getContentType());
				    imgfile.setImageInbyteArray(userProfile.getUserimgfile().getBytes());
				 //   String imageDataString = Base64.encodeBase64URLSafeString(imageByteArray)
				    //		String imageDataString = new String(userProfile.getUserimgfile().getBytes(), "UTF-8");	
				    //userProfile.setImageData(userProfile.getUserimgfile().getBytes());
				    String imageDataString= new sun.misc.BASE64Encoder().encode(userProfile.getUserimgfile().getBytes());
				    userProfile.setImageData(imageDataString);
			    }
			userProfile.setSubRoleLevelTwo(subRoleLevelTwo);
			String reqString2 = gson.toJson(subRoleLevelTwo);
			userProfile.setUserimgfile(null);
			System.out.println("cheeck :------------ >  "+userProfile.getRoleinfo());
			
			System.out.println("===========================================subn");
			if(userProfile.getSubcat1()!=null)
			{
				if(userProfile.getSubcat1().length>1)
				{
					
						/*sub1.setRole_id(userProfile.getSubcat1()[1].toString());
						sub1.setSub_role_level_one(userProfile.getSubcat1()[0].toString());
						subRoleLevelOne.add(sub1);*/
						System.out.println("subcate output  ------------------> "+userProfile.getSubcat1()[1].toString());
						System.out.println("userProfile.getSubcat1()[0].toString() ----------------------------> "+userProfile.getSubcat1()[0].toString());
						
						String[] roleid= userProfile.getSubcat1()[1].toString().split(",");
						String[] subcat1=userProfile.getSubcat1()[0].toString().split(",");
						for(int i=0;i<roleid.length;i++)
						{
							SubRoleLevelOne sub1= new SubRoleLevelOne();
							sub1.setRole_id(roleid[i]);
						//	sub1.setSub_role_level_one(subcat1[i]);
							sub1.setSub_role_level_one_id(subcat1[i]);
							System.out.println("sub1.getSub_role_level_one_id()------------------------> "+sub1.getSub_role_level_one_id());
							sub1.setUserId(userProfile.getUserId().toString());
							subRoleLevelOne.add(sub1);
						}
						userProfile.setSubRoleLevelOne(subRoleLevelOne);
						//subcat2BatsmanOptions
						
						
						if(userProfile.getSubcat2BatsmanOptions()!=null)
						{
							String[] bower=userProfile.getSubcat2BatsmanOptions().split(",");
							SubRoleLevelTwo sub2= new SubRoleLevelTwo();
							sub2.setSub_role_level_one_id(bower[1]);
							sub2.setSub_role_level_two_id(bower[0]);
							sub2.setUserId(userProfile.getUserId().toString());
							//sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
							sub2.setRole_id(bower[2]);
							subRoleLevelTwo.add(sub2);
							
							if(userProfile.getSubcat3()!=null)
							{
								if(userProfile.getSubcat3().length>1)
								{
									SubRoleLevelThree sub3= new SubRoleLevelThree();
									sub3.setSubRoleLevelThreeId(userProfile.getSubcat3()[0].toString());
									sub3.setSubRoleLevelTwoId(userProfile.getSubcat3()[1].toString());
									sub3.setUserId(userProfile.getUserId().toString());
									sub3.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
									subRoleLevelThrees.add(sub3);
									if(userProfile.getSubcat4()!=null)
									{
										if(userProfile.getSubcat4().length>1)
										{
											SubRoleLevelFour sub4= new SubRoleLevelFour();
											sub4.setSubRoleLevelFourId(userProfile.getSubcat4()[0].toString());
											sub4.setSubRoleLevelThreeId(userProfile.getSubcat4()[1].toString());
											sub4.setSubRoleLevelOneId("18d09d29-aaef-46d6-8785-b587e9ed5c22");
											sub4.setUserId(userProfile.getUserId().toString());
											sub4.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
											subRoleLevelFours.add(sub4);
										}
											
									}
								}
								
								
							}
							
						}
						
						if(userProfile.getSubcat2Allrounder()!=null)
						{
							String[] allrounder=userProfile.getSubcat2Allrounder().split(",");
							
							SubRoleLevelTwo sub2= new SubRoleLevelTwo();
							sub2.setSub_role_level_one_id(allrounder[1]);
							sub2.setSub_role_level_two_id(allrounder[0]);
							sub2.setUserId(userProfile.getUserId().toString());
							sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");							
							subRoleLevelTwo.add(sub2);
							
						}
						if(userProfile.getSubcat2BatsmanOptions()!=null)
						{
							String[] batsman=userProfile.getSubcat2BatsmanOptions().split(",");
							SubRoleLevelTwo sub2= new SubRoleLevelTwo();
							sub2.setSub_role_level_one_id(batsman[1]);
							sub2.setSub_role_level_two_id(batsman[0]);
							sub2.setUserId(userProfile.getUserId().toString());
							sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");							
							subRoleLevelTwo.add(sub2);
						}
						/*if(userProfile.getSubcat2()!=null)
						{
							if(userProfile.getSubcat2().length>1)
							{
								String[] asubcat1=userProfile.getSubcat2()[0].toString().split(",");
								String[] subcat2=userProfile.getSubcat2()[1].toString().split(",");
								for(int i=0;i < subcat2.length;i++)
								{
									SubRoleLevelTwo sub2= new SubRoleLevelTwo();
									sub2.setSub_role_level_one_id(subcat2[i]);
									sub2.setSub_role_level_two_id(asubcat1[i]);
									sub2.setUserId(userProfile.getUserId().toString());
									sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
									subRoleLevelTwo.add(sub2);
								}
								if(userProfile.getSubcat3()!=null)
								{
									if(userProfile.getSubcat3().length>1)
									{
										SubRoleLevelThree sub3= new SubRoleLevelThree();
										sub3.setSubRoleLevelThreeId(userProfile.getSubcat3()[0].toString());
										sub3.setSubRoleLevelTwoId(userProfile.getSubcat3()[1].toString());
										sub3.setUserId(userProfile.getUserId().toString());
										sub3.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
										subRoleLevelThrees.add(sub3);
										if(userProfile.getSubcat4()!=null)
										{
											if(userProfile.getSubcat4().length>1)
											{
												SubRoleLevelFour sub4= new SubRoleLevelFour();
												sub4.setSubRoleLevelFourId(userProfile.getSubcat4()[0].toString());
												sub4.setSubRoleLevelThreeId(userProfile.getSubcat4()[1].toString());
												sub4.setSubRoleLevelOneId("18d09d29-aaef-46d6-8785-b587e9ed5c22");
												sub4.setUserId(userProfile.getUserId().toString());
												sub4.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
												subRoleLevelFours.add(sub4);
											}
												
										}
									}
									
									
								}
								
								
							}
							
						}*/
						
				}
				
				
				
				
				
				
				
			}
			
			
			 userProfile.setSubRoleLevelTwo(subRoleLevelTwo);
			 userProfile.setSubroleLevelThree(subRoleLevelThrees);
			 userProfile.setSubroleLevelFour(subRoleLevelFours);
			//  default setting ....................
				System.out.println("subRoleLevelFours--------------------> "+subRoleLevelFours.size());
			
			
			if(userProfile.getPhoneNumber().length()<=0)
			{
				userProfile.setPhoneNumber("0");
			}
			if(userProfile.getLandLineNumber().length()<=0)
			{
				userProfile.setLandLineNumber("0");
			}
			if(userProfile.getZipcode().length()<=0)
			{
				userProfile.setZipcode("0");
			}
			
			
			
			
			userProfile.setSubRoleLevelOne(subRoleLevelOne);
			String reqString3 = gson.toJson(subRoleLevelOne);
		//	userProfile.setSubRoleLevelOne(subRoleLevelOne);

			 
			 System.out.println("gson.toJson(subRoleLevelOne);-----------------------> ");
			 System.out.println("subRoleLevelTwo--------------> "+GsonConverters.getGsonObject().toJson(subRoleLevelOne));
			 System.out.println("subRoleLevelTwo--------------> "+GsonConverters.getGsonObject().toJson(subRoleLevelTwo));
			 System.out.println("subRoleLevelTwo--------------> "+GsonConverters.getGsonObject().toJson(subRoleLevelThrees));
			 System.out.println("subRoleLevelTwo--------------> "+GsonConverters.getGsonObject().toJson(subRoleLevelFours)); 
		
			hubReq=new HubRequest(16);
			 hubReq.setMsgType(16);
			 byte[] img=userProfile.getUpload();			 
			
			String imgStr=null;
			 if(img!=null)
			 {
				 imgStr= img.toString();
			 }
			
			 hubReq.setRequestParam(userProfile);
			
			 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result2);
				System.out.println("subRoleLevelFours----------- 9  ---------> "+subRoleLevelFours.size());
				model=new ModelAndView("redirect:/");
			 	/*GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create()*/;
			    LoginResponse he=gson.fromJson(result2, LoginResponse.class);
			
			    
			     HubRequest hubReq=new HubRequest(13);
				 hubReq.setMsgType(13);				
				 UserProfile userdetails= new UserProfile();
				 userdetails.setUserId(userProfile.getUserId());
				 hubReq.setRequestParam(userdetails);
				 String struserDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("user details getting ofter update -------------------> "+struserDetails );
				 GsonBuilder builder1 = new GsonBuilder();
				    Gson gson2 = builder1.create();
				 
				  LoginResponse profile=gson2.fromJson(struserDetails, LoginResponse.class);
				  
			    if(profile.getResults().getItemsFound()!=null)
			    {

				    HttpSession session= request.getSession(true);
				     if(session!=null)
				     {
				    	 
				    	 System.out.println("session valude===============");
				    	    session.removeAttribute("USRIMG");
				    	    System.out.println("user image==============="+ session.getAttribute("USRIMG"));
				    		 session.setAttribute("USRIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
				    		  System.out.println("user image===============11  "+session.getAttribute("USRIMG"));
				    		 session.removeAttribute("USRFNA");
				    		 session.setAttribute("USRFNA",profile.getResults().getItemsFound()[0].getFirstName());
				    		 
				    		 //userprofileupdate
				    	 
				    	 //session.setMaxInactiveInterval(arg0)
				     }
			    }
			   
		
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return model;
	//	return null;
	}
	@RequestMapping(value="/postFeed", method=RequestMethod.POST)
	public @ResponseBody List<Feeds> postFeed( HttpServletRequest request,@RequestBody Feeds feeds)
		
		{
			ModelAndView model= null;
			List<Feeds> feedresponse=null;
				try{
					 HttpSession session = request.getSession(true);
					 System.out.println("session.getAttribute()"+session.getAttribute("USRID"));
					 System.out.println("USER ID : "+feeds.getPostedBy());
					 System.out.println("feed to ---> "+feeds.getFeedTo());
					 if(session.getAttribute("USRID")!=null)
					 {

						 if(feeds.getFileAttachement() != null){
							 feeds.setHasAttachement("true"); 
						 }
						// System.out.println("image type--> "+feeds.getVideoFile().getAttachmentType());
						// System.out.println("feeds.getVideoFile().getImageOrVideoByteDatastr()---> "+feeds.getVideoFile().getImageOrVideoByteDatastr());
						hubReq=new HubRequest(4);
						 hubReq.setMsgType(4);
						// String name=(String) session.getAttribute("USRFNA");
						 String name=(String) session.getAttribute("USRLastName");
						 
						 UUID userId=(UUID) session.getAttribute("USRID");
						 feeds.setPostedByName(name);
						 feeds.setPostedBy(userId+"");
						 hubReq.setRequestParam(feeds);
						 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 GsonBuilder builder = new GsonBuilder();
						    Gson gson = builder.create();
						    UserFeedResponse response=gson.fromJson(result, UserFeedResponse.class);
						    //System.out.println("he.getResults().getLoginStatus() : "+he.getResults().getLoginStatus());
						  if(response.getRequestStatus().equals("0"))
						  {
							  feedresponse=response.getResults().getItemsFound();
						  }else{
							  feedresponse = new ArrayList<Feeds>();
						  }
						    
						
					}else{
						model= new ModelAndView("redirect:/");
					}
					
				}catch(Exception e)
				{
					e.printStackTrace();
				}
				
				return feedresponse;
	}
	@RequestMapping(value="/buddySearch", method=RequestMethod.POST)
	public @ResponseBody SearchResponse buddySearch( HttpServletRequest request,@RequestBody String name)
	{
		SearchResponse response=null;
		System.out.println("key value : "+name);
		try{
			HttpSession session = request.getSession(true);
			 hubReq=new HubRequest();
			 hubReq.setMsgType(21);
			 UserProfile user= new UserProfile();
			 UUID id=(UUID) session.getAttribute("USRID");
			 user.setUserId(id);
			 user.setSearchType("Buddy");
			 user.setSearchQuery(name);
			 user.setStartNode("0");
			 user.setEndNode("50");
			 hubReq.setRequestParam(user);
					
				System.out.println("request : --------------------- >userRegistration "+GsonConverters.getGsonObject().toJson(hubReq));
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			    GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			   HubResponse hubres =gson.fromJson(result, HubResponse.class);
			   if(hubres.getResults()!=null) {
				   response=hubres.getResults().getSearchResponse();
			   }
			   
			   
			  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		   
		return response;
	}
	
	@RequestMapping(value="/boardSearch", method=RequestMethod.POST)
//	public @ResponseBody List<UserProfile> buddySearch( HttpServletRequest request,@RequestBody String name)
	public @ResponseBody SearchResponse boardSearch( HttpServletRequest request,@RequestBody String name)
	{
		SearchResponse response=null;
		System.out.println("key value : "+name);
		try{
			HttpSession session = request.getSession(true);
			 hubReq=new HubRequest();
			// hubReq.setMsgType(15);
			 hubReq.setMsgType(21);
			 UserProfile user= new UserProfile();
			 UUID id=(UUID) session.getAttribute("USRID");
			// user.setFirstName(name);
			 user.setUserId(id);
			 user.setSearchType("Board");
			
			 user.setSearchQuery(name);
			 user.setStartNode("0");
			 user.setEndNode("30");
			 hubReq.setRequestParam(user);
			 System.out.println("request : --------------------- >userRegistration "+GsonConverters.getGsonObject().toJson(hubReq));
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			    GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			   HubResponse hubres =gson.fromJson(result, HubResponse.class);
			   if(hubres.getResults()!=null) {
				   response=hubres.getResults().getSearchResponse();
			   }
			   
			   
			  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		   
		return response;
	}
	
	@RequestMapping(value="/buddyRequest", method=RequestMethod.POST)
	public @ResponseBody String buddyRequest( HttpServletRequest request,@RequestBody UserConnection user)
	{
		HttpSession session=request.getSession();
		UUID userId=(UUID) session.getAttribute("USRID");
		System.out.println("invitee : "+user.getInviteeId());
		System.out.println("invitor : "+userId.toString());
		user.setInvitorId(userId.toString());
		 String result=null;
		 try{
			 hubReq=new HubRequest();
			 hubReq.setMsgType(5);
			 
			 hubReq.setRequestParam(user);
			  result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			
			 /*  if(hubres.getResults()!=null)
			   {
				   response=hubres.getResults().getGettingUserSearchListDetails();
			   }*/
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		   
		return result;
	}
	@RequestMapping(value="/account-recovery", method=RequestMethod.GET)
	public ModelAndView howCanIHelpYouPage(HttpServletRequest request){
		ModelAndView model=new ModelAndView("howCanWeHelpYou");
		 HttpSession session = request.getSession(true);
		 System.out.println("session.getAttribute()"+session.getAttribute("USRID"));
		 UUID userid=(UUID) session.getAttribute("USRID");
		 model.addObject("UserId",userid);
		 
		return model;
	}
	
	@RequestMapping(value="/accountRecoverAction", method=RequestMethod.GET)
	public ModelAndView accountRecoveryAction(HttpServletRequest request) throws CSException{
		HttpSession session = request.getSession(true);
		String keyToFindAccount=request.getParameter("accountRecoveryBoxName");
		
		String radioBoxValue=request.getParameter("rr");
		ModelAndView model=null;
System.out.println("radioBoxValue : ---> "+radioBoxValue);
System.out.println("keyToFindAccount-----> "+keyToFindAccount);
		if(radioBoxValue != null ){
			if(radioBoxValue.equals("withaccount")){
				//hubReq=new HubRequest(21);
				// hubReq.setMsgType(21);
				/* user.setSearchQuery(name);
				 user.setStartNode("0");
				 user.setEndNode("30");*/
				hubReq=new HubRequest(240);//Ramya changed for forgot password search with email and phonenumber
				
				ModelMap map=new ModelMap();
				map.put("searchQuery", keyToFindAccount);
				map.put("startNode", 0);
				map.put("endNode", 30);
				hubReq.setRequestParam(map);
				String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    //ForgotPasswordResponse forgotPasswordResponse=gson.fromJson(response, ForgotPasswordResponse.class);
			    
			    HubResponse hubres =gson.fromJson(result, HubResponse.class);
			    List<UserProfile> userList=null;
				   if(hubres.getResults()!=null) {
					   SearchResponse searchResponse=hubres.getResults().getSearchResponse();
					    userList =searchResponse.getUserList();
				   }
				   model=new ModelAndView("identifyYourAccount");
					model.addObject("Users", userList);

				   if(userList.size() <=0){
					   userList=null;
					   
					 
					  // System.out.println("sslslslsl");
					   model.addObject("ErrorMSG", "We are not able to find any account that matched your Name or Phone No or E-mail ID");
				   }
				    System.out.println("searchResponse.getUserList();"+userList);

				   
			  /*  SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
			    
			    SearchResults searchResults=response1.getResults();
			    SearchResponse searchResponse=searchResults.getSearchResponse();*/
			  
				
			}else if(radioBoxValue.equals("withoutaccount")){
				model=new ModelAndView("resetPassword");
				model.addObject("email", "");
				String msg=request.getParameter("msg");
				model.addObject("MSG", msg);

			}
		}
		
		
		return model;
	}
	@RequestMapping(value="/resetPassWord", method=RequestMethod.POST)
	public ModelAndView resetForm(HttpServletRequest request){
		ModelAndView model=new ModelAndView();
		try{
			HttpSession session = request.getSession(true);
			String resetFlag=request.getParameter("rr");
			hubReq=new HubRequest(18);
			hubReq.setMsgType(18);
			ForgotPasswordBean forgotPassword=new ForgotPasswordBean();
			if(resetFlag!= null && resetFlag.equals("email")){
				
				
				String email=request.getParameter("email");
				forgotPassword.setEmailAddress(email);
				forgotPassword.setFlag(resetFlag);
				hubReq.setRequestParam(forgotPassword);
				String response=cricketSocialRestTemplateService.userRegistration(hubReq);
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    //ForgotPasswordResponse forgotPasswordResponse=gson.fromJson(response, ForgotPasswordResponse.class);
			    
			    ForgotPasswordResponse cricResponse=gson.fromJson(response, ForgotPasswordResponse.class);
			    
			    ForgotPasswordResults forgotPasswordResult=(ForgotPasswordResults) cricResponse.getResults();
			    
			    if(forgotPasswordResult.getUserProfile()!=null && forgotPasswordResult.getUserProfile().size()>0 ){
			    	 System.out.println("user Id"+forgotPasswordResult.getUserProfile().get(0).getUserId()); 
			    	model.addObject("UserId",forgotPasswordResult.getUserProfile().get(0).getUserId());
					    model.addObject("Email",email);
					    
					    model.addObject("ResetType",forgotPasswordResult.getForgotPasswordResult().getForgotPasswordResultType());
					    session.setAttribute("UserIdToResetPassword", forgotPasswordResult.getUserProfile().get(0).getUserId());
					    session.setAttribute("ResetType", forgotPasswordResult.getForgotPasswordResult().getForgotPasswordResultType());
					    
					    model.setViewName("secureWithCode");
			    }else {
					model= new ModelAndView("redirect:/accountRecoverAction?accountRecoveryBoxName=&rr=withoutaccount&msg= Invalid E-mail / Unregistered E-mail");
				}
			    
			   
			   
				
			}else{
				
			}
		}catch(CSException e )
		{
			e.printStackTrace();
		}
		return model;
	}
	@RequestMapping(value="/sendMeCodeAgain", method=RequestMethod.GET)
	public ModelAndView sendCodeAgain(HttpServletRequest request,@RequestParam String email,@RequestParam String flag){
		ModelAndView model=new ModelAndView("secureWithCode");
		System.out.println(" email"+email);
		
		try{
			HttpSession session = request.getSession(true);
			hubReq=new HubRequest(18);
			 hubReq.setMsgType(18);
			
			ForgotPasswordBean forgotPassword=new ForgotPasswordBean();
			if(flag!= null && flag.equals("mail")){
				//String email=request.getParameter("email");
				forgotPassword.setEmailAddress(email);
				forgotPassword.setFlag(flag);
				hubReq.setRequestParam(forgotPassword);
				String response=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    ForgotPasswordResponse cricResponse=gson.fromJson(response, ForgotPasswordResponse.class);
			    ForgotPasswordResults forgotPasswordResult=(ForgotPasswordResults) cricResponse.getResults();
			    model.addObject("Email",email);

			    model.addObject("UserId",forgotPasswordResult.getUserProfile().get(0).getUserId());
			    model.addObject("ResetType",forgotPasswordResult.getForgotPasswordResult().getForgotPasswordResultType());
			    session.setAttribute("UserIdToResetPassword", forgotPasswordResult.getUserProfile().get(0).getUserId());
			    session.setAttribute("ResetType", forgotPasswordResult.getForgotPasswordResult().getForgotPasswordResultType());
			}else{
				
			}
		}catch(CSException e)
		{
			e.printStackTrace();
		}
		return model;
	}
	@RequestMapping(value="/codeVerfication", method=RequestMethod.POST)
	public ModelAndView codeVerification(HttpServletRequest request){
		
		ModelAndView model=new ModelAndView();
		
		try {

			HttpSession session = request.getSession(true);
			
			hubReq=new HubRequest(20);
			 hubReq.setMsgType(20);
			 String userId=request.getParameter("userId");
			 System.out.println("userId"+userId);
			 String codeToAuthorise=request.getParameter("secureCode");
			 System.out.println("codeToAuthorise"+codeToAuthorise);
			 UserCodeVerification userCode=new UserCodeVerification();
			 userCode.setCodeNumber(codeToAuthorise);
			 userCode.setUserId(userId);
			 hubReq.setRequestParam(userCode);
			 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    CodeVerificationResponse cricResponse=gson.fromJson(response, CodeVerificationResponse.class);
			    CodeVerification codeVerification=(CodeVerification) cricResponse.getResults();
			    if(codeVerification.isCodeVerificationStatus()){
			    	model.addObject("UserId",userCode.getUserId());		    	
			    	model.setViewName("changePassword");
			    }else{
			    	
			    	UUID userId1= (UUID) session.getAttribute("UserIdToResetPassword");
			    	String resetType=(String) session.getAttribute("ResetType");
			    	System.out.println("userId1"+userId1);
			    	System.out.println("resetType "+resetType);
			    	
			    	model.addObject("UserId",userId1);
					model.addObject("ResetType",resetType);
					model.setViewName("secureWithCode");
					request.setAttribute("codeVerificationFlag", true);
					 
					hubReq=new HubRequest(13);
					 hubReq.setMsgType(13);
					
					 UserProfile userProfile= new UserProfile();
					 userProfile.setUserId(userId1);
					 hubReq.setRequestParam(userProfile);
					 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
					 
					  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
					  
					 if(profile!= null &&  profile.getResults()!=null && profile.getResults().getItemsFound()!=null)
					 {
						 
						 model.addObject("Email",profile.getResults().getItemsFound()[0].getEmailAddress());
						
					 }
					
			    }
		} catch (CSException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		 
		return model;
		
	}
	
	
	@RequestMapping(value="/changePassword", method=RequestMethod.POST)
	public ModelAndView changePassword(HttpServletRequest request){
		ModelAndView model=null;
		try {
			HttpSession session = request.getSession(true);
			 model=new ModelAndView("redirect:/login.htm");
			hubReq=new HubRequest(19);
			 hubReq.setMsgType(19);
			 String userId=request.getParameter("userId");
			 System.out.println("userId"+userId);
			 String newPassword=request.getParameter("newPassword");
			 System.out.println("newPassword"+newPassword);
			 UserProfile userProfile=new UserProfile();
			 userProfile.setUserId(UUID.fromString(userId));
			 userProfile.setPassword(newPassword);
			 userProfile.setLoginTypeId("bc7d0685-a030-485b-832a-2b18dd193e0d");
			 hubReq.setRequestParam(userProfile);
			 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
				GsonBuilder builder = new GsonBuilder();
			    Gson gson = builder.create();
			    
			    UserActivationResponse cricResponse=gson.fromJson(response, UserActivationResponse.class);
			    UserResults userResults=  cricResponse.getResults();
			    List<UserProfile> user=userResults.getUserList();
			    
			    
		} catch (CSException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		 
		return model;
		
	}
	
	@RequestMapping(value="/resetPasswordWithAccount", method=RequestMethod.POST)
	public ModelAndView resetPasswordWithAccount(HttpServletRequest request){
		
		String email=request.getParameter("email");
		String userId=request.getParameter("userId");
		ModelAndView model=new ModelAndView("resetPassword");
		model.addObject("email", email);
		model.addObject("UserId", userId);
		
		return model;
		
	}
	

	
	@RequestMapping(value="/LeaguesAroundYou", method=RequestMethod.GET)
	public ModelAndView leaguesAroundYou(HttpServletRequest request) throws CSException{
		
		ModelAndView model=new ModelAndView("LeaguesAroundYou");
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		HttpSession session = request.getSession(true);
		 // searchReq.setLatlang("13.082680199999999,80.2707184");
		 String userlocation=(String) session.getAttribute("USRLocation");
		 
		 System.out.println("userlocation session.getAttribute()------------->"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("40");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
		 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
		
		 if(strsearchResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
			UUID userId=(UUID) session.getAttribute("USRID");

		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		 
		return model;
		
	}
	
	
	@RequestMapping(value="/matchesAroundYou", method=RequestMethod.GET)
	public ModelAndView matchesAroundYou(HttpServletRequest request) throws CSException{
		
		ModelAndView model=new ModelAndView("matchesAroundYou1");
		hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 HttpSession session=request.getSession();
		 String userlocation=(String) session.getAttribute("USRLocation");
		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length() > 3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 //searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			// searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("40");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	     String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 UUID userId=(UUID) session.getAttribute("USRID");

		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		 
		return model;
		
	}
	
	
	@RequestMapping(value="/BuddyAroundYou", method=RequestMethod.GET)
	public ModelAndView buddyAroundYou(HttpServletRequest request) throws CSException{
		
		ModelAndView model=new ModelAndView("BuddyAroundYou");
		HttpSession session= request.getSession(true);
		 hubReq=new HubRequest();
		 hubReq.setMsgType(23);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		
		 String userlocation=(String) session.getAttribute("USRLocation");
		 System.out.println("userlocation session.getAttribute()------------->"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		 
		// searchReq.setLatlang("17.3700,78.4800");
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("40");
		 searchReq.setCategory("Team");
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("buddyResponse : "+buddyResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 UUID userId=(UUID) session.getAttribute("USRID");

		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		return model;
		
	}
	@RequestMapping(value="/TeamAroundYou", method=RequestMethod.GET)
	public ModelAndView teamAroundYou(HttpServletRequest request) throws CSException{
		
		ModelAndView model=new ModelAndView("TeamAroundYou");
		
		
		HttpSession session= request.getSession(true);
		if(session!=null)
		{

			
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");
			 System.out.println("userlocation session.getAttribute()------------->"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 
			// searchReq.setLatlang("17.3700,78.4800");
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("40");
			 searchReq.setCategory("Team");
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 UUID userId=(UUID) session.getAttribute("USRID");

			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		}
		return model;
		
	}
	
	@RequestMapping(value="/merchantsAroundYou", method=RequestMethod.GET)
	public ModelAndView merchantsAroundYou(HttpServletRequest request) throws CSException{
		
		ModelAndView model=new ModelAndView("merchantsAroundYou");
		hubReq=new HubRequest();
		 hubReq.setMsgType(79);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 HttpSession session=request.getSession();
		 String userlocation=(String) session.getAttribute("USRLocation");
		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length() > 3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("40");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String merchantsArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMerchantsArrounfYouResponse= GsonConverters.getGsonObject().fromJson(merchantsArroundYouList, HubResponse.class); 
		
		 if(strMerchantsArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MerchantsArroundYou", strMerchantsArrounfYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 UUID userId=(UUID) session.getAttribute("USRID");

		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 System.out.println("--------------------------------------------------- hub  "+hubResponse.getResults().getBoardsList().size());
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		 
		return model;
		
	}
	
	
	@RequestMapping(value="/signup", method=RequestMethod.POST)
    public ModelAndView addbuddy(HttpServletRequest request,@ModelAttribute UserProfile userProfile) throws CSException
    {
      
        ModelAndView model=new ModelAndView();
        if (Util.rpHash(request.getParameter("defaultReal")).equals(request.getParameter("defaultRealHash"))) {
            hubReq=new HubRequest(3);
             hubReq.setMsgType(3);
             userProfile.setLoginTypeId("bc7d0685-a030-485b-832a-2b18dd193e0d");
             userProfile.setLoginType("CricketSocial");
             
             Date dob = userProfile.getDateOfBirth();
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
             
             String strdate= dateFormat.format(dob);
             System.out.println("converted Date -----> "+strdate);
     		 userProfile.setStrdateOfBirth(strdate);
     		
             
             //hubReq.setProperty("targetItem",  "{\"emailAddress\":\""+userProfile.getEmailAddress()+"\",\"firstName\":\""+userProfile.getFirstName()+"\",\"password\":\""+userProfile.getPassword()+"\",\"loginType\":\""+userProfile.getLoginType()+"\"}");
             hubReq.setRequestParam(userProfile);
             
             System.out.println("dateofbirth :"+userProfile.getDateOfBirth());
             
             String result=cricketSocialRestTemplateService.userRegistration(hubReq);
             System.out.println("controller result -------------------> "+result );
             
             JSONObject json;
                GsonBuilder builder = new GsonBuilder();
                Gson gson = builder.create();
                LoginResponse he=gson.fromJson(result, LoginResponse.class);
                
                if(he!=null && he.getResults().getSignupWarningMessage() != null){
                
                if(he.getResults().getSignupWarningMessage().equalsIgnoreCase("valid user")){
                	try{
                        model.setViewName("loginsuccess");
                        System.out.println("smg........... ");
                        if(he.getResults().getUserExist()!=null){
                            if(he.getResults().getUserExist().equalsIgnoreCase("NO")){
                                model.addObject("SUCCMSG", "REG");
                                model.addObject("Signup", true);
                                System.out.println("NOOOOOOOOOOOOOOOOOOOO");
                            }else{
                                model.addObject("SUCCMSG", "Already REG");
                                model.addObject("Signup", true);
                                System.out.println("YEEEEEEEEEEEEEEEEEEEEEEESSSSSSSSSSSSSS");
                            }
                        }else{
                            System.out.println("NNNNNNNNNNNNNNNNNNNNNN");
                            model.setViewName("welcome");
                            model.addObject("validation", "Service interrupted");
                            model.addObject("Signup", true);
                        }
                        
                    }catch(Exception e)    {
                    e.printStackTrace();    
                    }
                        
                    
        }else{
        	UserProfile user = new UserProfile();
        	user.setFirstName(userProfile.getFirstName());
        	user.setLastName(userProfile.getLastName());
        	user.setEmailAddress(userProfile.getEmailAddress());
        	user.setPassword(userProfile.getPassword());
        	
        	
            request.setAttribute("User", user);
            model.setViewName("welcome");
            model.addObject("validation", "User age should be above 13");
            model.addObject("Signup", true);
            System.out.println("age invalid ... ");
        }
                }else{
                    model.setViewName("welcome");
                    model.addObject("validation", "Service interrupted");
                    model.addObject("Signup", true);
                    System.out.println("signup warning message variable null ... ");
                }
                
              
                
                
                /*if(he!=null){
                    try{
                        model.setViewName("loginsuccess");
                        System.out.println("smg........... ");
                        if(he.getResults().getUserExist()!=null){
                            if(he.getResults().getUserExist().equalsIgnoreCase("NO")){
                                model.addObject("SUCCMSG", "REG");
                                model.addObject("Signup", true);
                                System.out.println("NOOOOOOOOOOOOOOOOOOOO");
                            }else{
                                model.addObject("SUCCMSG", "Already REG");
                                model.addObject("Signup", true);
                                System.out.println("YEEEEEEEEEEEEEEEEEEEEEEESSSSSSSSSSSSSS");
                            }
                        }else{
                            System.out.println("NNNNNNNNNNNNNNNNNNNNNN");
                            model.setViewName("welcome");
                            model.addObject("validation", "Service interrupted");
                            model.addObject("Signup", true);
                        }
                        
                    }catch(Exception e)    {
                    e.printStackTrace();    
                    }
                        
                    
        }else{
            model.setViewName("welcome");
            model.addObject("validation", "Service intrupted");
            model.addObject("Signup", true);
            System.out.println("object timecasting error ... ");
        }*/
        }else {
        	
        	request.setAttribute("User", userProfile);
        	
        	
            model.setViewName("welcome");
            model.addObject("validation", "Invalid captcha");
            model.addObject("Signup", true);
            System.out.println("if (Util.rpHash(request.getParameter(defaultReal)).equals(request.getParameter(defaultRealHash))) ");
        }
        return model;
    }
	
	
	
	@RequestMapping(value="/test", method=RequestMethod.GET)
	public ModelAndView test(HttpServletRequest request) throws CSException{
		
		ModelAndView model=null;

		HttpSession session=request.getSession(true);
		UUID userId=(UUID) session.getAttribute("USRID");

		if(userId != null){
			 hubReq=new HubRequest(38);
             hubReq.setMsgType(38);
			
			
			
		}else{
			
		}
		
		
		
		
		
		model=new ModelAndView("AddBoard");
		
		return model;
		
	}
	
	@RequestMapping(value="/test2", method=RequestMethod.GET)
	public ModelAndView test2(HttpServletRequest request){
		
		ModelAndView model=new ModelAndView("ListOfBoards");
		
		
		return model;
		
	}
	
	
	@RequestMapping(value="/postFeedComment", method=RequestMethod.POST)
	@ResponseBody
	public String postFeedComment(HttpServletRequest request,@RequestBody FeedComment feedComment) throws CSException{
		
		HttpSession session=request.getSession(true);

		UUID userId=(UUID) session.getAttribute("UserId");
		System.out.println("comment  : ---------> "+feedComment.getComments());		
		 hubReq=new HubRequest();
		 hubReq.setMsgType(10);		
		 hubReq.setRequestParam(feedComment);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		
		
		
		return strbuddyresponse;
		
	}
	@RequestMapping(value="/ViewFeedComment", method=RequestMethod.POST)
	@ResponseBody
	public List<FeedComment> viewFeedComment(HttpServletRequest request,@RequestBody FeedComment feedComment){
		
		List<FeedComment> result= null;
	
	System.out.println("comment idd : "+feedComment.getFeedId());
	
	try{
		
		 //Map<String , Object> request;
		 hubReq=new HubRequest();
		// hubReq.setMsgType(35);
		 hubReq.setMsgType(181);	
		 hubReq.setRequestParam(feedComment);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		  GsonBuilder builder = new GsonBuilder();
          Gson gson = builder.create();
		 HubResponse he=gson.fromJson(strbuddyresponse, HubResponse.class);
		 result=he.getResults().getCommentList();
	}catch(Exception e)
	{
		e.printStackTrace();
	}
		return result;
	}
	
	
	 
	
	
	
	@RequestMapping(value="/FeedHitByBuddy", method=RequestMethod.POST)
	@ResponseBody
	public FeedHit feedHitByBuddy(HttpServletRequest request,@RequestBody FeedHit feedHit){
		
		FeedHit result= null;
	
	System.out.println("comment idd : "+feedHit.getFeedId());
	
	try{
		
		 //Map<String , Object> request;
		 hubReq=new HubRequest();
		 hubReq.setMsgType(11);		
		 hubReq.setRequestParam(feedHit);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		  GsonBuilder builder = new GsonBuilder();
          Gson gson = builder.create();
          UserFeedHitResponse he=gson.fromJson(strbuddyresponse, UserFeedHitResponse.class);
		System.out.println("he. "+he.getResults().getHitCount());
		System.out.println("he.get "+he.getResults().getItemsFound());
		
		 result= he.getResults();
		
		 
	}catch(Exception e)
	{
		e.printStackTrace();
	}
		return result;
	}
	@RequestMapping(value="/shareFeed", method=RequestMethod.POST)
	
	public @ResponseBody FeedHit shareFeed(HttpServletRequest request,@RequestBody FeedHit feedHit){
//	public @ResponseBody String shareFeed(HttpServletRequest request,@RequestBody FeedHit feedHit){
		
		//String result= null;
		FeedHit result=null;
	System.out.println("comment idd : "+feedHit.getFeedId());
	
	try{

		HttpSession session=request.getSession(true);

		UUID userId=(UUID) session.getAttribute("USRID");
		 hubReq=new HubRequest();
		 hubReq.setMsgType(12);		
		 
		/* ModelMap map=new ModelMap();
		 map.put("feedId" , feedHit.getFeedId());
		 map.put("active" , feedHit.getActive());
		 map.put("sharedBy" , userId);
		 map.put("sharedByName" , feedHit.getHittedByName());*/
		 
		
		 
		 /*
		  
		  {
    "msgType": 12,
    "requestParam": {
       "feed_id":"ff81bb1f-6126-4bcd-b41d-382c2f2cbc57",
       "shared_by":"30bbcfeb-0043-48fd-8632-ecde0e28205f",
       "shared_by_name":"Thamaramurthy",
       "shared_from":"Buddy"
    }
}
		  
		  
		  * */
		 /* public String feedId;
	       public String sharedBy;
	       public String sharedByName;
	       public Date createdDate;
	       public String sharedFrom;
	       public Date modifiedDate;
	       
		 */
		 ModelMap map= new ModelMap();
		 map.put("feedId" , feedHit.getFeedId());
		 map.put("sharedBy" , userId);
		 map.put("sharedByName" , feedHit.getHittedByName());
		 map.put("sharedFrom" , feedHit.getSharedFrom());
		 map.put("sharedTo" , feedHit.getSharedTo());	 
		 System.out.println("shareto : "+feedHit.getSharedTo());
		 hubReq.setRequestParam(map);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strbuddyresponse!=null)
		 {
			 HubResponse  response=GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class);
			 if(response!=null && response.getResults()!=null)
			 {
				 //result=response.getResults().getStatus();
				 result= new FeedHit();
				 result.setFeedId(feedHit.getFeedId());
				 
			 }else{
				// result="Fail";
			 }
		 }
		 
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	System.out.println("share feed result : "+result);	
	return result;
	}
	

	@RequestMapping(value="/buddies", method=RequestMethod.GET)
	public ModelAndView mybuddylist(HttpServletRequest request) throws Exception{
		
		HttpSession session=request.getSession(true);

		UUID userId=(UUID) session.getAttribute("USRID");
		ModelAndView model=null;
		if(userId != null){
			//model.setViewName("buddies");
			model=new ModelAndView("buddies");
			hubReq=new HubRequest(32);
			 hubReq.setMsgType(32);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId.toString());
			 map.put("startNode", 0);
			 map.put("endNode", 10);
			 hubReq.setRequestParam(map);
			 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 
			GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		    
		    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
			
		    SearchResults searchResults=response1.getResults();
		    SearchResponse searchResponse=searchResults.getSearchResponse();
		   if(searchResponse !=null){ 
		    List<UserProfile> userList=searchResponse.getUserList();
		    model.addObject("Buddies", userList);
		   }else{
			   model.addObject("Buddies", new ArrayList<UserProfile>());   
		   }
			
		   model.addObject("userCount", searchResponse.getUserCount());
			
			hubReq=new HubRequest(34);
			 hubReq.setMsgType(34);
			 
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId.toString());
			 map1.put("startNode", 0);
			 map1.put("endNode", 10);
			 hubReq.setRequestParam(map);
			 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		    SearchMainResponse response2=gson.fromJson(invitaionResponse, SearchMainResponse.class);
		    System.out.println("response2"+response2);
		    SearchResults searchResults1=response2.getResults();
		    SearchResponse searchResponse1=searchResults1.getSearchResponse();
		    List<UserProfile> invitationUsers=searchResponse1.getUserList();
			model.addObject("Invitations", invitationUsers);
			
			 String userlocation=(String) session.getAttribute("USRLocation");
			
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 //searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				// searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			
			hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			// searchReq.setLatlang("13.082680199999999,80.2707184");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 }
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strsearchResponse= gson.fromJson(strboardlist, HubResponse.class); 
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			// searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strTeamResponse= gson.fromJson(strTeamlist, HubResponse.class); 
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			// searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse buddyResponse= gson.fromJson(strbuddyresponse, HubResponse.class); 
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			
				//********************************************  Get board Details  ************************************************	  
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }
				 }
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm");
		}
	
		
		
		
		return model;
		
	}
	
	@RequestMapping(value="/inviteBuddyByMail", method=RequestMethod.POST)
	@ResponseBody
	public  Map<String,String> sendInvitaionByMail(HttpServletRequest request,@RequestBody SendInviteByMail sendInviteByMail) throws CSException{
		
		HttpSession session=request.getSession(true);

		UUID userId=(UUID) session.getAttribute("USRID");
		String email=(String) session.getAttribute("USREMAIL");
		sendInviteByMail.setUserId(userId+"");
		sendInviteByMail.setEmailAddress(email);
		hubReq=new HubRequest(30);
		 hubReq.setMsgType(30);
		 
		hubReq.setRequestParam(sendInviteByMail);
		
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
	    Gson gson = builder.create();
	    //ForgotPasswordResponse forgotPasswordResponse=gson.fromJson(response, ForgotPasswordResponse.class);
	    
	    MailInvitaionResponse response1=gson.fromJson(response, MailInvitaionResponse.class);
	    
	    Map<String,String> emailResponse=response1.getResults();
		return emailResponse;
	}
	
	
	@RequestMapping(value="/buddySearchCriteria", method=RequestMethod.POST)
	@ResponseBody
	public  SearchMainResponse getBuddiesWithCriteria(HttpServletRequest request,@RequestBody BoardSearchRequest buddySearchRequest) throws CSException{
		
		HttpSession session=request.getSession(true);

		UUID userId=(UUID) session.getAttribute("USRID");
		buddySearchRequest.setUserId(userId.toString());
		
		hubReq=new HubRequest(31);
		hubReq.setMsgType(31);
		hubReq.setRequestParam(buddySearchRequest);
		
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
	    Gson gson = builder.create();
	    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
		
		return response1;
	}
	
	

	@RequestMapping(value="/buddyInvitaionManupulations", method=RequestMethod.GET)
	@ResponseBody
	public  String buddyInvitaionManupulations(HttpServletRequest request,@RequestParam int serviceId,@RequestParam String	userBuddyId) throws CSException{
		
		HttpSession session=request.getSession(true);
		UUID userId=(UUID) session.getAttribute("USRID");
		
		System.out.println("userId"+userId);
		
		hubReq=new HubRequest(serviceId);
		hubReq.setMsgType(serviceId);
		 ModelMap map1=new ModelMap();
		 
		 
		 System.out.println("invitee "+userId);
		 System.out.println("serviceId"+serviceId);
		 System.out.println("invitor "+userBuddyId);

		 map1.put("inviteeId", userId);
		 map1.put("invitorId", userBuddyId);
		hubReq.setRequestParam(map1);
		
		
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		return response;
	}
	
	

	@RequestMapping(value="/getMyBuddiesAjax", method=RequestMethod.GET)
	@ResponseBody
	public  List<UserProfile>  getMyBuddiesAjax(HttpServletRequest request) throws CSException{
		HttpSession session=request.getSession(true);
		UUID userId=(UUID) session.getAttribute("USRID");
		hubReq=new HubRequest(32);
		 hubReq.setMsgType(32);
		ModelMap map=new ModelMap();
		 map.put("userId", userId.toString());
		 map.put("startNode", 0);
		 map.put("endNode", 100);
		 hubReq.setRequestParam(map);
		 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
	    Gson gson = builder.create();
	    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
	    SearchResults searchResults=response1.getResults();
	    SearchResponse searchResponse1=searchResults.getSearchResponse();
	    List<UserProfile> myBuddies=new ArrayList<UserProfile>();
	    if(searchResponse1.getUserList() != null){
	    	myBuddies=searchResponse1.getUserList();
	    }
	    System.out.println("user details ---------> "+myBuddies);
		return myBuddies;
	}
	

	@RequestMapping(value="/getMyBuddyRequestsAjax", method=RequestMethod.GET)
	@ResponseBody
	public  List<UserProfile>  getMyBuddyRequestsAjax(HttpServletRequest request) throws CSException{
		
		HttpSession session=request.getSession(true);

		hubReq=new HubRequest(34);
		 hubReq.setMsgType(34);
		 UUID userId=(UUID) session.getAttribute("USRID");
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId.toString());
		 map1.put("startNode", 0);
		 map1.put("endNode", 100);
		 hubReq.setRequestParam(map1);
		 
		 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
	    SearchMainResponse response2=gson.fromJson(invitaionResponse, SearchMainResponse.class);
		
	    SearchResults searchResults1=response2.getResults();
	    SearchResponse searchResponse1=searchResults1.getSearchResponse();
	    List<UserProfile> invitationUsers=new ArrayList<UserProfile>();
	    if(searchResponse1.getUserList() != null){
	    	invitationUsers=searchResponse1.getUserList();
	    }
	    	
		System.out.println("res-----------> "+invitationUsers);
		return invitationUsers;
	}
	
	
@RequestMapping(value="/addBoard", method=RequestMethod.GET)
public ModelAndView addBoard(HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);

	
			if(session.getAttribute("USRID")!=null)
			{
				model=new ModelAndView("AddBoard");
				UUID userId=(UUID) session.getAttribute("USRID");
				String firstName=(String) session.getAttribute("USRFNA");
				Map<String,String> map=new HashMap<String,String>();
				map.put("userId", userId.toString());
				hubReq=new HubRequest(38);
				 hubReq.setMsgType(38);
				 hubReq.setRequestParam(map);
				 String boardRequestParametersResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("boardRequestParametersResponse  "+boardRequestParametersResponse);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(boardRequestParametersResponse != null){
					 
					 BoardAttrbutesResponse boardResult=gson.fromJson(boardRequestParametersResponse, BoardAttrbutesResponse.class);
					 if(boardResult!= null){
						 BoardFormAttributes boardFormAttributes=boardResult.getResults().getBoardAttributes();
						 request.setAttribute("BoardFormAttributes",boardFormAttributes);
						 request.setAttribute("UserName", firstName);
						 System.out.println("boardRequestParametersResponse  "+boardFormAttributes.getPage_visibility().size());
					 }
					 /*----------------added by dhanapriyanga--------*/
					 hubReq = new HubRequest();
					 hubReq.setMsgType(249);
					 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq);		
					 if(contryCodeString != null){
					 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
					 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
					 model.addObject("countryCodes", countryCodes);
					 }	 
					 /*---------------added by dhanapriyanga end---------*/
					 hubReq= new HubRequest();
					 hubReq.setMsgType(41);
					 ModelMap map1=new ModelMap();
					 map1.put("userId", userId);
					 map1.put("startNode", 0);
					 map1.put("endNode", 30);
					  hubReq.setRequestParam(map1);
						 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 if(strBoardList!=null)
						 {
							 HubResponse hubResponse= new GsonBuilder().create().fromJson(strBoardList, HubResponse.class);
							 if(hubResponse!=null && hubResponse.getResults()!=null)
							 {
								 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
							 }else{
								 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
							 }
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 
					 
					 
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
				 }
			}else{
				model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return model; 
}


@RequestMapping(value="/saveBoard", method=RequestMethod.POST)

public ModelAndView boardProfileSubmit(HttpServletRequest request,@ModelAttribute BoardProfile boardProfile,BindingResult result, ModelMap modelMap) throws CSException{
	
	ModelAndView model=null;
	HttpSession session=request.getSession(true);
	UUID userId=(UUID) session.getAttribute("USRID");
	System.out.println("boardProfile"+boardProfile.getBoardCoOwners());
	
	hubReq=new HubRequest(39);
	 hubReq.setMsgType(39);
	 String latlang=request.getParameter("latLang");
	 boardProfile.setLatlang(latlang);
	 System.out.println("boardProfile.getBoardImagefile()-- "+boardProfile.getBoardImagefile());
	 if(boardProfile.getBoardImagefile() !=null){
		 try {
			//boardProfile.setBoardProfilePic(boardProfile.getBoardImagefile().getBytes());
			//boardProfile.setImageData(boardProfile.getBoardImagefile().getBytes());
			 System.out.println("boardProfile.getBoardImagefile().getBytes()--------> "+boardProfile.getBoardImagefile().getBytes());
			 String imageDataString= new sun.misc.BASE64Encoder().encode(boardProfile.getBoardImagefile().getBytes());
			 boardProfile.setImageData(imageDataString);
			 if(boardProfile.getBoardImagefile().getOriginalFilename()!=""){
				 String filena=boardProfile.getBoardImagefile().getOriginalFilename();
				    System.out.println("image full name -------------------------> "+filena);
				    if(filena!=null && filena!="" && filena.length()>1){

					    int lindex=filena.lastIndexOf( '.' );
						String imageName=filena.substring(lindex, filena.length());
						System.out.println("Extention ------------------> "+imageName);
						boardProfile.setImageExtension(imageName);
				    }else{
				    	boardProfile.setImageExtension("");	
				    }
			 }else{
				 boardProfile.setImageExtension("");
			 }
		} catch (IOException e) {
			
			e.printStackTrace();
		}
	 }else{
		 //boardProfile.setBoardImagefile(null);
		 boardProfile.setImageData(null);
		 boardProfile.setImageExtension("");
	 }
	 
	 boardProfile.setBoardImagefile(null);
	 if(boardProfile.getBoardCoOwners()!=null){
		 List<String> boardCoOwnerList = Arrays.asList(boardProfile.getBoardCoOwners().split(","));
		List<BoardCoordinatorMap> m= new ArrayList<BoardCoordinatorMap>();
		for(String k : boardCoOwnerList)
		 {
			BoardCoordinatorMap map= new BoardCoordinatorMap(); 
			map.setCoOwnerId(k);
			m.add(map);
		 }
		 boardProfile.setBoardCoOwnerList(m);
	 }
	 String schedulerString=request.getParameter("schedulerHidden");
	 String umpireString=request.getParameter("umpireHidden");
	 String groundCoOrdinatorString=request.getParameter("groundCordinatorHidden");
	 List<CoOrdinator> coOrdinators = new ArrayList<CoOrdinator>();
	 if(schedulerString !=null){
		 CoOrdinator cordinator=new CoOrdinator();
		 List<String> schedularList = Arrays.asList(schedulerString.split(","));
			 for(String k : schedularList)
			 {
				 cordinator.setCoOrdinatorId(k);
				 cordinator.setCoOrdinatorTypeId(14);
			 }
			 coOrdinators.add(cordinator);
	 }
	 
	 if(umpireString !=null){
		 CoOrdinator cordinator=new CoOrdinator();
		 List<String> ampireList = Arrays.asList(umpireString.split(","));
			 for(String k : ampireList)
			 {
				 cordinator.setCoOrdinatorId(k);
				 cordinator.setCoOrdinatorTypeId(15);
			 }
			 coOrdinators.add(cordinator);
	 }
	 if(groundCoOrdinatorString !=null){
		 CoOrdinator cordinator=new CoOrdinator();
		 List<String> groundCoOrdinatorsList = Arrays.asList(groundCoOrdinatorString.split(","));
			 for(String k : groundCoOrdinatorsList)
			 {
				 cordinator.setCoOrdinatorId(k);
				 cordinator.setCoOrdinatorTypeId(28);
			 }
			 coOrdinators.add(cordinator);
	 }
	 
	 boardProfile.setBoardCoordinatorList(coOrdinators);
	 /**********added by dhanapriyanga*****************/
	 
	 Long phoneNumber2=null;
	 Long phoneNumber1=null;
	 
	 if(boardProfile.getPhoneNumber2()!=null){
		 phoneNumber2= boardProfile.getPhoneNumber2();
	 }
		 boardProfile.setPhoneNumber2(phoneNumber2);
	 
	 if(boardProfile.getPhoneNumber1()!=null){
		 phoneNumber1= boardProfile.getPhoneNumber1();
	 }
	 boardProfile.setPhoneNumber1(phoneNumber1);
	 
	 /**************end(DP)****************************/
	 hubReq.setRequestParam(boardProfile);
	 boardProfile.setCreatedBy(userId.toString());
	 
	 String boardProfileResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 
	 System.out.println("boardRequestParametersResponse  "+boardProfileResponse);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 if(boardProfileResponse != null){
			HubResponse boardResponse=gson.fromJson(boardProfileResponse, HubResponse.class);
		//	ResponseType response=boardResponse.getResults();
			//List<boardStatusDetail>
			if(boardResponse!=null && boardResponse.getResults()!=null && boardResponse.getResults().getBoardStatusDetail()!= null && boardResponse.getResults().getBoardStatusDetail().size()  >0)
			{
				
				model=new ModelAndView("redirect:/board?bid="+boardResponse.getResults().getBoardStatusDetail().get(0).getBoardId());
				
			}else{
				model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			}
			

	 }else{
		 request.setAttribute("servicevalidation", "Service unavailable due to some problems");
	 }
	 
	 

	return model;
	
}


@RequestMapping(value="/myfans", method=RequestMethod.GET)
public ModelAndView myfans(HttpServletRequest request) throws CSException{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;

	if(session!=null && session.getAttribute("USRID")!=null)
	{
		model=new ModelAndView("fans");
		UUID userId=(UUID) session.getAttribute("USRID");
		
		 hubReq=new HubRequest(56);
		 hubReq.setMsgType(56);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 10);
		 map.put("fanType", "All");
		  hubReq.setRequestParam(map);
		
		 String strBuddyList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBuddyList!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBuddyList, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
				 model.addObject("BoardFanCount", boardFanList.getResults().getFanDetails().getBoardCount());
				 model.addObject("UserFanCount", boardFanList.getResults().getFanDetails().getUserProfileCount());
			 }
		 }
	
 //*******************************************************   Around you details	 *************************************************
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 	searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 //*****************************************************************************************************************
		 
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map3=new ModelMap();
		 map3.put("userId", userId);
		 map3.put("startNode", 0);
		 map3.put("endNode", 200);
		  hubReq.setRequestParam(map3);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
			 if(hubResponse2!=null && hubResponse2.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		
	}
	return model;
}



@RequestMapping(value="/fanOf", method=RequestMethod.GET)
public ModelAndView fanOfList(HttpServletRequest request) throws CSException{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;

	if(session!=null && session.getAttribute("USRID")!=null)
	{
		model=new ModelAndView("buddyFanOf");
		UUID userId=(UUID) session.getAttribute("USRID");
		
		 hubReq=new HubRequest(57);
		 hubReq.setMsgType(57);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 15);
		 map.put("fanType", "All");
		  hubReq.setRequestParam(map);
		
		 String strBuddyList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBuddyList!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBuddyList, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
			 }
		 }
	
 //*******************************************************   Around you details	 *************************************************
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map3=new ModelMap();
		 map3.put("userId", userId);
		 map3.put("startNode", 0);
		 map3.put("endNode", 200);
		  hubReq.setRequestParam(map3);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
			 if(hubResponse2!=null && hubResponse2.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 //*****************************************************************************************************************
		 
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		
	}
	return model;
}





@RequestMapping(value="/Board-Fan/{bid}", method=RequestMethod.GET)
public ModelAndView boardFanpublicview(HttpServletRequest request,@PathVariable String bid) throws CSException{
	
	ModelAndView model=new ModelAndView("BoardFanPublicView");
	HttpSession session=request.getSession(true);
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		
		//*******************************  for getting user boards   ******************************
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
		 //*******************************************************   Around you details	 *************************************************
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= gson.fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= gson.fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");		
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 
		 //*********************************************************** Boad Fan check  ******************************************************
		 hubReq= new HubRequest();
		 hubReq.setMsgType(76);
		 ModelMap map4=new ModelMap();
		 map4.put("boardId",bid);
		 map4.put("userId", userId);						
		 hubReq.setRequestParam(map4);
		 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
		 boolean buddyFan=false;
		 if(buddyFandeatil!=null)
		 {
			 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
			 if(buddyFanResponse!=null)
			 {
				 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
				 {
					 buddyFan=true;
				 }
			 }
			 
		 }
		// buddyFan=true;
		 System.out.println("board : "+buddyFan);
		 model.addObject("BoardFanReq", buddyFan);
		 
		 ///***************************************** Getting fans list   *****************************************************************
		 
		 ModelMap fanlistmap=new ModelMap();
		 fanlistmap.put("boardId", bid);
		 fanlistmap.put("startNode", 0);
		 fanlistmap.put("endNode", 10);
		 fanlistmap.put("fanType", "All");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(46);
		 hubReq.setRequestParam(fanlistmap);
		 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardFanlist!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
				 model.addObject("userCount", boardFanList.getResults().getFanDetails().getUserProfileCount());
				 model.addObject("boardCount", boardFanList.getResults().getFanDetails().getBoardCount());
			 }
		 }
	
		 model.addObject("BoardId", bid);
		 ModelMap boardInfo=new ModelMap();
		
		 boardInfo.put("userId", userId);			 
		 boardInfo.put("boardId", bid);		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(40);
		 hubReq.setRequestParam(boardInfo);
		 String strBoardInfo=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardInfo!=null)
		 {
			 HubResponse boardInfoResponse=GsonConverters.getGsonObject().fromJson(strBoardInfo, HubResponse.class);
			 System.out.println();
			 if(boardInfoResponse!=null && boardInfoResponse.getResults()!=null && boardInfoResponse.getResults().getBoardStatusDetail()!=null)
			 {
				 model.addObject("BoradInfo", boardInfoResponse.getResults().getBoardStatusDetail().get(0));
				List<String> boardOwners= new ArrayList<String>();
				String coOwner="";
				boardOwners.add(boardInfoResponse.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				coOwner=boardInfoResponse.getResults().getBoardStatusDetail().get(0).getCreatedBy();
				if(boardInfoResponse.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList()!=null)
				{
					for(BoardCoordinatorMap s : boardInfoResponse.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList())
					{
						boardOwners.add(s.getCoOwnerId());
						coOwner=coOwner+","+s.getCoOwnerId();
					}
				}
				
				 model.addObject("CoOwnerList", boardOwners);
			 }else{
				 System.out.println("query not excuted 2");
			 }
			 
		 }else{
			 System.out.println("query not excuted ");
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}

	return model;
	
}



@RequestMapping(value="/Board-Fan", method=RequestMethod.GET)
public ModelAndView boardFan(HttpServletRequest request,@RequestParam String bid) throws CSException{
	
	ModelAndView model=new ModelAndView("Board-Fan");
	HttpSession session=request.getSession(true);
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		
		//*******************************  for getting user boards   ******************************
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
		 //*******************************************************   Around you details	 *************************************************
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= gson.fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= gson.fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");		
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 
		 //*****************************************************************************************************************
		 
		 
		 ///***************************************** Getting fans list   *****************************************************************
		 
		 ModelMap fanlistmap=new ModelMap();
		 fanlistmap.put("boardId", bid);
		 fanlistmap.put("startNode", 0);
		 fanlistmap.put("endNode", 10);
		 fanlistmap.put("fanType", "All");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(46);
		 hubReq.setRequestParam(fanlistmap);
		 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardFanlist!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
				 model.addObject("userCount", boardFanList.getResults().getFanDetails().getUserProfileCount());
				 model.addObject("boardCount", boardFanList.getResults().getFanDetails().getBoardCount());
			 }
		 }
	
		 model.addObject("BoardId", bid);
		 ModelMap boardInfo=new ModelMap();
		
		 boardInfo.put("userId", userId);			 
		 boardInfo.put("boardId", bid);		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(40);
		 hubReq.setRequestParam(boardInfo);
		 String strBoardInfo=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardInfo!=null)
		 {
			 HubResponse boardInfoResponse=GsonConverters.getGsonObject().fromJson(strBoardInfo, HubResponse.class);
			 System.out.println();
			 if(boardInfoResponse!=null && boardInfoResponse.getResults()!=null && boardInfoResponse.getResults().getBoardStatusDetail()!=null)
			 {
				 model.addObject("BoradInfo", boardInfoResponse.getResults().getBoardStatusDetail().get(0));
				List<String> boardOwners= new ArrayList<String>();
				String coOwner="";
				boardOwners.add(boardInfoResponse.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				coOwner=boardInfoResponse.getResults().getBoardStatusDetail().get(0).getCreatedBy();
				if(boardInfoResponse.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList()!=null)
				{
					for(BoardCoordinatorMap s : boardInfoResponse.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList())
					{
						boardOwners.add(s.getCoOwnerId());
						coOwner=coOwner+","+s.getCoOwnerId();
					}
				}
				
				 model.addObject("CoOwnerList", boardOwners);
				 model.addObject("StrCoOwnerList", coOwner);
			 }else{
				 System.out.println("query not excuted 2");
			 }
			 
		 }else{
			 System.out.println("query not excuted ");
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}

	return model;
	
}

@RequestMapping(value="/boardFanOf", method=RequestMethod.GET)
public ModelAndView boardFanOf(HttpServletRequest request,@RequestParam String bid) throws CSException{
	
	ModelAndView model=new ModelAndView("boardFanOf");
	HttpSession session=request.getSession(true);
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		
		//*******************************  for getting user boards   ******************************
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
		 //*******************************************************   Around you details	 *************************************************
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("league");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= gson.fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= gson.fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 //*****************************************************************************************************************
		 
		 
		 ///***************************************** Getting fans list   *****************************************************************
		 
		 ModelMap fanlistmap=new ModelMap();
		 fanlistmap.put("boardId", bid);
		 fanlistmap.put("startNode", 0);
		 fanlistmap.put("endNode", 100);
		 fanlistmap.put("fanType", "All");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(55);
		 hubReq.setRequestParam(fanlistmap);
		 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardFanlist!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
			 }
		 }
	
		 model.addObject("BoardId", bid);
		 ModelMap boardInfo=new ModelMap();
		
		 boardInfo.put("userId", userId);			 
		 boardInfo.put("boardId", bid);		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(40);
		 hubReq.setRequestParam(boardInfo);
		 String strBoardInfo=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardInfo!=null)
		 {
			 HubResponse boardInfoResponse=GsonConverters.getGsonObject().fromJson(strBoardInfo, HubResponse.class);
			 System.out.println();
			 if(boardInfoResponse!=null && boardInfoResponse.getResults()!=null && boardInfoResponse.getResults().getBoardStatusDetail()!=null)
			 {
				 model.addObject("BoradInfo", boardInfoResponse.getResults().getBoardStatusDetail().get(0));
			 }else{
				 System.out.println("query not excuted 2");
			 }
			 
		 }else{
			 System.out.println("query not excuted ");
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}

	return model;
	
}
@RequestMapping(value="/boardFanOf/{bid}", method=RequestMethod.GET)
public ModelAndView boardFanOfpublicprofile(HttpServletRequest request,@PathVariable String bid) throws CSException{
	
	ModelAndView model=new ModelAndView("boardFanOfPublic");
	HttpSession session=request.getSession(true);
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		
		//*******************************  for getting user boards   ******************************
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
		 //*******************************************************   Around you details	 *************************************************
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= gson.fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= gson.fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 //*****************************************************************************************************************

		//*********************************************************** Boad Fan check  ******************************************************
							 hubReq= new HubRequest();
							 hubReq.setMsgType(76);
							 ModelMap map4=new ModelMap();
							 map4.put("boardId",bid);
							 map4.put("userId", userId);						
							 hubReq.setRequestParam(map4);
							 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
							 boolean buddyFan=false;
							 if(buddyFandeatil!=null)
							 {
								 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
								 if(buddyFanResponse!=null)
								 {
									 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
									 {
										 buddyFan=true;
									 }
								 }
								 
							 }
							// buddyFan=true;
							 System.out.println("board : "+buddyFan);
							 model.addObject("BoardFanReq", buddyFan);
		 
		 ///***************************************** Getting fans list   *****************************************************************
		 
		 ModelMap fanlistmap=new ModelMap();
		 fanlistmap.put("boardId", bid);
		 fanlistmap.put("startNode", 0);
		 fanlistmap.put("endNode", 100);
		 fanlistmap.put("fanType", "All");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(55);
		 hubReq.setRequestParam(fanlistmap);
		 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardFanlist!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
			 }
		 }
	
		 model.addObject("BoardId", bid);
		 ModelMap boardInfo=new ModelMap();
		
		 boardInfo.put("userId", userId);			 
		 boardInfo.put("boardId", bid);		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(40);
		 hubReq.setRequestParam(boardInfo);
		 String strBoardInfo=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoardInfo!=null)
		 {
			 HubResponse boardInfoResponse=GsonConverters.getGsonObject().fromJson(strBoardInfo, HubResponse.class);
			 System.out.println();
			 if(boardInfoResponse!=null && boardInfoResponse.getResults()!=null && boardInfoResponse.getResults().getBoardStatusDetail()!=null)
			 {
				 model.addObject("BoradInfo", boardInfoResponse.getResults().getBoardStatusDetail().get(0));
			 }else{
				 System.out.println("query not excuted 2");
			 }
			 
		 }else{
			 System.out.println("query not excuted ");
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}

	return model;
	
}


@RequestMapping(value="/My Boards", method=RequestMethod.GET)
public ModelAndView myBoards(HttpServletRequest request){
	
	ModelAndView model=new ModelAndView("ListOfBoards");
	
	try {
		HttpSession session=request.getSession(true);
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 for(BoardProfile k : hubResponse.getResults().getBoardsList())
					 {
						 System.out.println("board name : "+k.getBoardName());
						 System.out.println("category name : "+k.getCategory());
						 System.out.println("board image url : "+k.getBoardImageURL());
						 
					 }
					 model.addObject("BRDlist", hubResponse.getResults().getBoardsList());
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					
					 
					 
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	
	return model;
	
}
@RequestMapping(value="/MyBoards", method=RequestMethod.GET)
public ModelAndView myBoard(HttpServletRequest request){
	
	ModelAndView model=new ModelAndView("ListOfBoards");
	
	try {
		HttpSession session=request.getSession(true);
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BRDlist", hubResponse.getResults().getBoardsList());
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					
					 
					 
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	
	return model;
	
}


@RequestMapping(value="/board", method=RequestMethod.GET)
public ModelAndView getboard(@RequestParam String bid, HttpServletRequest request) throws CSException
{
	ModelAndView model=null;
	try{
		
		HttpSession session=request.getSession(true);
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId=(UUID) session.getAttribute("USRID");
			List<Object> upcommingObject=new ArrayList<Object>();
			
			hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", bid);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
				{
					 //model= new ModelAndView("boards");
					//model= new ModelAndView("boardsnew");
					if(hubResponse.getResults().getBoardStatusDetail().get(0).getCategory().equalsIgnoreCase("Team"))
					{
						model= new ModelAndView("boardsnew");
						System.out.println("Inside team  Board");
					}else{
						model=new ModelAndView("BoardLanding");
						System.out.println("Inside League  Board");
						}
					System.out.println("The category is :"+hubResponse.getResults().getBoardStatusDetail().get(0).getCategory());
					//model=new ModelAndView("BoardLanding");
					 model.addObject("BoradInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 model.addObject("LeaguManagement","No");
					 hubReq=new HubRequest();
					 hubReq.setMsgType(42);
					 ModelMap map2=new ModelMap();
					 map2.put("boardId", bid);
					 map2.put("userId", userId);
					 map2.put("startNode", 0);
					 map2.put("endNode", 10);
					 map2.put("feedHitUserId", userId);
					 hubReq.setRequestParam(map2);
					 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
					 if(strBoardFeedList!=null )
					 {
						 HubResponse feedlist= gson.fromJson(strBoardFeedList, HubResponse.class);
						 
						 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
						 {
							 //FeedsList
							model.addObject("FeedsList", feedlist.getResults().getBoardFeedResponse().getFeedList());
						 }
					 }else{
						 System.out.println("Board feeds not excuted...........");
					 }
					 
					//*******************************  for getting user boards   ******************************
						
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					 
					 
					 //*************************************************  Upcomming details  **********************//
					 
					 
					 hubReq =new HubRequest();
					 hubReq.setMsgType(133);
					 ModelMap map5=new ModelMap();
					 map5.put("boardId", bid);
					 map5.put("previousNextFlag","current");
					 map5.put("endNode", 10);
					 hubReq.setRequestParam(map5);

					 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					
					 if(strGameScheduleList != null){
						 HubResponse hubResponse1 = gson.fromJson(strGameScheduleList, HubResponse.class);
						 if(hubResponse1 != null && hubResponse1.getResults() != null){
							 if(hubResponse1.getResults().getGameSchedule().getUpComingMatchesList() !=null || hubResponse1.getResults().getGameSchedule().getInprogressMatchesList() != null)
							 {
							 upcommingObject.addAll(hubResponse1.getResults().getGameSchedule().getUpComingMatchesList());
							 upcommingObject.addAll(hubResponse1.getResults().getGameSchedule().getInprogressMatchesList());
							 
							 Collections.sort(upcommingObject, Collections.reverseOrder(new UpcommingComprator()));
							 
							 System.out.println("The Upcomming object list size :"+upcommingObject.size());
							 
							// model.addObject("upcomingMatchesList", hubResponse1.getResults().getGameSchedule().getUpComingMatchesList());
							 model.addObject("upcomingMatchesList",upcommingObject );
						 
							 }
						 
						 }else{
							System.out.println("null condition"); 
						 }
					 }
					 
					 //Completed phone
					 
					 
					 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					 Date date = new Date();
					 
					 long DAY_IN_MS = 1000 * 60 * 60 * 24;
					 System.out.println(new Date(System.currentTimeMillis() - (7 * DAY_IN_MS)));
					 
					 System.out.println(dateFormat.format(date));
					 
					 hubReq =new HubRequest();
					 hubReq.setMsgType(133);
					 ModelMap map8=new ModelMap();
					 map8.put("boardId", bid);
					 map8.put("toDateString",dateFormat.format(date));
					 map8.put("fromDateString",dateFormat.format(new Date(System.currentTimeMillis() - (7 * DAY_IN_MS))));
					 map8.put("endNode", 100);
					 hubReq.setRequestParam(map8);

					 String strGameScheduleList1 = cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					
					 if(strGameScheduleList1 != null){
						 HubResponse hubResponse2 = gson.fromJson(strGameScheduleList1, HubResponse.class);
						 if(hubResponse2 != null && hubResponse2.getResults() != null){
							 model.addObject("completedMatchesList", hubResponse2.getResults().getGameSchedule().getCompletedMatchesList());
							 
						 }else{
							System.out.println("null condition"); 
						 }
					 }
					 
					 
					 // TopBowler TopBatsman details
					 
					 hubReq =new HubRequest();
					 hubReq.setMsgType(265);
					 ModelMap map6=new ModelMap();
					 map6.put("boardId", bid);
					 map6.put("startNode",0);
					 map6.put("endNode", 500);
					 hubReq.setRequestParam(map6);

					 String topBatsmanList = cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					
					 if(topBatsmanList != null){
						 HubResponse hubResponse6 = gson.fromJson(topBatsmanList, HubResponse.class);
						 if(hubResponse6 != null && hubResponse6.getResults() != null){

							 model.addObject("StarBatsman", hubResponse6.getResults().getStarBatsmen());
							 
						 }else{
							System.out.println("null condition"); 
						 }
					 }
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(264);
					 ModelMap map7=new ModelMap();
					 map7.put("boardId", bid);
					 map7.put("startNode", 0);
					 map7.put("endNode", 500);
					 hubReq.setRequestParam(map7);
					 
					 String TopBowlerList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					 if(TopBowlerList !=null)
					 {
						 HubResponse hubResponse7 = gson.fromJson(TopBowlerList, HubResponse.class);
						 if(hubResponse7 != null && hubResponse7.getResults() != null){

							 model.addObject("StarBowler", hubResponse7.getResults().getStarBowlers());
						 }else{
							System.out.println("null condition"); 
						 }
						 
					 }
					 
					 
					 //*******************************************************   Around you details	 *************************************************
					 hubReq=new HubRequest();
					 hubReq.setMsgType(77);
					 BoardSearchRequest searchReq= new BoardSearchRequest();
					 String userlocation=(String) session.getAttribute("USRLocation");

					 System.out.println("userlocation"+userlocation);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					 }
					
					 
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("Matches");
					 hubReq.setRequestParam(searchReq);
				    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
					
					 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
					 {
						 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(22);
					 //session.setAttribute("USRLocation", userProfile.getLatLang());
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
							 System.out.println("user location setttt");
						}else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							 System.out.println("user not getted ------------- default 1");
						}
					 }else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 2");
					 }
					
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("League");
					 hubReq.setRequestParam(searchReq);
				     String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strboardlist);
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
					 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
					
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 searchReq.setCategory("Team");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strTeamlist);
					 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
					 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
					 
					 if(strTeamResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 hubReq.setMsgType(23);
					 searchReq.setCategory("");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strbuddyresponse);
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
					 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
					 if(buddyResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
					 }
					 
					 request.setAttribute("BoardId", bid);
					 hubReq.setMsgType(79);
					 searchReq.setCategory("Merchants");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
					 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
					 }
					
					 
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
				 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/Pitch", method=RequestMethod.GET)
public ModelAndView pitch(@RequestParam String bid, HttpServletRequest request) throws CSException
{
	ModelAndView model=null;
	try{
		
		HttpSession session=request.getSession(true);
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId=(UUID) session.getAttribute("USRID");
			
			hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", bid);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
				{
					 //model= new ModelAndView("boards");
					model= new ModelAndView("boardsnew");
					 model.addObject("BoradInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 model.addObject("LeaguManagement","No");
					 hubReq=new HubRequest();
					 hubReq.setMsgType(42);
					 ModelMap map2=new ModelMap();
					 map2.put("boardId", bid);
					 map2.put("userId", userId);
					 map2.put("startNode", 0);
					 map2.put("endNode", 10);
					 map2.put("feedHitUserId", userId);
					 hubReq.setRequestParam(map2);
					 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
					 if(strBoardFeedList!=null )
					 {
						 HubResponse feedlist= gson.fromJson(strBoardFeedList, HubResponse.class);
						 
						 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
						 {
							 //FeedsList
							model.addObject("FeedsList", feedlist.getResults().getBoardFeedResponse().getFeedList());
						 }
					 }else{
						 System.out.println("Board feeds not excuted...........");
					 }
					 
					//*******************************  for getting user boards   ******************************
						
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					 
					 //*******************************************************   Around you details	 *************************************************
					 hubReq=new HubRequest();
					 hubReq.setMsgType(77);
					 BoardSearchRequest searchReq= new BoardSearchRequest();
					 String userlocation=(String) session.getAttribute("USRLocation");

					 System.out.println("userlocation"+userlocation);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					 }
					
					 
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("Matches");
					 hubReq.setRequestParam(searchReq);
				    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
					
					 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
					 {
						 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(22);
					 //session.setAttribute("USRLocation", userProfile.getLatLang());
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
							 System.out.println("user location setttt");
						}else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							 System.out.println("user not getted ------------- default 1");
						}
					 }else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 2");
					 }
					
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("League");
					 hubReq.setRequestParam(searchReq);
				     String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strboardlist);
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
					 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
					
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 searchReq.setCategory("Team");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strTeamlist);
					 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
					 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
					 
					 if(strTeamResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 hubReq.setMsgType(23);
					 searchReq.setCategory("");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strbuddyresponse);
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
					 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
					 if(buddyResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
					 }
					 
					 request.setAttribute("BoardId", bid);
					 hubReq.setMsgType(79);
					 searchReq.setCategory("Merchants");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
					 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
					 }
					
					 
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
				 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}


@RequestMapping(value="/buddySearchForMultipleSelection", method=RequestMethod.GET)
@ResponseBody
public Object buddySearchOnBoardCreation(HttpServletRequest request,@RequestParam String q) throws CSException{

	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(43);
		 hubReq.setMsgType(43);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", q);
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 ob= searchResponse1.getUserSearchBean();
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return ob;
	
}

@RequestMapping(value="/boardFansList", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse boardFansList(@RequestBody BoardFanRequest boardFanRequest) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	System.out.println("board id : "+boardFanRequest.getBoardId());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(46);	
	 boardFanRequest.setStartNode("0");
	 boardFanRequest.setEndNode("10");	 
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}
@RequestMapping(value="/boardFanOfList", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse boardFanOfList(@RequestBody BoardFanRequest boardFanRequest) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	System.out.println("board id : "+boardFanRequest.getBoardId());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(55);	
	 boardFanRequest.setStartNode("0");
	 boardFanRequest.setEndNode("100");	 
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}



@RequestMapping(value="/userFansList", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse userFansList(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(56);	
	 boardFanRequest.setStartNode("0");
	 boardFanRequest.setEndNode("10");	 
	 boardFanRequest.setUserId(userId.toString());
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}



@RequestMapping(value="/userFanOfList", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse userFanOfList(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(57);	
	 boardFanRequest.setStartNode("0");
	 boardFanRequest.setEndNode("10");	 
	 boardFanRequest.setUserId(userId.toString());
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}





@RequestMapping(value="/fanActions", method=RequestMethod.GET)
@ResponseBody
public Object fan(HttpServletRequest request,@RequestParam String userId,@RequestParam String fanId,@RequestParam String action) throws CSException{
	System.out.println("action    "+action);
	System.out.println(action.equals("boardFanToBuddy"));
	HttpSession session=request.getSession(true);
	System.out.println("userid ------> "+userId);
	System.out.println("fan id ------------> "+fanId);
 	Object ob=null;
 	 ModelMap map=new ModelMap();	
	if(action !=null){
		if(action.equals("buddyFanToBoard")){
			
			 hubReq=new HubRequest(44);
			 hubReq.setMsgType(44);
			 map.put("userId", userId);
			 map.put("boardId", fanId);
			 map.put("statusId", "16");
			 hubReq.setRequestParam(map);
			 String buddyFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomefan());
			 ob=fanResponse;
		}else if(action.equals("buddyUnFanToBoard")){
			 hubReq=new HubRequest(45);
			 hubReq.setMsgType(45);
			 map.put("userId", userId);
			 map.put("boardId", fanId);
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
			
		}else if(action.equals("boardFanToBoard")){
			
			 hubReq=new HubRequest(49);
			 hubReq.setMsgType(49);
			 map.put("boardId", userId);
			 map.put("fanboardId", fanId);
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomefan());
			 ob=fanResponse;
			
		}else if(action.equals("boardUnFanBoard")){
			
			 hubReq=new HubRequest(50);
			 hubReq.setMsgType(50);
			 map.put("boardId", userId);
			 map.put("fanboardId", fanId);
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
		}
		else if(action.equals("boardFanToBuddy")){
			
			 hubReq=new HubRequest(51);
			 hubReq.setMsgType(51);
			 map.put("buddyId", fanId); // 
			 map.put("fanboardId", userId);//
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomefan());
			 ob=fanResponse;
			
		}else if(action.equals("boardUnFanToBuddy")){
			
			
			/*
			 
			 buddyId
			 {
    "msgType": 52,
    "requestParam": {
   "buddyId":"0ffcee6e-4b65-491d-b487-98c584dce81b",
   "fanboardId":"45a80e70-b1d3-4c26-8758-d772e92195ef"
  
  
    }
}
			 
			 * */
			 hubReq=new HubRequest(52);
			 hubReq.setMsgType(52);
			 //map.put("boardId", fanId);
			 map.put("buddyId", fanId);
			 map.put("fanboardId", userId);
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
		}else if(action.equals("buddyFanToBuddy"))
		{
			hubReq=new HubRequest(59);
			 hubReq.setMsgType(59);
			 /*
			  * worng
			  userId= whos login
			   fanid for whom to given request			   
			  * */
			 
			 /*
			  userId= whom to given request
			   fanid who login			   
			  * */
			 
			 map.put("userId", fanId);
			 map.put("fanId", userId);
			 
			 
			 map.put("statusId", 19);
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
		}else if(action.equals("buddyUnFanToBuddy"))
		{
          
			hubReq=new HubRequest(60);
			 hubReq.setMsgType(60);
			 map.put("userId", fanId);
			 map.put("fanId", userId);			
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBuddy=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBuddy);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBuddy, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
			
			
			/*
             
             {
    "msgType": 60,
    "requestParam": {
       
        "userId": "2766cc60-8267-4afc-a86a-6f6a2cfd263b",
       
         "fanId":"d1b90c9a-6700-4fed-a220-605fb746cfbf"
        

        
    }
}
    
             * */			
		}else if(action.equals("buddyUnFanOfToBuddy")){
			 
			hubReq=new HubRequest(60);
			 hubReq.setMsgType(60);
			 map.put("userId", userId);
			 map.put("fanId", fanId);			
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBuddy=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBuddy);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBuddy, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
		}else  if(action.equals("buddyUnFanToBoardnew")){
			 hubReq=new HubRequest(45);
			 hubReq.setMsgType(45);
			 map.put("userId", fanId);
			 map.put("boardId", userId);
			 hubReq.setRequestParam(map);
			 String buddyUnFanToBoardString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("buddyFanToBoardString"+buddyUnFanToBoardString);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 FanResponse fanResponse= gson.fromJson(buddyUnFanToBoardString, FanResponse.class);
			 System.out.println("buddyFanToBoardString"+fanResponse.getResults().getBecomeunfan());
			 ob=fanResponse;
			
		}
		
		
		
	}
	return ob;
	
}



@RequestMapping(value="/createRoaster", method=RequestMethod.GET)
public @ResponseBody ModelAndView createRoaster(HttpServletRequest request,@RequestParam String bid) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	if(session != null){
		
		UUID userId=(UUID) session.getAttribute("USRID");
		// model=new ModelAndView("createRoaster");
		model=new ModelAndView("createRoaster2");
		request.setAttribute("BoardId",bid);
		
		
		hubReq=new HubRequest();
		 hubReq.setMsgType(40);
		 ModelMap map=new ModelMap();			
		 map.put("userId", userId);			 
		 map.put("boardId", bid);
		 hubReq.setRequestParam(map);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoarddetail, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
			 {
				//*******************************  for getting user boards   ******************************
				// model= new ModelAndView("boards");					
				 model.addObject("BoradInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				//*******************************************************   Around you details	 *************************************************
				 hubReq=new HubRequest();
				 hubReq.setMsgType(77);
				 BoardSearchRequest searchReq= new BoardSearchRequest();
				 String userlocation=(String) session.getAttribute("USRLocation");

				 System.out.println("userlocation"+userlocation);
				 if(userlocation!=null)
				 {
					if(userlocation.length()>3)
					{
						 searchReq.setLatlang(userlocation);
					}else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					}
				 }else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				 }
				
				 
				 searchReq.setStartNode("0");
				 searchReq.setEndNode("4");
				 searchReq.setCategory("Matches");
				 hubReq.setRequestParam(searchReq);
			    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
				
				 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
				 {
					 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
				 }
				 
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(22);
				 if(userlocation!=null)
				 {
					if(userlocation.length()>3)
					{
						 searchReq.setLatlang(userlocation);
						 System.out.println("user location setttt");
					}else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 1");
					}
				 }else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 2");
				 }
				
				 searchReq.setStartNode("0");
				 searchReq.setEndNode("4");
				 searchReq.setCategory("League");
				 hubReq.setRequestParam(searchReq);
			    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("board result : "+strboardlist);
				 if(strboardlist!=null)
				 {
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
				 		
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
				 }
				 
				 searchReq.setCategory("Team");
				 //searchReq.setLatlang("17.3700,78.4800");
				 if(userlocation!=null)
				 {
					if(userlocation.length()>3)
					{
						 searchReq.setLatlang(userlocation);
					}else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					}
				 }else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				 }
				 hubReq.setRequestParam(searchReq);
				 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("board result : "+strTeamlist);
				 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
				 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
				 
				 if(strTeamResponse.getResults().getSearchResponse()!=null)
				 {
					 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
					 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
				 }
				 
				 hubReq.setMsgType(23);
				 searchReq.setCategory("");
				 //searchReq.setLatlang("17.3700,78.4800");
				 if(userlocation!=null)
				 {
					if(userlocation.length()>3)
					{
						 searchReq.setLatlang(userlocation);
					}else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					}
				 }else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				 }
				 hubReq.setRequestParam(searchReq);
				 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("board result : "+strbuddyresponse);
				 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
				 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
				 if(buddyResponse.getResults().getSearchResponse()!=null)
				 {
					 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
					 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
				 }
				 
				 //*****************************************************************************************************************
				 hubReq.setMsgType(79);
				 searchReq.setCategory("Merchants");
				 //searchReq.setLatlang("17.3700,78.4800");
				 if(userlocation!=null)
				 {
					if(userlocation.length()>3)
					{
						 searchReq.setLatlang(userlocation);
					}else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					}
				 }else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				 }
				 hubReq.setRequestParam(searchReq);
				 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
				 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
				 {
					 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
				 }
				
				/* hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }*/
				 
				 ModelMap neweventmap=new ModelMap();
				 neweventmap.put("userId", bid);
				 neweventmap.put("loggedUserId", userId);
				 neweventmap.put("startNode", 0);
				 neweventmap.put("endNode", 20);
				 hubReq= new HubRequest();
				 hubReq.setMsgType(222);
				 hubReq.setRequestParam(neweventmap);
				 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
				 if(strneweventlist!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
					 {
						 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
						 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
					 }
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not avalable");
			 }
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not avalable");
		 }
		
		
		
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

	}
	
	return model;
	
}


@RequestMapping(value="/roster", method=RequestMethod.GET)
public @ResponseBody ModelAndView getRosterDetails(HttpServletRequest request,@RequestParam String bid) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	if(session != null ){
		
		UUID userId=(UUID) session.getAttribute("USRID");
		
		 hubReq=new HubRequest();
		 //hubReq.setMsgType(63);
		 hubReq.setMsgType(187);
		 ModelMap modelMap=new ModelMap();
		 modelMap.put("boardId", bid);
		 hubReq.setRequestParam(modelMap);
		 
		 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
		 if(resp !=null && resp.getRequestStatus().equals("0")){
			 
			 ResponseType results=resp.getResults();
			 if(results != null ){
				 model=new ModelAndView("roaster");
				 List<Roaster> roasters=results.getRosterList();
				 if(roasters.size() >0){
					 request.setAttribute("Roasters", roasters);
					 ModelMap rosterMap=new ModelMap();
					 hubReq=new HubRequest(48);
					 hubReq.setMsgType(48);
					 rosterMap.put("startNode", 0);
					 rosterMap.put("endNode", 100);
					 rosterMap.put("rosterId", roasters.get(0).getRosterId());
					 rosterMap.put("feedHitUserId", userId);
					 System.out.println("roterid : "+rosterMap);
					 hubReq.setRequestParam(rosterMap);
	
					 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
					 if(hubResponse !=null){
						 ResponseType results1=hubResponse.getResults();
						 if(results1 != null){
							RoasterResponseById roasterResponseById=results1.getRosterInfo();
							
							request.setAttribute("RoasterResponseById", roasterResponseById);
							
							
							 
							 hubReq=new HubRequest();
							 //hubReq.setMsgType(48);
							 hubReq.setMsgType(188);// roster details based uisng cassandra
							 ModelMap rosterMap2=new ModelMap();
							 rosterMap2.put("rosterId",roasters.get(0).getRosterId() );
							 rosterMap2.put("startNode",0 );
							 rosterMap2.put("endNode",100 );
							 
							 hubReq.setRequestParam(rosterMap2);

							 String roasterResponseByIdStringResult=cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(roasterResponseByIdStringResult!=null){
								 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdStringResult, HubResponse.class);
									
								 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterInfo()!=null){
									 
										RoasterResponseById roasterResponseById2=rosterhubResponse.getResults().getRosterInfo();
										request.setAttribute("RoasterMemberList", roasterResponseById2);
										
								 }
									
							 }
							
							 
							 
							// Print details
							 
			                 hubReq=new HubRequest();
							 
							 hubReq.setMsgType(267);
							 ModelMap rosterMapprint=new ModelMap();
							 rosterMapprint.put("rosterId",roasters.get(0).getRosterId());
							 
							 hubReq.setRequestParam(rosterMapprint);

							 String roasterResponseprint=cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(roasterResponseprint!=null){
								 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseprint, HubResponse.class);
									
								 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterPrintDetails()!=null){
									 
										Roaster rosterprint=rosterhubResponse.getResults().getRosterPrintDetails();
										
										model.addObject("Rosterprint", rosterprint);
										model.addObject("RosterCreatedDate", rosterprint.getRosterCreatedDate());
										
										Date date=new Date();
										SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
										model.addObject("PrintDate", sdf.format(date));
								 }
									
							 }
							
							
							hubReq=new HubRequest();
							 hubReq.setMsgType(99);
							 ModelMap modelMap5=new ModelMap();
							 //modelMap5.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");		
							 modelMap5.put("rosterId", roasters.get(0).getRosterId());
							 hubReq.setRequestParam(modelMap5);
							 String bowler=cricketSocialRestTemplateService.userRegistration(hubReq);
							 HubResponse bowlingPerformance= GsonConverters.getGsonObject().fromJson(bowler, HubResponse.class);
							 if(bowlingPerformance!=null && bowlingPerformance.getResults()!=null)
							 {
								 model.addObject("BowlingPerformance", bowlingPerformance.getResults().getBowlingPerformance());
							 }
							
							 
							 hubReq=new HubRequest();
							 hubReq.setMsgType(98);
							 ModelMap modelMap6=new ModelMap();
							 //modelMap6.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");
							 modelMap6.put("rosterId", roasters.get(0).getRosterId());
							 hubReq.setRequestParam(modelMap6);
							 String batting=cricketSocialRestTemplateService.userRegistration(hubReq);
							 HubResponse battingPerformance= GsonConverters.getGsonObject().fromJson(batting, HubResponse.class);
							 if(battingPerformance!=null && battingPerformance.getResults()!=null)
							 {
								 model.addObject("BattingPerformance", battingPerformance.getResults().getBattingPerformance());
							 }
							 
							 
							 hubReq=new HubRequest();
								hubReq.setMsgType(97);
								 ModelMap map2=new ModelMap();			
								 map2.put("rosterId", roasters.get(0).getRosterId());			 
								 map2.put("boardId", bid);
								 map2.put("attachmentType", "video");
								 hubReq.setRequestParam(map2);
								 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
								
								 if(strBoarddetail2!=null)
								 {
									 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
									if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
									{
										model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
										
									}
								 }	
								 
								 hubReq=new HubRequest();
									hubReq.setMsgType(96);
									 ModelMap map4=new ModelMap();			
									 map4.put("rosterId", roasters.get(0).getRosterId());			 
									 map4.put("boardId", bid);
									 map4.put("attachmentType", "image");
									 hubReq.setRequestParam(map4);
									 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
									
									 if(strBoarddetail2!=null)
									 {
										 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
										if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
										{
											model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
											
										}
									 }	
									 
							 
							 
							
						 }
					 }
					 
					 
					 
					 
					
					 
					   
					 
					 
			 	}
				 
				 
				 
				 
				 System.out.println("board details"+userId);
				 HubRequest hubReq1=new HubRequest(40);
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }	
				 
				 
				/* hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 */
				/* hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }*/
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				 
				 	 ModelMap neweventmap=new ModelMap();
					// neweventmap.put("userId", "1dfcf4f8-87e7-4849-986b-1a35777073cf");
					 neweventmap.put("userId", bid);
					 neweventmap.put("loggedUserId", userId);
					 neweventmap.put("startNode", 0);
					 neweventmap.put("endNode", 20);
					 hubReq= new HubRequest();
					 hubReq.setMsgType(222);
					 hubReq.setRequestParam(neweventmap);
					 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 if(strneweventlist!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
						 {
							 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
							 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
						 }
					 }
				 
				 
				 
				 
				 
				 
				 
			//********************************************************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map=new ModelMap();
				 map.put("userId", userId);
				 map.put("startNode", 0);
				 map.put("endNode", 200);
				  hubReq.setRequestParam(map);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
				 
				 
				 
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
		 }
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
		 } 
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return model;
	
}




@RequestMapping(value="/saveRoaster", method=RequestMethod.POST)
//public @ResponseBody ModelAndView saveRoaster3(HttpServletRequest request,@ModelAttribute RosterProfile rosterProfile) throws CSException
public ModelAndView updateRostor3(HttpServletRequest request, EditRoster editRoster)throws CSException
{
	ModelAndView model=null;
	HttpSession session=request.getSession(true);	
	if(session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		List<ModelMap> userIdlist=new ArrayList<ModelMap>();
		RosterProfile profile= new RosterProfile();
		profile.setBoardId(editRoster.getBoardId());
		profile.setCratedBy(userId+"");
		profile.setRosterName(editRoster.getRosterName());
		
		for(String id : editRoster.getTeamUserId())
		{
			
			
			if(editRoster.getCaptain().endsWith(id))
			{
				profile.setCaptain(editRoster.getCaptain());
			}else if(editRoster.getVice_captian().endsWith(id))
			{
				profile.setVice_captian(id);
			}else if(editRoster.getCoach().endsWith(id))
			{
				profile.setCoach(id);
			}else{
				 ModelMap map=new ModelMap();	
				 map.put("userId", id);
				 userIdlist.add(map);
			}
		}
		//editRoster.setRosterUserMapList(userIdlist);
		profile.setRosterUserMapList(userIdlist);
		hubReq=new HubRequest();
		 hubReq.setMsgType(47);
		 hubReq.setRequestParam(profile);
		 System.out.println(editRoster);
		 
		 //model=new ModelAndView(
		 String strRosterResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strRosterResponse!=null)
		 {
			 //rosterDetails?rosterId=2654b324-db42-4032-a726-ae49a5dec407&bId=cedddcd0-76e3-4f76-8e6f-eb2e893d9fcb
			 HubResponse resp= GsonConverters.getGsonObject().fromJson(strRosterResponse, HubResponse.class);
			 	if(resp!=null && resp.getResults()!=null && resp.getResults().getRosterList()!=null)
			 	{
			 		
			 	//	/rosterInfomation
			 		//model=new ModelAndView("redirect:/rosterDetails?rosterId="+resp.getResults().getRosterList().get(0).getRosterId()+"&bId="+editRoster.getBoardId());
			 		model=new ModelAndView("redirect:/rosterInfomation?rosterId="+resp.getResults().getRosterList().get(0).getRosterId()+"&bId="+editRoster.getBoardId());
			 	}else{
			 		 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
			 	}
			  
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		 }
		
		
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	
	return model;
	
}
	
@RequestMapping(value="/saveRoaster2", method=RequestMethod.POST)
public @ResponseBody ModelAndView saveRoaster2(HttpServletRequest request,@ModelAttribute RosterProfile rosterProfile) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	if(session != null){
		UUID userId=(UUID) session.getAttribute("USRID");
		 hubReq=new HubRequest(47);
		 hubReq.setMsgType(47);
		 
		 if(rosterProfile.getRoasterMembers()!=null){
			 List<String> boardCoOwnerList = Arrays.asList(rosterProfile.getRoasterMembers().split(","));
			List<ModelMap> m = new ArrayList<ModelMap>();
			 for(String k : boardCoOwnerList)
			 {
				 ModelMap map=new ModelMap();
				 map.put("userId", k);
				 m.add(map);
			 }
			 
			 rosterProfile.setRosterUserMapList(m);
		 }
		 
		 
		 hubReq.setRequestParam(rosterProfile);
		 
		 String roasterSaveResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 HubResponse resp= GsonConverters.getGsonObject().fromJson(roasterSaveResponse, HubResponse.class);
		 if(resp !=null && resp.getRequestStatus().equals("0")){
			 
			 ResponseType results=resp.getResults();
			 if(results != null ){
				 List<Roaster> roasters=results.getRosterList();
				 model=new ModelAndView("redirect:/rosterDetails.htm?rosterId="+roasters.get(0).getRosterId()+"&bId="+rosterProfile.getBoardId());
			
			 }
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return model;
	
}


/*@RequestMapping(value="/deleteRoster", method=RequestMethod.POST)
public @ResponseBody ModelAndView deleteRoster(HttpServletRequest request,@RequestParam String rosterId,@RequestParam String bId) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	if(session != null){
		UUID userId=(UUID) session.getAttribute("USRID");
		 hubReq=new HubRequest(62);
		 hubReq.setMsgType(62);
		 
		 ModelMap map=new ModelMap();
		 map.put("rosterId", rosterId);
		 hubReq.setRequestParam(map);
		 
		 String roasterSaveResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 DeleteRosterResponse deleteResp= GsonConverters.getGsonObject().fromJson(roasterSaveResponse, DeleteRosterResponse.class);
		 
		 if(deleteResp !=null && deleteResp.getRequestStatus() == 0){
			 
			 Map<String,String> resultMap=deleteResp.getResults();
			 if(resultMap != null ){
				 
				 String msg=resultMap.get("response");
				 
				 hubReq=new HubRequest(63);
				 hubReq.setMsgType(63);
				 ModelMap modelMap=new ModelMap();
				 modelMap.put("boardId", bId);
				 hubReq.setRequestParam(modelMap);
				 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
				 if(resp !=null && resp.getRequestStatus().equals("0")){
					 
					 ResponseType results=resp.getResults();
					 if(results != null ){
						 
						 List<Roaster> roasters=results.getRosterList();
						 request.setAttribute("Roasters", roasters);
						 
						 hubReq=new HubRequest(48);
						 hubReq.setMsgType(48);
						 
						 
						 modelMap.put("rosterId", roasters.get(0).getRosterId());
						 hubReq.setRequestParam(modelMap);

						 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
						 
						 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
						 if(hubResponse !=null){
							 
							 model=new ModelAndView("roaster");
							 ResponseType results1=resp.getResults();
							 if(results1 != null){
								RoasterResponseById roasterResponseById=results1.getRosterInfo();
								request.setAttribute("RoasterResponseById", roasterResponseById);
							 }
						 }else {
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");

						 }
					 }
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
				 }
				 
				 
			 }
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
		 }
		 
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return model;
	
}
*/
@RequestMapping(value="/deleteRoster", method=RequestMethod.GET)
public @ResponseBody ModelAndView deleteRoster(HttpServletRequest request,@RequestParam String rosterId,@RequestParam String bid) throws CSException
{
  HttpSession session=request.getSession(true);
  ModelAndView model=null;
  if(session != null){
      UUID userId=(UUID) session.getAttribute("USRID");
       hubReq=new HubRequest(62);
       hubReq.setMsgType(62);
       
       ModelMap map=new ModelMap();
       map.put("rosterId", rosterId);
       map.put("boardId", bid);
       hubReq.setRequestParam(map);
       
       String roasterSaveResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
      
       DeleteRosterResponse deleteResp= GsonConverters.getGsonObject().fromJson(roasterSaveResponse, DeleteRosterResponse.class);
       
       if(deleteResp !=null && deleteResp.getRequestStatus() == 0){
           
           Map<String,String> resultMap=deleteResp.getResults();
           if(resultMap != null ){
               
               String msg=resultMap.get("response");
               
               hubReq=new HubRequest(63);
               hubReq.setMsgType(63);
               ModelMap modelMap=new ModelMap();
               modelMap.put("boardId", bid);
               hubReq.setRequestParam(modelMap);
               String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
               HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
               if(resp !=null && resp.getRequestStatus().equals("0")){
                   
                   ResponseType results=resp.getResults();
                   if(results != null ){
                       
                       List<Roaster> roasters=results.getRosterList();
                      // model=new ModelAndView("redirect:/"+roasters.get(0).getRosterId()+"");
                       model=new ModelAndView("redirect:/roster?&bid="+bid);
                      /* request.setAttribute("Roasters", roasters);
                       
                       hubReq=new HubRequest(48);
                       hubReq.setMsgType(48);
                       
                       
                       modelMap.put("rosterId", roasters.get(0).getRosterId());
                       hubReq.setRequestParam(modelMap);

                       String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
                       
                       HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
                      BoardProfile board=new BoardProfile();
                      board.setBoardId(UUID.fromString(bid));
                      
                       
                       request.setAttribute("BoradInfo", board);
                       
                       if(hubResponse !=null){
                           
                           model=new ModelAndView("roaster");
                           ResponseType results1=resp.getResults();
                           if(results1 != null){
                              RoasterResponseById roasterResponseById=results1.getRosterInfo();
                              request.setAttribute("RoasterResponseById", roasterResponseById);
                           }
                       }else {
                           model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");

                       }*/
                   }
               }else{
                   model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
               }
               
               
           }
       }else{
           model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
       }
       
  }else{
      model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
  }
  
  return model;
  
}







@RequestMapping(value="/rosterDetails", method=RequestMethod.GET)
public @ResponseBody ModelAndView rosterDetails(HttpServletRequest request,@RequestParam String rosterId,@RequestParam String bId) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	UUID userId=(UUID) session.getAttribute("USRID");
	if(session != null && userId!=null){
		
			 hubReq=new HubRequest();
			 hubReq.setMsgType(48); // using solar
			 //hubReq.setMsgType(188);
			 ModelMap modelMap=new ModelMap();
			 modelMap.put("rosterId",rosterId );
			 modelMap.put("startNode",0 );
			 modelMap.put("endNode",100 );
			 modelMap.put("feedHitUserId", userId);
			 hubReq.setRequestParam(modelMap);

			 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
			
			 if(hubResponse !=null){
				 
				 model=new ModelAndView("roaster");
				 ResponseType results1=hubResponse.getResults();
				 if(results1 != null){
					RoasterResponseById roasterResponseById=results1.getRosterInfo();
					request.setAttribute("RoasterResponseById", roasterResponseById);
				 }
				 
				 
				 hubReq=new HubRequest();
				 //hubReq.setMsgType(48);
				 hubReq.setMsgType(188);// roster details based uisng cassandra
				 ModelMap rosterMap=new ModelMap();
				 rosterMap.put("rosterId",rosterId );
				 rosterMap.put("startNode",0 );
				 rosterMap.put("endNode",100 );
				 
				 hubReq.setRequestParam(rosterMap);

				 String roasterResponseByIdStringResult=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseByIdStringResult!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdStringResult, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterInfo()!=null){
						 
							RoasterResponseById roasterResponseById=rosterhubResponse.getResults().getRosterInfo();
							request.setAttribute("RoasterMemberList", roasterResponseById);
							
					 }
						
				 }
				
					 
				// Print details
				 
                 hubReq=new HubRequest();
				 
				 hubReq.setMsgType(267);
				 ModelMap rosterMapprint=new ModelMap();
				 rosterMapprint.put("rosterId",rosterId);
				 
				 hubReq.setRequestParam(rosterMapprint);

				 String roasterResponseprint=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseprint!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseprint, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterPrintDetails()!=null){
						 
							Roaster rosterprint=rosterhubResponse.getResults().getRosterPrintDetails();
							
							model.addObject("Rosterprint", rosterprint);
							model.addObject("RosterCreatedDate", rosterprint.getRosterCreatedDate());
							
							Date date=new Date();
							SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
							model.addObject("PrintDate", sdf.format(date));
					 }
						
				 }
				 
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(40);
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId",bId );
				 hubReq.setRequestParam(map);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					}
				 }	
				
				 hubReq=new HubRequest(63);
				 hubReq.setMsgType(63);
				 ModelMap modelMap1=new ModelMap();
				 modelMap1.put("boardId", bId);
				 hubReq.setRequestParam(modelMap1);
		
				 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
				 
				 
				 if(resp !=null && resp.getRequestStatus().equals("0")){
					 
					 ResponseType results=resp.getResults();
					 
					 System.out.println("results"+results.getRosterList().size());
					 
					 if(results != null ){
						 
						 List<Roaster> roasters=results.getRosterList();
						 request.setAttribute("Roasters", roasters);
						 
					 }
				 
				 }
				 hubReq=new HubRequest();
				 hubReq.setMsgType(99);
				 ModelMap modelMap5=new ModelMap();
				 //modelMap5.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");		
				 modelMap5.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap5);
				 String bowler=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse bowlingPerformance= GsonConverters.getGsonObject().fromJson(bowler, HubResponse.class);
				 if(bowlingPerformance!=null && bowlingPerformance.getResults()!=null)
				 {
					 model.addObject("BowlingPerformance", bowlingPerformance.getResults().getBowlingPerformance());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(98);
				 ModelMap modelMap6=new ModelMap();
				 //modelMap6.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");
				 modelMap6.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap6);
				 String batting=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse battingPerformance= GsonConverters.getGsonObject().fromJson(batting, HubResponse.class);
				 if(battingPerformance!=null && battingPerformance.getResults()!=null)
				 {
					 model.addObject("BattingPerformance", battingPerformance.getResults().getBattingPerformance());
				 }
				 
				 
				 hubReq=new HubRequest();
					hubReq.setMsgType(97);
					 ModelMap map2=new ModelMap();			
					 map2.put("rosterId", rosterId);			 
					 map2.put("boardId", bId);
					 map2.put("attachmentType", "video");
					 hubReq.setRequestParam(map2);
					 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail2!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
						if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
						{
							model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
							System.out.println("RoasterVideosList------>hubResponse2.getResults().getRosterAttachment()----> "+hubResponse2.getResults().getRosterAttachment().size());
							
						}
					 }	
					 
					 hubReq=new HubRequest();
						hubReq.setMsgType(96);
						 ModelMap map4=new ModelMap();			
						 map4.put("rosterId", rosterId);			 
						 map4.put("boardId", bId);
						 map4.put("attachmentType", "image");
						 hubReq.setRequestParam(map4);
						 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 if(strBoarddetail2!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
							if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
							{
								model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
								System.out.println("RoasterImageList-----> hubResponse2.getResults().getRosterAttachment()---> "+hubResponse2.getResults().getRosterAttachment().size());
								
							}
						 }	
						 
				 
				 
				 
				/* hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
				
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }
				 */
						 ModelMap neweventmap=new ModelMap();
							// neweventmap.put("userId", "1dfcf4f8-87e7-4849-986b-1a35777073cf");
							 neweventmap.put("userId", bId);
							 neweventmap.put("loggedUserId", userId);
							 neweventmap.put("startNode", 0);
							 neweventmap.put("endNode", 20);
							 hubReq= new HubRequest();
							 hubReq.setMsgType(222);
							 hubReq.setRequestParam(neweventmap);
							 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
							 if(strneweventlist!=null)
							 {
								 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
								 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
								 {
									 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
									 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
								 }
							 }
						 
						 
						 
						 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				 
				 
					//********************************************  Get board Details  ************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
							 System.out.println("board lidst------------------?>");
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
			 }else {
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");

			 }
		}else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	return model;
	
}






@RequestMapping(value="/becomeAFanCount", method=RequestMethod.POST)
public @ResponseBody String saveRoaster(HttpServletRequest request,@RequestBody BoardProfile boardProfile) throws CSException
	{
	
	 hubReq=new HubRequest(54);
	 hubReq.setMsgType(54);
	 
	 ModelMap modelMap=new ModelMap();
	 modelMap.put("boardId",boardProfile.getBoardId().toString());
	 hubReq.setRequestParam(modelMap);

	 String hitCountResponseString=cricketSocialRestTemplateService.userRegistration(hubReq);
	
	return hitCountResponseString;
		
	}

@RequestMapping(value="/buddy/{buddyName}/{buddyId}",method=RequestMethod.GET)
public ModelAndView getBuddyPublicProfile(HttpServletRequest request,@PathVariable String buddyId) throws CSException
{
	ModelAndView model=null;
	 HttpSession session = request.getSession(true);
	 if(session.getAttribute("USRID")!=null)
	 {
		 
		 UUID userid=(UUID) session.getAttribute("USRID");
		 System.out.println("session userid : "+userid);
		 System.out.println("required userid : "+buddyId);
		 UUID buddid=UUID.fromString(buddyId);
		 
		 if(!userid.equals(buddid))
		 {
			 System.out.println("Different users");

		 gsonobj=GsonConverters.getGsonObject();		
		 hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);			
			 ModelMap modelMap=new ModelMap();
			 modelMap.put("userId",buddyId);
			 modelMap.put("active", 0);
			 modelMap.put("isYourBuddy", false);
			 hubReq.setRequestParam(modelMap);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
			 
			  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
			  
			 if(profile!= null &&  profile.getResults()!=null)
			 {
				 
				 
				if(profile.getResults().getItemsFound()!=null && profile.getResults().getItemsFound().length>0)
				{
				//	BuddyPublicFirstName
					session.removeAttribute("BuddyPublicFirstName");
					session.removeAttribute("BuddyPublicLastName");
					session.removeAttribute("BuddyPublicIMG");
					session.removeAttribute("BuddyPublicUserId");
					session.removeAttribute("BuddyPublicFanCount");
					session.removeAttribute("BuddyPublicBoradFanCount");
					
					//Remove value from the session.
					session.removeValue("BuddyPublicFirstName");
					session.removeValue("BuddyPublicLastName");
					session.removeValue("BuddyPublicIMG");
					session.removeValue("BuddyPublicUserId");
					session.removeValue("BuddyPublicFanCount");
					session.removeValue("BuddyPublicBoradFanCount");
					
					session.setAttribute("BuddyPublicFirstName", profile.getResults().getItemsFound()[0].getFullName());
					session.setAttribute("BuddyPublicIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
					session.setAttribute("BuddyPublicUserId", profile.getResults().getItemsFound()[0].getUserId());
					session.setAttribute("BuddyPublicFanCount", profile.getResults().getItemsFound()[0].getUserFanCount());
					session.setAttribute("BuddyPublicBoradFanCount", profile.getResults().getItemsFound()[0].getBuddyFansBoardsCount());
					System.out.println("buddy fan count : "+profile.getResults().getItemsFound()[0].getUserFanCount());
						model=new ModelAndView("buddyPublicProfile");	
						
						
						 hubReq=new HubRequest();
						// hubReq.setMsgType(8);
						 hubReq.setMsgType(189);						
						 Feeds feed= new Feeds();
						 feed.setStartNode("0");
						 feed.setEndNode("50");
					//	 feed.setUserId(userid.toString());
						 feed.setUserId(buddyId);
						 feed.setFeedHitUserId(userid.toString());
						// feed.setPublicProfileUserId(userid.toString());
						 feed.setPublicProfileUserId(buddyId.toString());
						 hubReq.setRequestParam(feed);
						 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
						 
						 HubResponse resp= GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
						 model.addObject("FeedsList", resp.getResults().getFeedResponse().getFeedList());
						 
					 
						 
						 hubReq= new HubRequest();
						 hubReq.setMsgType(74);
						 ModelMap map2=new ModelMap();
						 map2.put("inviteeId",buddyId);
						 map2.put("invitorId", userid);						
						 hubReq.setRequestParam(map2);
						 String buddyDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean friend=false;
						 if(buddyDetails!=null)
						 {
							 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(buddyDetails, HubResponse.class);
							 if(buddyResponse!=null)
							 {
								 if(buddyResponse.getRequestStatus()!=null && buddyResponse.getRequestStatus().endsWith("4"))
								 {
									 friend=true;
								 }
							 }
							 session.setAttribute("BuddyFriendRequest", buddyResponse);
							 
						 }
						// friend=true;
						
						 session.setAttribute("BuddyFriend", friend);
						 
						 hubReq= new HubRequest();
						 hubReq.setMsgType(75);
						 ModelMap map3=new ModelMap();
						 
						 /*
						  
						  messageType=75
						  parameters 
						  
						   1) userId= public profile userid
						   2) buddyId = who login 
						  
						  * */
						 map3.put("userId",buddyId);
						 map3.put("buddyId", userid);						
						 hubReq.setRequestParam(map3);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 System.out.println("buddyFanResponse.getRequestStatus() --> "+buddyFanResponse.getRequestStatus());
								 if(buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
					
						 System.out.println("fan request : "+buddyFan);
						 session.setAttribute("BuddyFanReq", buddyFan);
						 String userlocation=(String) session.getAttribute("USRLocation");
						 
						
						 BoardSearchRequest searchReq= new BoardSearchRequest();
						
						 hubReq=new HubRequest();
						 hubReq.setMsgType(77);
						 System.out.println("userlocation"+userlocation);
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						 }
						
						 
						 searchReq.setStartNode("0");
						 searchReq.setEndNode("4");
						 searchReq.setCategory("Matches");
						 hubReq.setRequestParam(searchReq);
					    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
						
						 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
						 {
							 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
						 }
						 
						 
						 hubReq=new HubRequest();
						 hubReq.setMsgType(22);
						 //session.setAttribute("USRLocation", userProfile.getLatLang());
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 }
						
						 searchReq.setStartNode("0");
						 searchReq.setEndNode("4");
						 searchReq.setCategory("League");
						 hubReq.setRequestParam(searchReq);
					    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
						
						 if(strsearchResponse.getResults().getSearchResponse()!=null)
						 {
							 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
						 }
						 
						 searchReq.setCategory("Team");						
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						 }
						 hubReq.setRequestParam(searchReq);
						 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
						 
						 if(strTeamResponse.getResults().getSearchResponse()!=null)
						 {
							 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
						 }
						 
						 hubReq.setMsgType(23);
						 searchReq.setCategory("");
						 //searchReq.setLatlang("17.3700,78.4800");
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						 }
						 hubReq.setRequestParam(searchReq);
						 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
						 if(buddyResponse.getResults().getSearchResponse()!=null)
						 {
							 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
							 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
						 }
						 
						 hubReq.setMsgType(79);
						 searchReq.setCategory("Merchants");
						 //searchReq.setLatlang("17.3700,78.4800");
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						 }
						 hubReq.setRequestParam(searchReq);
						 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
						 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
						 {
							 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
							 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
						 }
						
						
						
						 hubReq= new HubRequest();
						 hubReq.setMsgType(41);
						 ModelMap map=new ModelMap();
						 map.put("userId", userid);
						 map.put("startNode", 0);
						 map.put("endNode", 200);
						  hubReq.setRequestParam(map);
							 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
							 GsonBuilder builder = new GsonBuilder();
							 Gson gson = builder.create();
							 if(strBoardList!=null)
							 {
								 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
								 if(hubResponse!=null && hubResponse.getResults()!=null)
								 {
									 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
								 }else{
									 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
								 }
							 }else{
								 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
							 }
						
					 
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				} 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }else{
			 model=new ModelAndView("redirect:/");	 
		 }
			 
	 }else{
		 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

	 }
	 return model;
}

@RequestMapping(value="/buddyFriends/{buddyName}/{buddyId}", method=RequestMethod.GET)
public ModelAndView getBuddyFriends(HttpServletRequest request, @PathVariable String buddyId) throws CSException
{

	
	HttpSession session=request.getSession(true);

	UUID userId=(UUID) session.getAttribute("USRID");
	ModelAndView model=null;
	if(userId != null){
		//model.setViewName("buddies");
		model=new ModelAndView("BuddyPublicFriends");
		hubReq=new HubRequest(32);
		 hubReq.setMsgType(32);
		 ModelMap map=new ModelMap();
		 map.put("userId", buddyId);
		 map.put("startNode", 0);
		 map.put("endNode", 10);
		 hubReq.setRequestParam(map);
		 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		 model.addObject("buddyId", buddyId);
		GsonBuilder builder = new GsonBuilder();
	    Gson gson = builder.create();
	    
	    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
		
	    SearchResults searchResults=response1.getResults();
	    SearchResponse searchResponse=searchResults.getSearchResponse();
	   
	   if(searchResponse !=null){ 
	    List<UserProfile> userList=searchResponse.getUserList();
	    model.addObject("Buddies", userList);
	   }else{
		   model.addObject("Buddies", new ArrayList<UserProfile>());   
	   }
		
	   model.addObject("userCount", searchResponse.getUserCount());
		
		hubReq=new HubRequest(34);
		 hubReq.setMsgType(34);
		 
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId.toString());
		 map1.put("startNode", 0);
		 map1.put("endNode", 10);
		 hubReq.setRequestParam(map);
		 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	
	    SearchMainResponse response2=gson.fromJson(invitaionResponse, SearchMainResponse.class);
	    System.out.println("response2"+response2);
	    SearchResults searchResults1=response2.getResults();
	    SearchResponse searchResponse1=searchResults1.getSearchResponse();
	    List<UserProfile> invitationUsers=searchResponse1.getUserList();
		model.addObject("Invitations", invitationUsers);
		
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		
		
		 
		 
		
		hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		// searchReq.setLatlang("13.082680199999999,80.2707184");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
		 }
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strsearchResponse= gson.fromJson(strboardlist, HubResponse.class); 
		
		 if(strsearchResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 searchReq.setCategory("Team");
		// searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strTeamResponse= gson.fromJson(strTeamlist, HubResponse.class); 
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		// searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse buddyResponse= gson.fromJson(strbuddyresponse, HubResponse.class); 
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 
		 
		 
		//*****************************************************************************************************************
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map5=new ModelMap();
		 map5.put("userId", userId);
		 map5.put("startNode", 0);
		 map5.put("endNode", 200);
		  hubReq.setRequestParam(map5);
			 String strBoardList1=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder1 = new GsonBuilder();
			 Gson gson1 = builder1.create();
			 if(strBoardList1!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList1, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		 
		 
		 
		
		
	}else{
		model=new ModelAndView("redirect:/login.htm");
	}

	
	
	
	return model;
	

}

@RequestMapping(value="/editRoster", method=RequestMethod.GET)
public ModelAndView editRoster(HttpServletRequest request,@RequestParam String rid) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	if(session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		 ModelMap rosterMap=new ModelMap();
		 hubReq=new HubRequest(48);
		 hubReq.setMsgType(48);
		 rosterMap.put("startNode", 0);
		 rosterMap.put("endNode", 100);
		 rosterMap.put("rosterId", rid);
		 hubReq.setRequestParam(rosterMap);

		 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
		 if(hubResponse !=null && hubResponse.getResults()!=null && hubResponse.getResults().getRosterInfo()!=null){
			
				RoasterResponseById roasterResponseById=hubResponse.getResults().getRosterInfo();
				model= new ModelAndView("EditRoster");
			//	model.addObject("RoasterResponseById", roasterResponseById);
				//model.addObject("RoasterMembers", roasterResponseById.getRosterMembers());
				
				 hubReq=new HubRequest();
				 hubReq.setMsgType(188);// roster details based uisng cassandra
				 ModelMap rosterMap2=new ModelMap();
				 rosterMap2.put("rosterId",rid );
				 rosterMap2.put("startNode",0 );
				 rosterMap2.put("endNode",100 );
				 
				 hubReq.setRequestParam(rosterMap2);

				 String roasterResponseByIdStringResult=cricketSocialRestTemplateService.userRegistration(hubReq);
				 RoasterResponseById roasterResponseById2=null;
				 if(roasterResponseByIdStringResult!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdStringResult, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterInfo()!=null){
						 
						    roasterResponseById2=rosterhubResponse.getResults().getRosterInfo();
							
							model.addObject("RoasterMembers", roasterResponseById2.getRosterMembers());
							model.addObject("RoasterResponseById", roasterResponseById2);
							
							for(RoasterMemembers member : roasterResponseById2.getRosterMembers())
							{
								if(member.getRosterRole().endsWith("Captian"))
								{
									model.addObject("Captian", member);
								}
								if(member.getRosterRole().endsWith("Coach"))
								{
									model.addObject("Coach", member);
								}
								if(member.getRosterRole().endsWith("vice_Captian"))
								{
									model.addObject("vice_Captian", member);
								}
							}
							
							
						/*	ModelMap neweventmap=new ModelMap();
							 neweventmap.put("userId", roasterResponseById2.get);
							 neweventmap.put("loggedUserId", userId);
							 neweventmap.put("startNode", 0);
							 neweventmap.put("endNode", 20);
							 hubReq= new HubRequest();
							 hubReq.setMsgType(222);
							 hubReq.setRequestParam(neweventmap);
							 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
							 if(strneweventlist!=null)
							 {
								 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
								 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
								 {
									 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
									 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
								 }
							 }
						 */
						 
							
							
					 }
						
				 }
				
					 
				 
				
				
				
				
				
				
			//
			//	System.out.println("roasterResponseById.getRosterDetails().getBoardId() ----------> "+roasterResponseById.getRosterDetails().getBoardId());
				hubReq=new HubRequest();
				 hubReq.setMsgType(40);
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				// map.put("boardId", roasterResponseById.getRosterDetails().getRosterBoardDto().getBoardId());
				 map.put("boardId", roasterResponseById2.getRosterDetails().getBoardId());
				 hubReq.setRequestParam(map);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse2= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse2!=null && hubResponse2.getResults().getBoardStatusDetail()!=null && hubResponse2.getResults().getBoardStatusDetail().size()>0)
					{										
						 model.addObject("BoradInfo", hubResponse2.getResults().getBoardStatusDetail().get(0));
					}
				 }
				 
				 /*hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }
				 
				 */
				 
				 
				 
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				 
				
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			 
	}else{
		 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return model;
}

@RequestMapping(value="/updateRostor", method=RequestMethod.POST)
public ModelAndView updateRostor(HttpServletRequest request, EditRoster editRoster)throws CSException
{
	System.out.println("roster : "+editRoster.getRosterName());
	ModelAndView model=null;
	
	/*
	 
	     "msgType": 66,

    "requestParam": {
        "boardId": "6185c8e1-27be-44fa-833f-98a1790207b8",
        "rosterName": "Fire Boys",
rosterId:"b3581e03-9e29-4b2c-8687-6202266d7bf8",
        "captain": "1dfcf4f8-87e7-4849-986b-1a35777073cf",
        "vice_captian": "2766cc60-8267-4afc-a86a-6f6a2cfd263b",
        "createdBy": "232ed1b6-caf8-4ff3-a7ef-e7aa2f0f9c17",
        "coach": "bdf7ecef-632b-40d0-a7d9-c677e856a1fa",
        "rosterUserMapList": [
            {
                "userId": "ddda7716-1436-4332-bfd4-f10a731c74f0"
            },
            {
                "userId": "bdf7ecef-632b-40d0-a7d9-c677e856a1fa"
            },
            {
                "userId": "d1b90c9a-6700-4fed-a220-605fb746cfbf"
            },
            {
                "userId": "991375c1-ed27-4ebd-922e-925e986564dd"
            },
 {
                "userId": "a3c0dce6-f723-4ae6-b718-5a06645d1352"
            }
        ]
    }
}
	  
	  
	  
	 * */
	
	HttpSession session=request.getSession(true);	
	if(session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		
		List<Object> userIdlist=new ArrayList<Object>();
		List<String> memberList=new ArrayList<String>();
		for(String id : editRoster.getTeamUserId())
		{
			
			
			if(editRoster.getCaptain().endsWith(id))
			{
				
			}else if(editRoster.getVice_captian().endsWith(id))
			{
				
			}else if(editRoster.getCoach().endsWith(id))
			{
				
			}else{
				 ModelMap map=new ModelMap();	
				 map.put("userId", id);
				 userIdlist.add(map);
				 memberList.add(id);
			}
		}
		editRoster.setRosterUserMapList(userIdlist);
		editRoster.setMemberList(memberList);
		hubReq=new HubRequest();
		 hubReq.setMsgType(66);
		 hubReq.setRequestParam(editRoster);
		 System.out.println(editRoster);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBoarddetail!=null)
		 {
			 //rosterDetails?rosterId=2654b324-db42-4032-a726-ae49a5dec407&bId=cedddcd0-76e3-4f76-8e6f-eb2e893d9fcb
			 model=new ModelAndView("redirect:/rosterDetails?rosterId="+editRoster.getRosterId()+"&bId="+editRoster.getBoardId()); 
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		 }
		
		
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	
	return model;
}

@RequestMapping(value="/boardProfile", method=RequestMethod.GET)
public ModelAndView boardProfile(@RequestParam String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);	
		if(session.getAttribute("USRID")!=null)
		{
			UUID userId=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", bid);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 model= new ModelAndView("editBoard");
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse2!=null && hubResponse2.getResults().getBoardStatusDetail()!=null && hubResponse2.getResults().getBoardStatusDetail().size()>0)
				{		
					
					 model.addObject("BoradInfo", hubResponse2.getResults().getBoardStatusDetail().get(0));
					 model.addObject("BoardCoOwnerList", hubResponse2.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList());
					 model.addObject("BoardCoordinatorList", hubResponse2.getResults().getBoardStatusDetail().get(0).getBoardCoordinatorList());
					
				}
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
			 
			
				String firstName=(String) session.getAttribute("USRFNA");
				Map<String,String> map2=new HashMap<String,String>();
				map2.put("userId", userId.toString());
				hubReq=new HubRequest(38);
				 hubReq.setMsgType(38);
				 hubReq.setRequestParam(map2);
				 String boardRequestParametersResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("boardRequestParametersResponse  "+boardRequestParametersResponse);
				
				 if(boardRequestParametersResponse != null){
					 
					 BoardAttrbutesResponse boardResult=GsonConverters.getGsonObject().fromJson(boardRequestParametersResponse, BoardAttrbutesResponse.class);
					 if(boardResult!= null){
						 BoardFormAttributes boardFormAttributes=boardResult.getResults().getBoardAttributes();
						 request.setAttribute("BoardFormAttributes",boardFormAttributes);
						 request.setAttribute("UserName", firstName);
						 System.out.println("boardRequestParametersResponse  "+boardFormAttributes.getPage_visibility().size());
						 
						
					 }
				 }else{
					 
				 }
				 				
				 hubReq=new HubRequest(37);
				 hubReq.setMsgType(37);
				 hubReq.setRequestParam(map=new ModelMap());
				 String strballPreferd =cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse ballResponse=GsonConverters.getGsonObject().fromJson(strballPreferd, HubResponse.class); 
				  List<BullPreferenceVO> ballPreferences=null;
				  if(ballResponse != null && ballResponse.getResults()!=null){
					 ballPreferences=ballResponse.getResults().getBallPrefenrenceList();	
				  }
				  model.addObject("BallPreferences",ballPreferences);
				  
				  /*-----------added--------by----dhanapriyanga---start*/
				  hubReq = new HubRequest();
				  hubReq.setMsgType(249);
				  String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq);		
				  if(contryCodeString != null){
					  HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
					  List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
					  model.addObject("countryCodes", countryCodes);

				  }
                  /*----------added--by---dhanapriyanga end--*/
				  hubReq= new HubRequest();
					 hubReq.setMsgType(41);
					 ModelMap map1=new ModelMap();
					 map1.put("userId", userId);
					 map1.put("startNode", 0);
					 map1.put("endNode", 200);
					  hubReq.setRequestParam(map1);
						 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
						 GsonBuilder builder = new GsonBuilder();
						 Gson gson = builder.create();
						 if(strBoardList!=null)
						 {
							 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
							 if(hubResponse!=null && hubResponse.getResults()!=null)
							 {
								 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
							 }else{
								 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
							 }
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}


@RequestMapping(value="/updateBoardProfile", method=RequestMethod.POST)
public ModelAndView updateBoardProfile(HttpServletRequest request, BoardProfile boardProfile) throws CSException
{

	
	ModelAndView model=null;
	HttpSession session=request.getSession(true);
	UUID userId=(UUID) session.getAttribute("USRID");
	System.out.println("boardProfile"+boardProfile.getBoardCoOwners());
	
	hubReq=new HubRequest(68);
	 hubReq.setMsgType(68);
	 String latlang=request.getParameter("latLang");
	 boardProfile.setLatlang(latlang);
	 System.out.println("boardProfile lat lng"+boardProfile.getLatlang());
	 System.out.println("boardProfile.getClassification() "+boardProfile.getClassification() );
	 
	 if(boardProfile.getLatlang().length()<3){
		 boardProfile.setLatlang(boardProfile.getOldlatLang());
	 }
	 
	 
	 if(boardProfile.getBoardImagefile() !=null){
		 try {
			//boardProfile.setBoardProfilePic(boardProfile.getBoardImagefile().getBytes());
			 String imageDataString= new sun.misc.BASE64Encoder().encode(boardProfile.getBoardImagefile().getBytes());
			 boardProfile.setImageData(imageDataString);
			 if(boardProfile.getBoardImagefile().getOriginalFilename()!=""){
				 String filena=boardProfile.getBoardImagefile().getOriginalFilename();
				    System.out.println("image full name -------------------------> "+filena);
				    if(filena!=null && filena!="" && filena.length()>1){

					    int lindex=filena.lastIndexOf( '.' );
						String imageName=filena.substring(lindex, filena.length());
						System.out.println("Extention ------------------> "+imageName);
						boardProfile.setImageExtension(imageName);
				    }else{
				    	boardProfile.setImageExtension("");	
				    }
			 }else{
				 boardProfile.setImageExtension("");
			 }
			 
			} catch (IOException e) {
			
			e.printStackTrace();
		}
	 }else{
		 //boardProfile.setBoardImagefile(null);
		 boardProfile.setImageData(null);
	 }
	 
		 
	 boardProfile.setBoardImagefile(null);
	 
	 if(boardProfile.getBoardCoOwners()!=null){
		 List<String> boardCoOwnerList = Arrays.asList(boardProfile.getBoardCoOwners().split(","));
		//List<ModelMap> m = new ArrayList<ModelMap>();
		List<BoardCoordinatorMap> m= new ArrayList<BoardCoordinatorMap>();
		for(String k : boardCoOwnerList)
		 {
			BoardCoordinatorMap map= new BoardCoordinatorMap(); 			
			map.setCoOwnerId(k);			
			m.add(map);
			 
		 }
		 
		 boardProfile.setBoardCoOwnerList(m);
	 }
	 
	 String schedulerString=request.getParameter("schedulerHidden");
	 String umpireString=request.getParameter("umpireHidden");
	 String groundCoOrdinatorString=request.getParameter("groundCordinatorHidden");
	 List<CoOrdinator> coOrdinators = new ArrayList<CoOrdinator>();
	 if(schedulerString !=null){
		 
		 List<String> schedularList = Arrays.asList(schedulerString.split(","));
			 for(String k : schedularList)
			 {
				 CoOrdinator cordinator=new CoOrdinator();
				 cordinator.setCoOrdinatorId(k);
				 cordinator.setCoOrdinatorTypeId(14);
				 coOrdinators.add(cordinator);
			 }
			
	 }
	 
	 if(umpireString !=null){
		
		 List<String> ampireList = Arrays.asList(umpireString.split(","));
			 for(String k : ampireList)
			 {
				 CoOrdinator cordinator=new CoOrdinator();
				 cordinator.setCoOrdinatorId(k);
				 cordinator.setCoOrdinatorTypeId(15);
				 coOrdinators.add(cordinator);
			 }
			
	 }
	 if(groundCoOrdinatorString !=null){
		 
		 List<String> groundCoOrdinatorsList = Arrays.asList(groundCoOrdinatorString.split(","));
			 for(String k : groundCoOrdinatorsList)
			 {
				 CoOrdinator cordinator=new CoOrdinator();
				 cordinator.setCoOrdinatorId(k);
				 cordinator.setCoOrdinatorTypeId(28);
				 coOrdinators.add(cordinator);
			 }
			
	 }
	 
	 boardProfile.setBoardCoordinatorList(coOrdinators);
	 
	 Long phoneNumber2=null;
	 Long phoneNumber1=null;
	 
	 if(boardProfile.getPhoneNumber2()!=null){
		 phoneNumber2= boardProfile.getPhoneNumber2();
	 }
		 boardProfile.setPhoneNumber2(phoneNumber2);
	 
	 if(boardProfile.getPhoneNumber1()!=null){
		 phoneNumber1= boardProfile.getPhoneNumber1();
	 }
	 boardProfile.setPhoneNumber1(phoneNumber1);


	 
	 hubReq.setRequestParam(boardProfile);
	 boardProfile.setCreatedBy(userId.toString());
	 
	 String boardProfileResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 
	 System.out.println("boardRequestParametersResponse  "+boardProfileResponse);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 if(boardProfileResponse != null){
			HubResponse boardResponse=gson.fromJson(boardProfileResponse, HubResponse.class);
		//	ResponseType response=boardResponse.getResults();
			//List<boardStatusDetail>
			if(boardResponse!=null && boardResponse.getResults()!=null && boardResponse.getResults().getBoardStatusDetail().size()>0)
			{
				
				model=new ModelAndView("redirect:/board?bid="+boardResponse.getResults().getBoardStatusDetail().get(0).getBoardId());
				
			}else{
				model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			}
			

	 }else{
		 request.setAttribute("servicevalidation", "Service unavailable due to some problems");
	 }
	 
	 

	return model;
	

}

//buddyBoard/${BuddyPublicFirstName}/${BuddyPublicUserId}
@RequestMapping(value="/buddyBoard/{BuddyFirstName}/{BuddyId}", method=RequestMethod.GET)
public ModelAndView buddyBoard(HttpServletRequest request, @PathVariable String BuddyId){
	
	ModelAndView model=new ModelAndView("ListOfBuddyBoards");
	
	try {
		HttpSession session=request.getSession(true);
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", BuddyId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {					 
					 model.addObject("BRDlist", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
			 
			 
			 
			 
			//*****************************************************************************************************************
			 
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
				 String strBoardList1=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder1 = new GsonBuilder();
				 Gson gson1 = builder1.create();
				 if(strBoardList1!=null)
				 {
					 HubResponse hubResponse= gson1.fromJson(strBoardList1, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 
			 
			 
			 
			 
			 
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	
	return model;
	
}

@RequestMapping(value="/{buddyName}/fans/{buddyID}", method=RequestMethod.GET)
public ModelAndView buddyfans(HttpServletRequest request, @PathVariable String buddyID) throws CSException{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;

	if(session!=null && session.getAttribute("USRID")!=null)
	{
		model=new ModelAndView("Buddyfans");
		UUID userId=(UUID) session.getAttribute("USRID");		
		 hubReq=new HubRequest(56);
		 hubReq.setMsgType(56);
		 ModelMap map=new ModelMap();
		 map.put("userId", buddyID);
		 map.put("startNode", 0);
		 map.put("endNode", 10);
		 map.put("fanType", "All");
		  hubReq.setRequestParam(map);
		
		 String strBuddyList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBuddyList!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBuddyList, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				 System.out.println("BoardProfileList"+boardFanList.getResults().getFanDetails().getBoardProfileList());
				 System.out.println("BoardProfileList"+boardFanList.getResults().getFanDetails().getUserProfileList());
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
				 model.addObject("BoardFanCount", boardFanList.getResults().getFanDetails().getBoardCount());
				 model.addObject("UserFanCount", boardFanList.getResults().getFanDetails().getUserProfileCount());
			 }
		 }
	
 //*******************************************************   Around you details	 *************************************************
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			// System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		
		 
		 //*****************************************************************************************************************
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		 
		 
		 
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		
	}
	return model;
}




@RequestMapping(value="/{buddyName}/fanOf/{buddyID}", method=RequestMethod.GET)
public ModelAndView buddyfanOfList(HttpServletRequest request, @PathVariable String buddyID) throws CSException{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;

	if(session!=null && session.getAttribute("USRID")!=null)
	{
		model=new ModelAndView("buddyFanOfList");
		UUID userId=(UUID) session.getAttribute("USRID");
		
		 hubReq=new HubRequest(57);
		 hubReq.setMsgType(57);
		 ModelMap map=new ModelMap();
		 map.put("userId", buddyID);
		 map.put("startNode", 0);
		 map.put("endNode", 15);
		 map.put("fanType", "All");
		  hubReq.setRequestParam(map);
		
		 String strBuddyList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(strBuddyList!=null)
		 {
			 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBuddyList, HubResponse.class);
			 
			 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
			 {
				
				 model.addObject("BoardProfileList", boardFanList.getResults().getFanDetails().getBoardProfileList());
				 model.addObject("UserProfileList", boardFanList.getResults().getFanDetails().getUserProfileList());
			 }
		 }
	
 //*******************************************************   Around you details	 *************************************************
		 hubReq=new HubRequest();
		 hubReq.setMsgType(77);
		 BoardSearchRequest searchReq= new BoardSearchRequest();
		 String userlocation=(String) session.getAttribute("USRLocation");

		 System.out.println("userlocation"+userlocation);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
		 }
		
		 
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("Matches");
		 hubReq.setRequestParam(searchReq);
	    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
		
		 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
		 {
			 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
		 }
		 
		 
		 hubReq=new HubRequest();
		 hubReq.setMsgType(22);
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
				 System.out.println("user location setttt");
			}else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 1");
			}
		 }else{
			 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 2");
		 }
		
		 searchReq.setStartNode("0");
		 searchReq.setEndNode("4");
		 searchReq.setCategory("League");
		 hubReq.setRequestParam(searchReq);
	    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strboardlist);
		 if(strboardlist!=null)
		 {
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
		 		
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
		 }
		 
		 searchReq.setCategory("Team");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strTeamlist);
		 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
		 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
		 
		 if(strTeamResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
			 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
		 }
		 
		 hubReq.setMsgType(23);
		 searchReq.setCategory("");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("board result : "+strbuddyresponse);
		 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
		 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
		 if(buddyResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
		 }
		 
		 hubReq.setMsgType(79);
		 searchReq.setCategory("Merchants");
		 //searchReq.setLatlang("17.3700,78.4800");
		 if(userlocation!=null)
		 {
			if(userlocation.length()>3)
			{
				 searchReq.setLatlang(userlocation);
			}else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			}
		 }else{
			 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
		 }
		 hubReq.setRequestParam(searchReq);
		 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
		 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
		 {
			 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
			 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
		 }
		
		 
		 
		 
		 
//*****************************************************************************************************************
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
		 
		 
		 
		 
		 
		 
		 
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		
	}
	return model;
}

@RequestMapping(value="/{boardName}/board/{boardID}", method=RequestMethod.GET)
public ModelAndView boardPublicProfile(HttpServletRequest request, @PathVariable String boardName, @PathVariable String boardID)
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	final String context = request.getContextPath();
	List<Object> upcommingObject=new ArrayList<Object>();
	try{
		if(session!=null && session.getAttribute("USRID")!=null)
		{

			UUID userId=(UUID) session.getAttribute("USRID");
			
			hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", boardID);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
				{
					
					//model= new ModelAndView("BoardPublicProfile");
					

					 if(hubResponse.getResults().getBoardStatusDetail().get(0).getCategory().equalsIgnoreCase("Team"))
						{
						 model= new ModelAndView("BoardPublicProfile");
							System.out.println("Inside team  Board");
						}else{
							model=new ModelAndView("BoardLandingpublic");
							model.addObject("Fromuser", "Fromuser");
							System.out.println("Inside League  Board");
							}
					 
					 MenuList menuList= Util.leaugeMenuList(hubResponse.getResults().getBoardStatusDetail().get(0), userId+"", context);						
					 model.addObject("LeaugeMenuList", menuList);
					 
					 
					 
					 //Split view and entry menu
				      List<MenuURL> umpireList=menuList.getUmpireList();
					  List<MenuURL> groundList=menuList.getGroundList();
					  List<MenuURL> scheduleList=menuList.getScheduleList();
					  List<String> entrymenu=new ArrayList<String>();
					  List<String> Viewmenu=new ArrayList<String>();
					  if(umpireList.size() >= 1)
					  {
						  for(int i=0;i<umpireList.size();i++)
						  {
							  MenuURL menu=umpireList.get(i);
							  System.out.println("umpire :"+menu.getURL());
							  int index=menu.getURL().indexOf("Create Umpire");
							  if(index == -1)
							  {
								  Viewmenu.add(menu.getURL()); 
							  }else
							  {
								  entrymenu.add(menu.getURL()); 
							  }
						  }
						  
					  }
					  if(groundList.size() >= 1)
					  {
						  for(int i=0;i<groundList.size();i++)
						  {
							  MenuURL menu=groundList.get(i);
							  System.out.println("groundList :"+menu.getURL());
							  int index=menu.getURL().indexOf("Create Ground");
							  if(index == -1)
							  {
								  Viewmenu.add(menu.getURL()); 
							  }else
							  {
								  entrymenu.add(menu.getURL()); 
							  }
						  }
					  }
					  if(scheduleList.size() >= 1)
					  {
						  for(int i=0;i<scheduleList.size();i++)
						  {
							  MenuURL menu=scheduleList.get(i);
							  System.out.println("scheduleList :"+menu.getURL()); 
							  int index=menu.getURL().indexOf("Schedule List");
							  int index1=menu.getURL().indexOf("Schedule & Scores");
							  if(index != -1 || index1 != -1)
							  {
								  Viewmenu.add(menu.getURL()); 
							  }else
							  {
								  entrymenu.add(menu.getURL()); 
							  }
						  }
					  }
				 
				 
				 
				 
				 model.addObject("Viewmenu", Viewmenu);
				 model.addObject("entrymenu", entrymenu);
				 
				 
				 
				 
				//*************************************************  Upcomming details  **********************//
				 
				 
				 hubReq =new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map5=new ModelMap();
				 map5.put("boardId", boardID);
				 map5.put("previousNextFlag","current");
				 map5.put("endNode", 10);
				 hubReq.setRequestParam(map5);

				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				
				 if(strGameScheduleList != null){
					 HubResponse hubResponse1 = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse1 != null && hubResponse1.getResults() != null){
						 if(hubResponse1.getResults().getGameSchedule().getUpComingMatchesList() !=null || hubResponse1.getResults().getGameSchedule().getInprogressMatchesList() != null)
						 {
						 upcommingObject.addAll(hubResponse1.getResults().getGameSchedule().getUpComingMatchesList());
						 upcommingObject.addAll(hubResponse1.getResults().getGameSchedule().getInprogressMatchesList());
						 
						 Collections.sort(upcommingObject, Collections.reverseOrder(new UpcommingComprator()));
						 
						 System.out.println("The Upcomming object list size :"+upcommingObject.size());
						 
						/* model.addObject("upcomingMatchesList", hubResponse1.getResults().getGameSchedule().getUpComingMatchesList());*/
						 model.addObject("upcomingMatchesList",upcommingObject);
						 } 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 
				 
				 //Completed phone
				 
				 
				 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				 Date date = new Date();
				 
				 long DAY_IN_MS = 1000 * 60 * 60 * 24;
				 System.out.println(new Date(System.currentTimeMillis() - (7 * DAY_IN_MS)));
				 
				 System.out.println(dateFormat.format(date));
				 
				 hubReq =new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map8=new ModelMap();
				 map8.put("boardId", boardID);
				 map8.put("toDateString",dateFormat.format(date));
				 map8.put("fromDateString",dateFormat.format(new Date(System.currentTimeMillis() - (7 * DAY_IN_MS))));
				 map8.put("endNode", 100);
				 hubReq.setRequestParam(map8);

				 String strGameScheduleList1 = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				
				 if(strGameScheduleList1 != null){
					 HubResponse hubResponse2 = gson.fromJson(strGameScheduleList1, HubResponse.class);
					 if(hubResponse2 != null && hubResponse2.getResults() != null){
						 model.addObject("completedMatchesList", hubResponse2.getResults().getGameSchedule().getCompletedMatchesList());
						 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 
				 
				// TopBowler TopBatsman details
				 
				 hubReq =new HubRequest();
				 hubReq.setMsgType(265);
				 ModelMap map6=new ModelMap();
				 map6.put("boardId", boardID);
				 map6.put("startNode",0);
				 map6.put("endNode", 500);
				 hubReq.setRequestParam(map6);

				 String topBatsmanList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				
				 if(topBatsmanList != null){
					 HubResponse hubResponse6 = gson.fromJson(topBatsmanList, HubResponse.class);
					 if(hubResponse6 != null && hubResponse6.getResults() != null){

						 model.addObject("StarBatsman", hubResponse6.getResults().getStarBatsmen());
						 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(264);
				 ModelMap map7=new ModelMap();
				 map7.put("boardId", boardID);
				 map7.put("startNode", 0);
				 map7.put("endNode", 500);
				 hubReq.setRequestParam(map7);
				 
				 String TopBowlerList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(TopBowlerList !=null)
				 {
					 HubResponse hubResponse7 = gson.fromJson(TopBowlerList, HubResponse.class);
					 if(hubResponse7 != null && hubResponse7.getResults() != null){

						 model.addObject("StarBowler", hubResponse7.getResults().getStarBowlers());
					 }else{
						System.out.println("null condition"); 
					 }
					 
				 }
				 
				 
				 
				 
				 
					 
					 
					 model.addObject("BoradPublicInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 model.addObject("LeaguManagement","No");
					
					
					
					
					 model.addObject("BoradPublicInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(40);
					 ModelMap map1=new ModelMap();			
					 map1.put("userId", userId);			 
					 map1.put("boardId", boardID);
					 hubReq.setRequestParam(map);
					 String strBoarddetail1=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail1!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
						{
											
							 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
							 String owner=hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy();
							 System.out.println("output ---- > "+Util.checkisCoOwner(userId.toString(),hubResponse1.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList()));
							 if(owner.equalsIgnoreCase(userId.toString()) || Util.checkisCoOwner(userId.toString(),hubResponse1.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList())){
								 model=new ModelAndView("redirect:/board?bid="+boardID);
								 System.out.println("redirect:board?bid="+boardID);
							 }else{
								 System.out.println("not equal");
							 }
						}
					 }
					 hubReq=new HubRequest();
					 hubReq.setMsgType(42);
					 ModelMap map2=new ModelMap();
					 map2.put("boardId", boardID);
					 map2.put("startNode", 0);
					 map2.put("endNode", 10);
					 hubReq.setRequestParam(map2);
					 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
					 if(strBoardFeedList!=null )
					 {
						 HubResponse feedlist= gson.fromJson(strBoardFeedList, HubResponse.class);
						 
						 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
						 {
							 //FeedsList
							model.addObject("FeedsList", feedlist.getResults().getBoardFeedResponse().getFeedList());
						 }
					 }else{
						 System.out.println("Board feeds not excuted...........");
					 }
					 
					//*******************************  for getting user boards   ******************************
						
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					
					 hubReq= new HubRequest();
					 hubReq.setMsgType(76);
					 ModelMap map4=new ModelMap();
					 map4.put("boardId",boardID);
					 map4.put("userId", userId);						
					 hubReq.setRequestParam(map4);
					 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
					 boolean buddyFan=false;
					 if(buddyFandeatil!=null)
					 {
						 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
						 if(buddyFanResponse!=null)
						 {
							 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
							 {
								 buddyFan=true;
							 }
						 }
						 
					 }
					// buddyFan=true;
					 System.out.println("board : "+buddyFan);
					 model.addObject("BoardFanReq", buddyFan);
					 
					 //*******************************************************   Around you details	 *************************************************
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(77);
					 BoardSearchRequest searchReq= new BoardSearchRequest();
					 String userlocation=(String) session.getAttribute("USRLocation");

					 System.out.println("userlocation"+userlocation);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					 }
					
					 
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("Matches");
					 hubReq.setRequestParam(searchReq);
				    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
					
					 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
					 {
						 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(22);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
							 System.out.println("user location setttt");
						}else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							 System.out.println("user not getted ------------- default 1");
						}
					 }else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 2");
					 }
					
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("League");
					 hubReq.setRequestParam(searchReq);
				    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strboardlist);
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
					 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
					
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 searchReq.setCategory("Team");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strTeamlist);
					 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
					 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
					 
					 if(strTeamResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 hubReq.setMsgType(23);
					 searchReq.setCategory("");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strbuddyresponse);
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
					 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
					 if(buddyResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
					 }
					 
					 request.setAttribute("BoardId", boardID);
					 hubReq.setMsgType(79);
					 searchReq.setCategory("Merchants");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
					 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					
					 
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
				 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			
		
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/buddyPublicProfileFanOfList", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse buddyPublicProfileFanOfList(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(57);	
	 boardFanRequest.setStartNode("0");
	 boardFanRequest.setEndNode("10");	 
	 boardFanRequest.setUserId(boardFanRequest.getUserId());
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}



@RequestMapping(value="/buddyPublicProfileFansList", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse buddyPublicProfileFansList(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(56);	
	 boardFanRequest.setStartNode("0");
	 boardFanRequest.setEndNode("10");	 
	 boardFanRequest.setUserId(boardFanRequest.getUserId());
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}

@SuppressWarnings("null")
@RequestMapping(value="/viewProfile", method=RequestMethod.GET)
public ModelAndView updateProfile(HttpServletRequest request)throws CSException
{
	ModelAndView model=null;
	
	try{
	
		HttpSession session=request.getSession(true);
		if(session.getAttribute("USRID")!=null)
		{
			UUID userId= (UUID) session.getAttribute("USRID");			
			 hubReq=new HubRequest();
			 hubReq.setMsgType(13);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			
			 hubReq.setRequestParam(map);
			 
			 String strUserDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strUserDetails!=null)
			 {
				 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(strUserDetails, HubResponse.class);
				 
				 if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
				 {
					
					 for(UserProfileRole l : userDetails.getResults().getItemsFound())
					 {
						 System.out.println("first name : "+l.getFirstName());
						 System.out.println("last name : "+l.getLastName());
						 System.out.println("userRoleMap "+l.getUserRoleMap());
						 List<String> roleId= new ArrayList<String>();
						 model=new ModelAndView("editUser");
						 String strRoleID=null;
						 for(UserRoleMap map2 : l.getUserRoleMap())
						 {
							 System.out.println("Role id : "+map2.getRoleId());
							 System.out.println("UserId : "+map2.getUserId());
							 if(map2.getRoleId()!=null)
							 {
								 roleId.add(map2.getRoleId());
								 
								 if(strRoleID==null)
								 {
									 strRoleID=map2.getRoleId();
								 }else{
									 strRoleID=strRoleID+","+map2.getRoleId();
								 }
							 }
							
						 }
						 String profileStrength=userDetails.getResults().getItemsFound().get(0).getProfileStrength();
						 String ps="70";
						 if(profileStrength!=null && profileStrength.equalsIgnoreCase("")){
							 ps="70";
						 }else{
							 ps=profileStrength;
						 }
						 model.addObject("ProfileStrength", ps);
						
						 String roleString=roleId.toString();
						 System.out.println("role--------------------->"+roleString);
						 model.addObject("strRoleID", strRoleID);
						 model.addObject("roleUserId", roleId);
						 boolean playerDiv=false;
						 if(roleId.contains("be37583f-7df6-45f8-8e8a-d549197d99b6"))
						 {
							 playerDiv=true;	
							 
						 }
						 System.out.println("playerDiv "+playerDiv);
						 model.addObject("playerDiv", playerDiv);
						 
						 for(UserPlaceMap k: l.getUserplacemap())
						 {
							 System.out.println("place name : "+k.getPlaceName());
						 }
						 
						 List<String> language=new ArrayList<String>();
						 String strLanguage=null;
						 for(UserLanguageMap k:l.getUserlanguagemap())
						 {
							 System.out.println("language"+k.getLanguageName());
							 language.add(k.getLanguageName());			
							 if(strLanguage==null)
							 {
								 strLanguage=k.getLanguageName();
							 }else{
								 strLanguage=strLanguage+","+k.getLanguageName();
							 }
						 }
						 model.addObject("UserLanguage", language.toString());
						 model.addObject("strLanguage", strLanguage);
						 List<String> subRole1= new ArrayList<String>();
						 String strsubRole1=null;
						 for(UserSubRoleLevelOneMap k:l.getUsersubrolelevelonemap())
						 {
							 System.out.println("UserSubRoleLevelOneMap----> "+k.getSubRoleLevelOneId());
							 subRole1.add(k.getSubRoleLevelOneId());
							 if(strsubRole1==null)
							 {
								 strsubRole1=k.getSubRoleLevelOneId();
							 }else{
								 strsubRole1=strsubRole1+","+k.getSubRoleLevelOneId();
							 }
						 }
						 
						 model.addObject("subRole1", subRole1);
						 model.addObject("strsubRole1", strsubRole1);
						 List<String> subRole2= new ArrayList<String>(); 
						 String strsubRole2=null;
						 for(UserSubRoleLevelTwoMap k : l.getUsersubroleleveltwomap())
						 {
							 System.out.println("UserSubRoleLevelTwoMap----> "+k.getSubRoleLevelTwoId());							
							 subRole2.add(k.getSubRoleLevelTwoId());
							 if(strsubRole2==null)
							 {
								 strsubRole2=k.getSubRoleLevelTwoId();
							 }else{
								 strsubRole2=strsubRole2+","+k.getSubRoleLevelTwoId();
							 }
						 }
						 model.addObject("strsubRole2", strsubRole2);
						 model.addObject("subRole2", subRole2);
						 List<String> subRole3= new ArrayList<String>();
						 String strsubRole3=null;
						 for(UserSubRoleLevelThreeMap k : l.getUsersubrollevelthreemap())
						 {
							 System.out.println("UserSubRoleLevelThreeMap----> "+k.getSubRoleLevelThreeId());
							 subRole3.add(k.getSubRoleLevelThreeId());
							 if(strsubRole3==null)
							 {
								 strsubRole3=k.getSubRoleLevelThreeId();
							 }else{
								 strsubRole3=strsubRole3+","+k.getSubRoleLevelThreeId();
							 }
						 }
						 model.addObject("strsubRole3", strsubRole3);
						 model.addObject("subRole3", subRole3);
						 List<String> subRole4= new ArrayList<String>();
						 String strsubRole4=null;
						 for(UserSubRoleLevelFourMap k : l.getUsersubrolelevelfourmap())
						 {
							 System.out.println("UserSubRoleLevelFourMap-----> "+k.getSubRoleLevelFourId());
							 subRole4.add(k.getSubRoleLevelFourId());
							 if(strsubRole4==null)
							 {
								 strsubRole4=k.getSubRoleLevelThreeId();
							 }else{
								 strsubRole4=strsubRole4+","+k.getSubRoleLevelThreeId();
							 }
						 }
						 
						 model.addObject("subRole4", subRole4);
						 
					 }
					
					 List<CountryCodes> countryCodes = userDetails.getResults().getItemsFound().get(0).getCountryCodes();
					 model.addObject("countryCodes", countryCodes);
					 UserProfileRole userProfileRole=userDetails.getResults().getItemsFound().get(0);
					 System.out.println("ccccccccccccc======"+userProfileRole.getCountry()+"----------"+userProfileRole.getCountryCode());
					 String[] landline=null;
					 		if(userProfileRole.getLandLineCountrycode()!=null)
					 		{
					 			 landline=userProfileRole.getLandLineCountrycode().split("-");
					 		}
						
						 if(landline!=null && landline.length==1)
						 {
							 userProfileRole.setLandLineContry(landline[0]);
							// userProfileRole.setLandLineSTDcode(landline[1]);
							// userProfileRole.setLandLineSTDcode("");
						 }else if((landline!=null && landline.length==2)){
						 
							 userProfileRole.setLandLineContry(landline[0]);
							// userProfileRole.setLandLineSTDcode(landline[1]);
							 
						 }else{
							 userProfileRole.setLandLineContry("");
							// userProfileRole.setLandLineSTDcode("");
						 }
			
						 model.addObject("UserProfileOBJ", userProfileRole);
						 
						 //changes priyanka made:
						 if(userProfileRole.getDob()!=null){
						       Calendar cal = Calendar.getInstance();

				              Date dateInString = userProfileRole.getDob();
				              cal.setTime(dateInString);
				              System.out.println("dateInString----->"+dateInString);
							 // model.addObject("UserProfileOBJ", userProfileRole);
							  model.addObject("year",cal.get(Calendar.YEAR));
							  model.addObject("month",cal.get(Calendar.MONTH)+1);						 
							  model.addObject("date",cal.get(Calendar.DATE));
							 }
						  
						  System.out.println("profile.getResults().getItemsFound()[0] "+userDetails.getResults().getItemsFound().get(0).getUserId());
						     hubReq=new HubRequest(14);
							 hubReq.setMsgType(14);
							// hubReq.setProperty("targetItem", "{\"storeUserName\":\"testeeee\",\"status\":\"*\"}");
							// hubReq.setProperty("targetItem",  "{}");
							 //hubReq.setRequestParam(userid);
							 hubReq.setRequestParam("");
							 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("Get the role details  -------------------> "+result2 );
						 
							 
							// UserProfileRoleResponse role=gsonobj.fromJson(result2, UserProfileRoleResponse.class);
							  HubResponse role=GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
							 if(role.getResults()!=null)
							 {
								 if(role.getResults().getRolesAndSubRoles() != null){
									 model.addObject("RoleList", role.getResults().getRolesAndSubRoles().getRole());
									 System.out.println(role.getResults());
								 }
								
								/* for(Role r : role.getResults().getRolesAndSubRoles().getRole())
								 {
									 System.out.println("role name : "+r.getRole());
								 }
								 System.out.println("==============================================");*/
								 
								 model.addObject("SubCAT1", role.getResults().getRolesAndSubRoles().getSubroleLevelOne());
								 
								/* for(SubRoleLevelOne s : role.getResults().getRolesAndSubRoles().getSubroleLevelOne())
								 {
									 System.out.println("subcate name : "+s.getSub_role_level_one()+"       Subcategory ID : "+s.getSub_role_level_one_id());
									 
								 }*/
								 								 
								 
								 model.addObject("SubCAT2",role.getResults().getRolesAndSubRoles().getSubroleLevelTwo());
								 
								/* for(SubRoleLevelThree s : role.getResults().getRolesAndSubRoles().getSubroleLevelThree())
								 {
									 System.out.println("subcat3 ----->"+s.getSubRoleLevelThree());
								 }*/
								 model.addObject("SubCAT3",role.getResults().getRolesAndSubRoles().getSubroleLevelThree());
								 /*for(SubRoleLevelFour s : role.getResults().getRolesAndSubRoles().getSubroleLevelFour())
								 {
									 System.out.println("subcate4 -----> "+s.getSubRoleLevelFour());
								 }*/
									 
								 model.addObject("SubCAT4",role.getResults().getRolesAndSubRoles().getSubroleLevelFour());
							 }
							 
							 
							 hubReq=new HubRequest();
							 hubReq.setMsgType(22);
							 BoardSearchRequest searchReq= new BoardSearchRequest();
							 //searchReq.setLatlang("13.082680199999999,80.2707184");
							 searchReq.setStartNode("0");
							 searchReq.setEndNode("40");
							 searchReq.setCategory("League");
							 searchReq.setLatlang("");
							 hubReq.setRequestParam(searchReq);
						    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("board result : "+strboardlist);
							 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
							 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
							
							 if(strsearchResponse.getResults().getSearchResponse()!=null)
							 {
								 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
								 model.addObject("BoardList", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
							 }
							 
							 
							
							 hubReq=new HubRequest();
							 hubReq.setMsgType(22);
							
							 searchReq.setCategory("Team");
							 searchReq.setLatlang("");

							 hubReq.setRequestParam(searchReq);
						    String strteamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
							 System.out.println("board result : "+strteamlist);
							 HubResponse strteamsearchResponse= GsonConverters.getGsonObject().fromJson(strteamlist, HubResponse.class); 
							 System.out.println("logitude : "+strteamsearchResponse.getResults().getSearchResponse());
							
							 if(strteamsearchResponse.getResults().getSearchResponse()!=null)
							 {
								 System.out.println("board list :---------->" +strteamsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
								 model.addObject("TeamList", strteamsearchResponse.getResults().getSearchResponse().getBoardProfileList());
							 }
							 HubRequest hubReq1=new HubRequest();
							 hubReq1=new HubRequest();
							 hubReq1.setMsgType(37);
							 
							 hubReq1.setRequestParam(new CodeVerification());
							  String ballPreferenceResponse=cricketSocialRestTemplateService.userRegistration(hubReq1);
							  
							  HubResponse ballResponse=GsonConverters.getGsonObject().fromJson(ballPreferenceResponse, HubResponse.class); 
							  List<BullPreferenceVO> ballPreferences=null;
							  if(ballResponse != null && ballResponse.getResults()!=null){
								 ballPreferences=ballResponse.getResults().getBallPrefenrenceList();	
							  }
							  model.addObject("BallPreferences",ballPreferences);
							 
							 
							//********************************************  Get board Details  ************************************************	  
								 hubReq= new HubRequest();
								 hubReq.setMsgType(41);
								 ModelMap map3=new ModelMap();
								 map3.put("userId", userId);
								 map3.put("startNode", 0);
								 map3.put("endNode", 200);
								  hubReq.setRequestParam(map3);
									 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
									
									 if(strBoardList!=null)
									 {
										 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
										 if(hubResponse2!=null && hubResponse2.getResults()!=null)
										 {
											 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
										 }
									 }

						 
					
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
		 
		 
		 
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return model;
	
}


@RequestMapping(value="/affiliateRoster", method=RequestMethod.GET)
public @ResponseBody HubResponse affiliateRoster(@RequestParam String leagueId,@RequestParam String rosterId,@RequestParam String boardId,HttpServletRequest request) throws CSException
{
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	String affiliateRosterResponse=null;
	GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 HubResponse hubResponse=null;
	try{
	 hubReq= new HubRequest();
	 hubReq.setMsgType(251);
	 EditRoster editroster=new EditRoster();
	 editroster.setLeagueId(leagueId);
	 editroster.setRosterId(rosterId);
	 editroster.setFlag("");
	 hubReq.setRequestParam(editroster);	
	 affiliateRosterResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 
	 
	 if(affiliateRosterResponse!=null)
	 {
		 hubResponse= gson.fromJson(affiliateRosterResponse, HubResponse.class);
		 
	 }
	 
	 
	 JSONObject jobj=new JSONObject(affiliateRosterResponse);
	 JSONObject jresult=jobj.getJSONObject("results");
     JSONObject jplayerrestriction=jresult.getJSONObject("playesrRestriction");
     JSONArray jrestrictedplayerarray=jplayerrestriction.getJSONArray("restrictedPlayers");
     System.out.println("the json array :"+jrestrictedplayerarray.length());
     if(jrestrictedplayerarray.length() != 0)
     {
    	 
     }else
     {
    	 hubReq= new HubRequest();
    		   hubReq.setMsgType(80);	
    		   ModelMap map=new ModelMap();
    		   map.put("rosterId", rosterId);
    		   map.put("leagueId", leagueId);
    		   map.put("userId", userId);
    		   map.put("boardId", boardId);
    		 hubReq.setRequestParam(map);	
    		 affiliateRosterResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
    		 
    		 hubResponse= gson.fromJson(affiliateRosterResponse, HubResponse.class);
    		 System.out.println(hubResponse.getResults().getStatusMsg());
    	     
    		 
     }
     
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	 
	
	 return hubResponse;
}


@RequestMapping(value="/updateroastercheck",method=RequestMethod.POST)
public @ResponseBody HubResponse updateroastercheck(@RequestBody EditRoster editroster,HttpServletRequest request)throws CSException
{
	HttpSession session=request.getSession(true);	
	String affiliateRosterResponse;
	HubResponse hubResponse=null;
	GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
		 hubReq= new HubRequest();
		 hubReq.setMsgType(251);
		 System.out.println("Edit roaster : :"+editroster.getTeamUserId());
		 editroster.setFlag("EditRoster");
		 hubReq.setRequestParam(editroster);	
		 affiliateRosterResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		 
		 if(affiliateRosterResponse!=null)
		 {
			 hubResponse= gson.fromJson(affiliateRosterResponse, HubResponse.class);
			 
		 }
		 return hubResponse;
}

@RequestMapping(value="/updateUserDetail", method=RequestMethod.POST)

public ModelAndView updateUserDetail(@ModelAttribute UserProfileUpdate2 userProfile, BindingResult result, ModelMap modelMap,HttpServletRequest request, Date dateOfBirth,Date oldDob)throws IOException
{
	ModelAndView model= null;
	System.out.println("update UserDetails----->");
	try{

		System.out.println("ball id value :"+userProfile.getBallId());
		System.out.println("user first name : "+userProfile.getLastName());
		System.out.println("gendral : "+userProfile.getGender());
		System.out.println("lat lng : "+userProfile.getLatLang());
		   System.out.println("userProfile.getUserimgfile().getContentType()---->"+userProfile.getUserimgfile());
		   System.out.println("request ===========> "+request.getParameter("userimgfile"));
		   if(userProfile.getLatLang()=="" || userProfile.getLatLang().length()<3){
				userProfile.setLatLang(userProfile.getOldLatlong());
			}
		 List<SubRoleLevelOne> subRoleLevelOne= new ArrayList<SubRoleLevelOne>();
		 List<SubRoleLevelTwo> subRoleLevelTwo = new ArrayList<SubRoleLevelTwo>();
		 List<SubRoleLevelThree> subRoleLevelThrees = new ArrayList<SubRoleLevelThree>();
		 List<SubRoleLevelFour> subRoleLevelFours = new ArrayList<SubRoleLevelFour>();
		 
		 GsonBuilder builder= new GsonBuilder();
		    Gson gson = builder.create();
		    String bytstring = gson.toJson(userProfile.getUpload());
		  
		   
		    if(userProfile.getUserimgfile()!=null)
		    {
		    	userProfile.getUserimgfile().getName();
		    	ImageDetails imgfile= new ImageDetails();
			    imgfile.setMimeType(userProfile.getUserimgfile().getContentType());
			    imgfile.setImageInbyteArray(userProfile.getUserimgfile().getBytes());
			 //   String imageDataString = Base64.encodeBase64URLSafeString(imageByteArray)
			    //		String imageDataString = new String(userProfile.getUserimgfile().getBytes(), "UTF-8");	
			    //userProfile.setImageData(userProfile.getUserimgfile().getBytes());
			    String imageDataString= new sun.misc.BASE64Encoder().encode(userProfile.getUserimgfile().getBytes());
			    userProfile.setImageData(imageDataString);
			    String filena=userProfile.getUserimgfile().getOriginalFilename();
			    System.out.println("image full name -------------------------> "+filena);
			    if(filena!=null && filena!="" && filena.length()>1){

				    int lindex=filena.lastIndexOf( '.' );
					String imageName=filena.substring(lindex, filena.length());
					System.out.println("Extention ------------------> "+imageName);
					userProfile.setImageExtension(imageName);	
			    }else{
			    	userProfile.setImageExtension("");	
			    }
		    }else{
		    	userProfile.setImageData(null);
		    	userProfile.setImageExtension("");
		    }
		    
		 
		userProfile.setSubRoleLevelTwo(subRoleLevelTwo);
		String reqString2 = gson.toJson(subRoleLevelTwo);
		userProfile.setUserimgfile(null);
		
		if(request.getParameter("rr")!=null &&  request.getParameter("rr").length()>0){
			String rr[] = request.getParameterValues("rr");
			for(String r :rr){
				if(r.equalsIgnoreCase("email")){
					userProfile.setEnableEmailAddress(1);
				}else if(r.equalsIgnoreCase("phone")){
					userProfile.setEnablePhoneNo(1);
				}else{
					userProfile.setEnablePhoneNo(0);
					userProfile.setEnableEmailAddress(0);
					}

			}
		}else{
			userProfile.setEnablePhoneNo(0);
			userProfile.setEnableEmailAddress(0);
		}

		if(userProfile.getSubcat1()!=null)
		{
			
			if(userProfile.getSubcat1().length>0)
			{
				
					/*sub1.setRole_id(userProfile.getSubcat1()[1].toString());
					sub1.setSub_role_level_one(userProfile.getSubcat1()[0].toString());
					subRoleLevelOne.add(sub1);*/
				
					/*System.out.println("subcate output  ------------------> "+userProfile.getSubcat1()[1].toString());
					System.out.println("userProfile.getSubcat1()[0].toString() ----------------------------> "+userProfile.getSubcat1()[0].toString());
					*/
					for(String k : userProfile.getSubcat1())
					{
						SubRoleLevelOne sub1= new SubRoleLevelOne();
						sub1.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
						//sub1.setSub_role_level_one(k);
						sub1.setSub_role_level_one_id(k);
						sub1.setUserId(userProfile.getUserId().toString());
						subRoleLevelOne.add(sub1);
						System.out.println("k--------------------> "+k);
					}
					
					/*for(int i=0;i<roleid.length;i++)
					{
						SubRoleLevelOne sub1= new SubRoleLevelOne();
						sub1.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
						sub1.setSub_role_level_one(subcat1[i]);
						sub1.setUserId(userProfile.getUserId().toString());
						subRoleLevelOne.add(sub1);
						System.out.println("roleid[i]------------->"+roleid[i]);
					}*/
					
			
					System.out.println("userProfile.getSubcat2BatsmanOptions() 1---------------------------> "+userProfile.getSubcat2BatsmanOptions());
					System.out.println("userProfile.getSubcat2Allrounder() 1-------------------------------> "+userProfile.getSubcat2Allrounder());
					System.out.println("userProfile.getSubcat2BowlerOptions() 1--------------------------> "+userProfile.getSubcat2BowlerOptions());
					
					if(userProfile.getSubcat2BatsmanOptions()!=null)
					{
						String[] sub2val=userProfile.getSubcat2BatsmanOptions().split(",");
						SubRoleLevelTwo sub2= new SubRoleLevelTwo();
						sub2.setSub_role_level_one_id(sub2val[1]);
						sub2.setSub_role_level_two_id(sub2val[0]);
						sub2.setUserId(userProfile.getUserId().toString());
						sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
						subRoleLevelTwo.add(sub2);
					}
					if(userProfile.getSubcat2BowlerOptions()!=null)
					{
						String[] sub2val=userProfile.getSubcat2BowlerOptions().split(",");
						SubRoleLevelTwo sub2= new SubRoleLevelTwo();
						sub2.setSub_role_level_one_id(sub2val[1]);
						sub2.setSub_role_level_two_id(sub2val[0]);
						sub2.setUserId(userProfile.getUserId().toString());
						sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
						subRoleLevelTwo.add(sub2);
					}
					
					if(userProfile.getSubcat2Allrounder()!=null)
					{
						String[] sub2val=userProfile.getSubcat2Allrounder().split(",");
						SubRoleLevelTwo sub2= new SubRoleLevelTwo();
						sub2.setSub_role_level_one_id(sub2val[1]);
						sub2.setSub_role_level_two_id(sub2val[0]);
						sub2.setUserId(userProfile.getUserId().toString());
						sub2.setRole_id("be37583f-7df6-45f8-8e8a-d549197d99b6");
						subRoleLevelTwo.add(sub2);
					}
					
					
					userProfile.setSubRoleLevelOne(subRoleLevelOne);
					if(userProfile.getSubcat3()!=null)
					{
						if(userProfile.getSubcat3().length>1)
						{
							SubRoleLevelThree sub3= new SubRoleLevelThree();
							sub3.setSubRoleLevelThreeId(userProfile.getSubcat3()[0].toString());
							sub3.setSubRoleLevelTwoId(userProfile.getSubcat3()[1].toString());
							sub3.setUserId(userProfile.getUserId().toString());
							sub3.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
							subRoleLevelThrees.add(sub3);
							if(userProfile.getSubcat4()!=null)
							{
								if(userProfile.getSubcat4().length>1)
								{
									SubRoleLevelFour sub4= new SubRoleLevelFour();
									sub4.setSubRoleLevelFourId(userProfile.getSubcat4()[0].toString());
									sub4.setSubRoleLevelThreeId(userProfile.getSubcat4()[1].toString());
									sub4.setSubRoleLevelOneId("18d09d29-aaef-46d6-8785-b587e9ed5c22");
									sub4.setUserId(userProfile.getUserId().toString());
									sub4.setRoleId("be37583f-7df6-45f8-8e8a-d549197d99b6");
									subRoleLevelFours.add(sub4);
								}
									
							}
						}
						
						
					}
					if(userProfile.getSubcat2()!=null)
					{
						
						
						
						
						if(userProfile.getSubcat2().length>1)
						{
							String[] asubcat1=userProfile.getSubcat2()[0].toString().split(",");
							String[] subcat2=userProfile.getSubcat2()[1].toString().split(",");
							for(int i=0;i < subcat2.length;i++)
							{
								SubRoleLevelTwo sub2= new SubRoleLevelTwo();
								sub2.setSub_role_level_one_id(subcat2[i]);
								sub2.setSub_role_level_two_id(asubcat1[i]);
								sub2.setUserId(userProfile.getUserId().toString());
								subRoleLevelTwo.add(sub2);
							}
							
							
							
							
							/*if(userProfile.getSubcat3()!=null)
							{
								SubRoleLevelThree sub3= new SubRoleLevelThree();
								
								if(userProfile.getSubcat3().length>1)
								{
									sub3.setSubRoleLevelThreeId(userProfile.getSubcat3()[0].toString());
									sub3.setSubRoleLevelTwoId(userProfile.getSubcat3()[1].toString());
									subRoleLevelThrees.add(sub3);
									
									
									if(userProfile.getSubcat4()!=null)
									{
										
										if(userProfile.getSubcat4().length>1)
										{
											SubRoleLevelFour sub4= new SubRoleLevelFour();
											sub4.setSubRoleLevelFourId(userProfile.getSubcat4()[0].toString());
											sub4.setSubRoleLevelThreeId(userProfile.getSubcat4()[1].toString());
											subRoleLevelFours.add(sub4);
										}
										
										for(String sub : userProfile.getSubcat4())
										{
											System.out.println("subcat4 ------------>"+sub);
										}
												
									}
								}
								for(String sub : userProfile.getSubcat3()){
									System.out.println("subcat3 ------------>"+sub);
									
								}
								
								
							}
							*/
							
						}
						
					}
			}
			
			
			
			
			
			
			
		}
		
		/// dassssssssssssss
		
		/*System.out.println("userProfile.getModifiedDate()------------> "+bodDate);
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        String strdate= dateFormat.format(bodDate);
        System.out.println("converted Date -----> "+strdate);
		userProfile.setDateOfBirth(strdate);*/
		
		System.out.println("userProfile.getModifiedDate()------------> "+dateOfBirth);
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        /*String mm = request.getParameter("dobMonth");
        String yyyy = request.getParameter("dobYear");
        String dd = request.getParameter("dobDate");
        String bodDate1 = mm+" "+" "+dd+" "+yyyy;
        System.out.println("converted Date -----> "+strdate);
        Date  startDate = df.parse(bodDate1);*/
		
        String strdate= dateFormat.format(dateOfBirth);
        System.out.println("converted Date -----> "+strdate);
		userProfile.setDateOfBirth(strdate);
		
		
		String oldstrdate=dateFormat.format(oldDob);
		System.out.println("Converted old date -------> :"+oldstrdate);
		System.out.println("Converted year -------> :"+oldDob.getDate());
		
		if(oldstrdate.equalsIgnoreCase("1800-11-11"))
		{
			System.out.println("No old dob");
			userProfile.setOldDob(strdate);
		}else{
		userProfile.setOldDob(oldstrdate);}
		
		//userProfile.setOldDob(oldstrdate);
		//  default setting ....................
		
		userProfile.setSubroleLevelThree(subRoleLevelThrees);
		 userProfile.setSubroleLevelFour(subRoleLevelFours);
		
		if(userProfile.getPhoneNumber().length()<=0)
		{
			userProfile.setPhoneNumber("0");
		}
		/*if(userProfile.getLandLineNumber().length()<=0)
		{
			userProfile.setLandLineNumber("0");
		}*/
		if(userProfile.getZipcode().length()<=0)
		{
			userProfile.setZipcode("0");
		}
		
		
		 userProfile.setSubroleLevelThree(subRoleLevelThrees);
		 userProfile.setSubroleLevelFour(subRoleLevelFours);
		
		userProfile.setSubRoleLevelOne(subRoleLevelOne);
		//String reqString3 = gson.toJson(subRoleLevelOne);
		
		 hubReq=new HubRequest(78);
		 hubReq.setMsgType(78);
		 byte[] img=userProfile.getUpload();			 
		
		String imgStr=null;
		 if(img!=null)
		 {
			 imgStr= img.toString();
			// String filena=userProfile.getUserimgfile().getOriginalFilename();
			// System.out.println("-----------> "+filena);
		}
		
		 userProfile.setSubRoleLevelOne(subRoleLevelOne);
		 userProfile.setSubRoleLevelTwo(subRoleLevelTwo);
		 
		 userProfile.setTeamBoardId(userProfile.getTeamBoardId());
		 userProfile.setLeagueBoardId(userProfile.getLeagueBoardId());
		 
		 
		 
		 hubReq.setRequestParam(userProfile);
		
		 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("controller result -------------------> "+result2);
			model=new ModelAndView("redirect:/");
			System.out.println("-------------------> Model View Added");
		 	/*GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create()*/;
		    LoginResponse he=gson.fromJson(result2, LoginResponse.class);
		
		    
		    HubRequest hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);				
			 UserProfile userdetails= new UserProfile();
			 userdetails.setUserId(userProfile.getUserId());
			 hubReq.setRequestParam(userdetails);
			 String struserDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("user details getting ofter update -------------------> "+struserDetails );
			 GsonBuilder builder1 = new GsonBuilder();
			    Gson gson2 = builder1.create();
			 
			  LoginResponse profile=gson2.fromJson(struserDetails, LoginResponse.class);
			  
		    if(profile.getResults().getItemsFound()!=null)
		    {

			    HttpSession session= request.getSession(true);
			     if(session!=null)
			     {
			    	 
			    	 System.out.println("session valude===============");
			    	    session.removeAttribute("USRIMG");
			    	    System.out.println("user image==============="+ session.getAttribute("USRIMG"));
			    		 session.setAttribute("USRIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
			    		  System.out.println("user image===============12  "+session.getAttribute("USRIMG"));
			    		 session.removeAttribute("USRFNA");
			    		 session.setAttribute("USRFNA",profile.getResults().getItemsFound()[0].getFirstName());
			    		/* session.removeAttribute("USRLocation");
			    		 session.setAttribute("USRLocation", profile.getResults().getItemsFound()[0].getLatLang());*/
			    		 
			    		 /*--------------------changed by vignesh-------------------*/
			    		 
			    		 String latlngString = (String) session.getAttribute("USRLocationAllowed");
			    		 if(latlngString.equalsIgnoreCase("No"))
			    		 {
			    		 session.removeAttribute("USRLocation");
			    		 session.setAttribute("USRLocation", profile.getResults().getItemsFound()[0].getLatLang());
			    		 }
			    		 //userprofileupdate
			    	 
			    		 String name2=profile.getResults().getItemsFound()[0].getFirstName();
						 if(profile.getResults().getItemsFound()[0].getLastName()!=null){
							 name2=name2+" "+profile.getResults().getItemsFound()[0].getLastName();
						 }
						 session.removeAttribute("USRLastName");
						 session.setAttribute("USRLastName", name2);
			    		 
			    		 
			    	 //session.setMaxInactiveInterval(arg0)
			     }
		    }
		   
	
	
	}catch(Exception e)
	{
		e.printStackTrace();
		System.out.println("--------------errorrrrrrrrrrrr---------------");
	}
	System.out.println("return view ");
	return model;
   // return null;    
}

//Updated By Ramya

@RequestMapping(value="/CreateUmpire/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView createUmpire(@PathVariable String boardId,HttpServletRequest request){
	
	System.out.println("boardId :"+boardId);
	ModelAndView mav = new ModelAndView();
	HttpSession session=request.getSession(true);
	try{
		if(session!=null && session.getAttribute("USRID")!=null)
		{
	mav = new ModelAndView("CreateUmpire");
	mav.addObject("boardId", boardId);
	
	UUID userId = (UUID) session.getAttribute("USRID");
	
	hubReq= new HubRequest();
	 hubReq.setMsgType(41);
	 ModelMap map=new ModelMap();
	 map.put("userId", userId);
	 map.put("startNode", 0);
	 map.put("endNode", 200);
	  hubReq.setRequestParam(map);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }
		 }
		 
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map11=new ModelMap();			
		 map11.put("userId", session.getAttribute("USRID"));			 
		 map11.put("boardId", boardId);
		 hubReq1.setRequestParam(map11);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
			{
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = request.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);				
			}
		 }	

		//*************************** Getting Country code  ***************************************
		 HubRequest hubReq2=new HubRequest();
		 hubReq2.setMsgType(249);
		 ModelMap map2=new ModelMap();			
		 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq2);		
		 if(contryCodeString != null){
			 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
			 System.out.println("res----->>123>"+userDetails);
			/* if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
			 {*/
				 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
				 mav.addObject("countryCodes", countryCodes);
				 System.out.println("ccccccccccccc======"+countryCodes.get(0).getCountryCode()+"----------"+countryCodes.get(0).getCountryName());
			// }
		 }
		 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}
@RequestMapping(value="/rosterMedia/{rid}/{bid}", method=RequestMethod.GET)
public ModelAndView rosterMedia(@PathVariable String rid, @PathVariable String bid, HttpServletRequest request) throws CSException
{
	ModelAndView model=null;
	model= new ModelAndView("rosterMedia");
	HttpSession session=request.getSession(true);
	
	if(session != null && session.getAttribute("USRID")!=null){
		
		UUID userId= (UUID) session.getAttribute("USRID");
		
		hubReq=new HubRequest();
		hubReq.setMsgType(97);
		 ModelMap map2=new ModelMap();			
		 map2.put("rosterId", rid);			 
		 map2.put("boardId", bid);
		 map2.put("attachmentType", "video");
		 hubReq.setRequestParam(map2);
		 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoarddetail2!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
			if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
			{
				model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
				
			}
		 }	
		 
		 hubReq=new HubRequest();
			hubReq.setMsgType(96);
			 ModelMap map4=new ModelMap();			
			 map4.put("rosterId", rid);			 
			 map4.put("boardId", bid);
			 map4.put("attachmentType", "image");
			 hubReq.setRequestParam(map4);
			 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoarddetail2!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
				if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
				{
					model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
					
				}
			 }	
			 
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map3=new ModelMap();
		 map3.put("userId", userId);
		 map3.put("startNode", 0);
		 map3.put("endNode", 200);
		  hubReq.setRequestParam(map3);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
			 if(hubResponse2!=null && hubResponse2.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
		 HubRequest hubReq1=new HubRequest(40);
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", bid);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
			{
				model.addObject("BoardId", bid);
				 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				
			}
		 }	
		 
		 model.addObject("rosterId", rid);
		
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;
}
@RequestMapping(value="/saveRoasterFile", method=RequestMethod.POST)
@ResponseBody
public ModelAndView saveRoasterFile(@ModelAttribute RoasterMedia roasterMedia ,HttpServletRequest request,BindingResult result, ModelMap modelMap) throws IOException, CSException
{
	
	
	/*System.out.println("1 ->"+ServletFileUpload.isMultipartContent(request));
	
	DiskFileItemFactory factory = new DiskFileItemFactory();

	// Set factory constraints
//	factory.setSizeThreshold(100);
	//factory.setRepository(yourTempDirectory);

	// Create a new file upload handler
	ServletFileUpload upload = new ServletFileUpload(factory);

	// Set overall request size constraint
//	upload.setSizeMax(210743600);

	
	
	try {
		List<FileItem> items = upload.parseRequest(request);
		
		System.out.println("2->"+items.size());
		
		Iterator<FileItem> iter = items.iterator();
		while (iter.hasNext()) {
		    FileItem item = iter.next();
System.out.println("fired");
		    if (item.isFormField()) {
		    	System.out.println("boardid: "+item.getFieldName()+"---value:--"+item.getString());
		    } else {
		    	System.out.println("MULTIPAORT"); 
		    }
		}
	} catch (FileUploadException e) {
		
		e.printStackTrace();
	}*/
	
	

	
/*	private int id;
	private String imageOrVideoByteDatastr;
	private String attachmentType;
	private String attachmentUrl;*/
	
	ModelAndView model=null;
	//model= new ModelAndView("rosterMedia");
	HttpSession session=request.getSession(true);
	
	if(session != null && session.getAttribute("USRID")!=null){
		UUID userId= (UUID) session.getAttribute("USRID");	
		System.out.println("boardid: "+roasterMedia.getBoardId());
		System.out.println("file: "+roasterMedia.getAttachment());
		System.out.println("rosterid---> "+roasterMedia.getRosterId());
		System.out.println("roasterMedia.getAttachment().getContentType()---> "+roasterMedia.getAttachment().getContentType());
		String[] fileType=roasterMedia.getAttachment().getContentType().split("/");		
		FeedImage img= new FeedImage();
		img.setAttachmentType(fileType[0]);
		 String imageDataString= new sun.misc.BASE64Encoder().encode(roasterMedia.getAttachment().getBytes());
		img.setImageOrVideoByteDatastr(imageDataString);
		List<FeedImage> imglist= new ArrayList<FeedImage>();
		imglist.add(img);
		roasterMedia.setFileAttachement(imglist);
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(86);
		 ModelMap map1=new ModelMap();				
		 map1.put("rosterId", roasterMedia.getRosterId());			 
		 map1.put("boardId", roasterMedia.getBoardId());
		 map1.put("fileAttachement", imglist);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 if(strBoarddetail!=null)
		 {
			 
		 }
		model=new ModelAndView("redirect:/rosterMedia/"+roasterMedia.getRosterId()+"/"+roasterMedia.getBoardId());
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;
}


@RequestMapping(value="/boardEvent/{bid}", method=RequestMethod.GET)
public ModelAndView boardEvent(HttpServletRequest request,@PathVariable String bid)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
		//	model= new ModelAndView("UserEventuList2");
		//	model= new ModelAndView("boardEventList");
		
			model= new ModelAndView("boardEventList2");
			//model= new ModelAndView("boardEventPublic");
			//boardEventPublic.jsp
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			 
			 /*{
				 "msgType":123,
				 "requestParam": {

				 }
				 }
				 */
			 
			/* hubReq=new HubRequest();
			 //hubReq.setMsgType(123);
			 hubReq.setMsgType(150);
			 ModelMap eventmap=new ModelMap();
			// eventmap.put("createdBy", "30bbcfeb-0043-48fd-8632-ecde0e28205f");
			// eventmap.put("createdBy", userId);
			 eventmap.put("userId", bid);
			// eventmap.put("userId", "53281105-6a13-47c6-b7ea-e37aaf4ddd75");
			  hubReq.setRequestParam(eventmap);
			 String streventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(streventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getEventListing()!=null)
				 {
					 //model.addObject("EventList", hubResponse2.getResults().getEventList());
					 if( hubResponse2.getResults().getEventListing().size() != 0){
					 model.addObject("EventList", hubResponse2.getResults().getEventListing().get(0));
					 System.out.println("3333333333333333"+hubResponse2.getResults().getEventListing().get(0).getUpcomingeventObj());
					 }
					 
					 }
				 
			 }*/
			 
			 ModelMap neweventmap=new ModelMap();
			// neweventmap.put("userId", "1dfcf4f8-87e7-4849-986b-1a35777073cf");
			 neweventmap.put("userId", bid);
			 neweventmap.put("loggedUserId", userId);
			 neweventmap.put("startNode", 0);
			 neweventmap.put("endNode", 20);
			 hubReq= new HubRequest();
			 hubReq.setMsgType(222);
			 hubReq.setRequestParam(neweventmap);
			 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strneweventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
				 {
					 model.addObject("MyEvents", hubResponse2.getResults().getCreatedEventList());
				 }
			 }
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", userId);			 
			 map11.put("boardId", bid);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));					 						
							
				}
			 }	

			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}


@RequestMapping(value="/UmpireList/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView umpireList(@PathVariable String boardId, HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
			if(session!=null && session.getAttribute("USRID")!=null)
			{
		
		System.out.println("board id:"+boardId);
		mav = new ModelAndView("UmpireList");

		 mav.addObject("boardId",boardId);

		 ModelMap modelMap = new ModelMap();
		modelMap.put("boardId", boardId);
		//modelMap.put("paginationFlag", "No");
		//modelMap.put("tokenId", 0);
		hubReq = new HubRequest(65);
		hubReq.setMsgType(65);
		hubReq.setRequestParam(modelMap);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder gsonBuilder = new GsonBuilder();
		 Gson gson = gsonBuilder.create();
		 
		 UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList1=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson1 = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson1.fromJson(strBoardList1, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
		 
		 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoardId", boardId);
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
	
				 
				 
		 
		 if(strBoardList != null){
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {					 
				 mav.addObject("BoardUmpireList", hubResponse.getResults().getBoardUmpireList());
				 if(hubResponse.getResults().getBoardUmpireList() != null){
				 mav.addObject("BoardUmpireListSize", hubResponse.getResults().getBoardUmpireList().size());
				 }else{
					 mav.addObject("BoardUmpireListSize", 0);
				 }
				 /* if(hubResponse.getResults().getBoardUmpireList().size() != 0){
				 mav.addObject("hiddenToken", hubResponse.getResults().getBoardUmpireList().get(hubResponse.getResults().getBoardUmpireList().size() - 1).getTokenId());
				 }else{
					 mav.addObject("hiddenToken", "");
				 }*/
				 
				 
			 }else{
				 mav.addObject("BoardUmpireListSize", hubResponse.getResults().getBoardUmpireList().size());
			 }
		 }else{
			 mav = new ModelAndView("redirect:/CreateUmpire.htm");
		 }
		 
		 
		 
			}else{
				mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/deleteUmpireList",method=RequestMethod.POST)
public @ResponseBody List<BoardUmpire> deleteUmpire(@RequestBody BoardUmpire umpire,HttpServletRequest req){
	
	 List<BoardUmpire> umpireBoard = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		ModelMap map = new ModelMap();
		map.put("boardId", umpire.getBoardId());
		map.put("umpireId", umpire.getUmpireId());
		
		hubReq = new HubRequest(81);
		hubReq.setMsgType(81);
		hubReq.setRequestParam(map);
		umpireBoard = new ArrayList<BoardUmpire>();
		
		
		
		 String boardListAfterDelete = cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(boardListAfterDelete != null){
			 HubResponse hubRes = gson.fromJson(boardListAfterDelete, HubResponse.class);
			 if(hubRes != null && hubRes.getResults() != null)
			 {
				 umpireBoard = hubRes.getResults().getUmpireList();
				 System.out.println("list size --"+umpireBoard.size());
			 }
			 else{
				 umpireBoard = new ArrayList<BoardUmpire>();
			 }
		 }
		}else{
			ModelAndView mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return umpireBoard;
	
}	

@RequestMapping(value="/CreateGround/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView createGround(@PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = new ModelAndView();
	try{

		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
		System.out.println(boardId);
		mav = new ModelAndView("CreateGround");
		mav.addObject("boardId", boardId);
		
	
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		/*String latlng = (String) session.getAttribute("USRLocation");
		ModelMap map = new ModelMap();
		map.put("latlng", latlng);
		map.put("startNode", 0);
		map.put("endNode", 10);
		hubReq = new HubRequest();
		hubReq.setMsgType(0);
		hubReq.setRequestParam(map);
		
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes != null){
				
			}
		}*/
		
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			 
			 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/GroundList/boardId/{boardId}",method=RequestMethod.GET)
public ModelAndView groundList(@PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
		mav = new ModelAndView("GroundList");
		mav.addObject("boardId", boardId);
		hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);
		//model.put("paginationFlag", "No");
		//model.put("tokenId", 0);
		
		
		
		System.out.println("board Id :"+boardId);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		hubReq.setRequestParam(model);
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response !=  null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			/* if(hubRes.getResults().getGroundList().size() != 0){
					 mav.addObject("hiddenToken",hubRes.getResults().getGroundList().get(hubRes.getResults().getGroundList().size() - 1).getTokenId());
					 }else{
						 mav.addObject("hiddenToken", "");
					 } */
			}
			else{
				 mav.addObject("groundListSize", hubRes.getResults().getGroundList().size());
			}
		}
		
		
		
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			 
			 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/deleteGround",method=RequestMethod.POST)
public @ResponseBody String deleteGround(@RequestBody Ground ground,HttpServletRequest req){
	
	 String response = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		ModelMap map = new ModelMap();
		map.put("groundId", ground.getGroundId());
		
		hubReq = new HubRequest(84);
		hubReq.setMsgType(84);
		hubReq.setRequestParam(map);
		
		
		 String gorundListAfterDelete = cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(gorundListAfterDelete != null){
			 HubResponse hubRes = gson.fromJson(gorundListAfterDelete, HubResponse.class);
			 if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getStatus() != "")
			 {
				response = "success";
			 }
			 else{
			    response = "failure";
			 }
		 }
		}else{
		ModelAndView mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
	
}	

@RequestMapping(value="insertUmpireDetails",method=RequestMethod.POST)
public @ResponseBody String insertUmpireDetails(@RequestBody BoardUmpire umpire,HttpServletRequest req){
	String response = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		hubReq = new HubRequest(61);
		hubReq.setRequestParam(umpire);
		
		String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		if(returnResponse != null){
			HubResponse hubRes = gson.fromJson(returnResponse, HubResponse.class);
			if(hubRes != null && hubRes.getResults() != null){
				String responseStatus = hubRes.getResults().getUmpireStatus();
				if(responseStatus.equalsIgnoreCase("created successfully")){
					response = "success";
				}else{
					response = "failure";
				}
			}
		}
		}
		else{
		ModelAndView mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}

@RequestMapping(value="/EditUmpirePage/umpireId/{umpireId}/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView  editUmpirePage(@PathVariable String umpireId, @PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		hubReq = new HubRequest(82);
		hubReq.setMsgType(82);
		ModelMap map = new ModelMap();
		map.put("umpireId", umpireId);
		map.put("boardId", boardId);
		hubReq.setRequestParam(map);
		String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		
		
		
		if(response != null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getUmpireDetails().size() != 0){
				mav = new ModelAndView("EditUmpirePage");
				mav.addObject("umpireDetails", hubRes.getResults().getUmpireDetails().get(0));
				mav.addObject("boardId", boardId);
				mav.addObject("umpireId", umpireId);
				
				String homePhone1 = hubRes.getResults().getUmpireDetails().get(0).getHomePhone();
				if(homePhone1 != "" && homePhone1 != null && homePhone1.contains("-")){
					String[] phoneArray = homePhone1.split("-");
					String homeCountryCode = phoneArray[0];
					String homeAreaCode = phoneArray[1];
					String homePhone = phoneArray[2];
					mav.addObject("homeCountryCode",homeCountryCode );
					mav.addObject("homeACode",homeAreaCode );
					mav.addObject("homePhone", homePhone);
					System.out.println("homeAreaCode :"+homeAreaCode);
				}else{
					mav.addObject("homeCountryCode","" );
					mav.addObject("homeAreaCode", "");
					mav.addObject("homePhone", "");
				}
				String workPhone1 = hubRes.getResults().getUmpireDetails().get(0).getWorkPhone();
				if(workPhone1 != "" && workPhone1 != null && workPhone1.contains("-")){
					String[] phoneArray1 = workPhone1.split("-");
					String workCountryCode = phoneArray1[0];
					String workAreaCode = phoneArray1[1];
					String workPhone = phoneArray1[2];
					mav.addObject("workCountryCode",workCountryCode );
					mav.addObject("workAreaCode",workAreaCode );
					mav.addObject("workPhone", workPhone);
				}else{
					mav.addObject("workCountryCode","" );
					mav.addObject("homeAreaCode", "");
					mav.addObject("workPhone", "");
				}
				
				String cellPhone1 = hubRes.getResults().getUmpireDetails().get(0).getCellPhone();
				System.out.println("----"+cellPhone1);
				System.out.println("---->>"+cellPhone1.length());
				cellPhone1.trim();
				System.out.println("---->>"+cellPhone1.length());
				if(cellPhone1 != "" && cellPhone1 != null && cellPhone1.contains("-") && cellPhone1.length()>1){
					String[] phoneArray2 = cellPhone1.split("-");
					String cellAreaCode="";
					String cellPhone="";
					
					if(phoneArray2.length == 0){
						cellAreaCode = "";
						cellPhone = "";
					}else if(phoneArray2.length == 1) {	
					    cellAreaCode = phoneArray2[0];
					    cellPhone = "";
					}else{
						cellAreaCode = phoneArray2[0];
						cellPhone = phoneArray2[1];
					}
				    
					mav.addObject("cellAreaCode",cellAreaCode );
					mav.addObject("cellPhone", cellPhone);
				}else{
					mav.addObject("cellAreaCode","");
					mav.addObject("cellPhone", "");
				}
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoardId", boardId);
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
				 System.out.println("ccccccccccccc======");
				//*************************** Getting Country code  ***************************************
				 HubRequest hubReq2=new HubRequest();
				 hubReq2.setMsgType(249);
				 ModelMap map2=new ModelMap();			
				 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq2);		
				 if(contryCodeString != null){
					 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
					 System.out.println("res----->>123>"+userDetails);
					/* if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
					 {*/
						 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
						 mav.addObject("countryCodes", countryCodes);
						 System.out.println("ccccccccccccc======"+countryCodes.get(0).getCountryCode()+"----------"+countryCodes.get(0).getCountryName());
					// }
				 }
				
				
			}else{
				mav = new ModelAndView("EditUmpirePage");
			}
		}
		
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		 	
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			//*************************** Getting Country code  ***************************************
			 HubRequest hubReq2=new HubRequest();
			 hubReq2.setMsgType(249);
			 ModelMap map2=new ModelMap();			
			 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq2);		
			 if(contryCodeString != null){
				 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
				 System.out.println("res----->>123>"+userDetails);
				/* if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
				 {*/
					 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
					 mav.addObject("countryCodes", countryCodes);
					 System.out.println("ccccccccccccc======"+countryCodes.get(0).getCountryCode()+"----------"+countryCodes.get(0).getCountryName());
				// }
			 }
			 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
		 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
	
}


@RequestMapping(value="/CoordinatorEditUmpirePage/umpireId/{umpireId}/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView  coordinatoreditUmpirePage(@PathVariable String umpireId, @PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		hubReq = new HubRequest(82);
		hubReq.setMsgType(82);
		ModelMap map = new ModelMap();
		map.put("umpireId", umpireId);
		map.put("boardId", boardId);
		hubReq.setRequestParam(map);
		String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		
		
		
		if(response != null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getUmpireDetails().size() != 0){
				mav = new ModelAndView("EditUmpireCoordinatorpage");
				mav.addObject("umpireDetails", hubRes.getResults().getUmpireDetails().get(0));
				mav.addObject("boardId", boardId);
				mav.addObject("umpireId", umpireId);
				
				String homePhone1 = hubRes.getResults().getUmpireDetails().get(0).getHomePhone();
				if(homePhone1 != "" && homePhone1 != null && homePhone1.contains("-")){
					String[] phoneArray = homePhone1.split("-");
					String homeCountryCode = phoneArray[0];
					String homeAreaCode = phoneArray[1];
					String homePhone = phoneArray[2];
					mav.addObject("homeCountryCode",homeCountryCode );
					mav.addObject("homeACode",homeAreaCode );
					mav.addObject("homePhone", homePhone);
					System.out.println("homeAreaCode :"+homeAreaCode);
				}else{
					mav.addObject("homeCountryCode","" );
					mav.addObject("homeAreaCode", "");
					mav.addObject("homePhone", "");
				}
				String workPhone1 = hubRes.getResults().getUmpireDetails().get(0).getWorkPhone();
				if(workPhone1 != "" && workPhone1 != null && workPhone1.contains("-")){
					String[] phoneArray1 = workPhone1.split("-");
					String workCountryCode = phoneArray1[0];
					String workAreaCode = phoneArray1[1];
					String workPhone = phoneArray1[2];
					mav.addObject("workCountryCode",workCountryCode );
					mav.addObject("workAreaCode",workAreaCode );
					mav.addObject("workPhone", workPhone);
				}else{
					mav.addObject("workCountryCode","" );
					mav.addObject("homeAreaCode", "");
					mav.addObject("workPhone", "");
				}
				
				String cellPhone1 = hubRes.getResults().getUmpireDetails().get(0).getCellPhone();
				System.out.println("----"+cellPhone1);
				System.out.println("---->>"+cellPhone1.length());
				cellPhone1.trim();
				System.out.println("---->>"+cellPhone1.length());
				if(cellPhone1 != "" && cellPhone1 != null && cellPhone1.contains("-") && cellPhone1.length()>1){
					String[] phoneArray2 = cellPhone1.split("-");
					String cellAreaCode="";
					String cellPhone="";
					
					if(phoneArray2.length == 0){
						cellAreaCode = "";
						cellPhone = "";
					}else if(phoneArray2.length == 1) {	
					    cellAreaCode = phoneArray2[0];
					    cellPhone = "";
					}else{
						cellAreaCode = phoneArray2[0];
						cellPhone = phoneArray2[1];
					}
				    
					mav.addObject("cellAreaCode",cellAreaCode );
					mav.addObject("cellPhone", cellPhone);
				}else{
					mav.addObject("cellAreaCode","");
					mav.addObject("cellPhone", "");
				}
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoardId", boardId);
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
				 System.out.println("ccccccccccccc======");
				//*************************** Getting Country code  ***************************************
				 HubRequest hubReq2=new HubRequest();
				 hubReq2.setMsgType(249);
				 ModelMap map2=new ModelMap();			
				 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq2);		
				 if(contryCodeString != null){
					 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
					 System.out.println("res----->>123>"+userDetails);
					/* if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
					 {*/
						 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
						 mav.addObject("countryCodes", countryCodes);
						 System.out.println("ccccccccccccc======"+countryCodes.get(0).getCountryCode()+"----------"+countryCodes.get(0).getCountryName());
					// }
				 }
				 
				
				
			}else{
				mav = new ModelAndView("EditUmpireCoordinatorpage");
			}
		}
		
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		 	
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			//*************************** Getting Country code  ***************************************
			 HubRequest hubReq2=new HubRequest();
			 hubReq2.setMsgType(249);
			 ModelMap map2=new ModelMap();			
			 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq2);		
			 if(contryCodeString != null){
				 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
				 System.out.println("res----->>123>"+userDetails);
				/* if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
				 {*/
					 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
					 mav.addObject("countryCodes", countryCodes);
					 System.out.println("ccccccccccccc======"+countryCodes.get(0).getCountryCode()+"----------"+countryCodes.get(0).getCountryName());
				// }
			 }
			 
			 
			 
				//*********************************************************** Boad Fan check  ******************************************************
			 hubReq= new HubRequest();
			 hubReq.setMsgType(76);
			 ModelMap fanmap4=new ModelMap();
			 fanmap4.put("boardId",boardId);
			 fanmap4.put("userId", userId);						
			 hubReq.setRequestParam(fanmap4);
			 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
			 boolean buddyFan=false;
			 if(buddyFandeatil!=null)
			 {
				 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
				 if(buddyFanResponse!=null)
				 {
					 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
					 {
						 buddyFan=true;
					 }
				 }
				 
			 }
			// buddyFan=true;
			 System.out.println("board : "+buddyFan);
			 mav.addObject("BoardFanReq", buddyFan);
	
			 
			 
			 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
		 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
	
}




@RequestMapping(value="updateUmpireDetails",method=RequestMethod.POST)
public @ResponseBody String updateUmpireDetails(@RequestBody BoardUmpire umpire,HttpServletRequest req){
	String response = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		hubReq = new HubRequest(83);
		hubReq.setMsgType(83);
		hubReq.setRequestParam(umpire);
		
		String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		if(returnResponse != null){
			HubResponse hubRes = gson.fromJson(returnResponse, HubResponse.class);
			if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getUmpireStatus() != ""){
				String responseStatus = hubRes.getResults().getUmpireStatus();
				if(responseStatus.equalsIgnoreCase("updated successfully")){
					response = "success";
				}else{
					response = "failure";
				}
			}
		}
		}else{
		ModelAndView mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}


@RequestMapping(value="/EditGround/groundId/{groundId}/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView  editGround( @PathVariable String groundId,@PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		mav = new ModelAndView("EditGroundPage");
		mav.addObject("groundId", groundId);
		mav.addObject("boardId", boardId);
	

		hubReq = new HubRequest(90);
		hubReq.setMsgType(90);
		ModelMap map = new ModelMap();
		map.put("groundId", groundId);
		hubReq.setRequestParam(map);
		String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		if(response != null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getGroundList().size() != 0){
				mav = new ModelAndView("EditGroundPage");
				mav.addObject("groundDetails", hubRes.getResults().getGroundList().get(0));
				mav.addObject("groundId", groundId);
				
			}
		}
		
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			 
			 
		 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;

}


@RequestMapping(value="/CoordinatorEditGround/groundId/{groundId}/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView  CoordinatoreditGround( @PathVariable String groundId,@PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		mav = new ModelAndView("CoordinatorEditPage");
		mav.addObject("groundId", groundId);
		mav.addObject("boardId", boardId);
	

		hubReq = new HubRequest(90);
		hubReq.setMsgType(90);
		ModelMap map = new ModelMap();
		map.put("groundId", groundId);
		hubReq.setRequestParam(map);
		String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		if(response != null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getGroundList().size() != 0){
				mav = new ModelAndView("CoordinatorEditPage");
				mav.addObject("groundDetails", hubRes.getResults().getGroundList().get(0));
				mav.addObject("groundId", groundId);
				
			}
		}
		
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			//*********************************************************** Boad Fan check  ******************************************************
			 hubReq= new HubRequest();
			 hubReq.setMsgType(76);
			 ModelMap fanmap4=new ModelMap();
			 fanmap4.put("boardId",boardId);
			 fanmap4.put("userId", userId);						
			 hubReq.setRequestParam(fanmap4);
			 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
			 boolean buddyFan=false;
			 if(buddyFandeatil!=null)
			 {
				 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
				 if(buddyFanResponse!=null)
				 {
					 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
					 {
						 buddyFan=true;
					 }
				 }
				 
			 }
			// buddyFan=true;
			 System.out.println("board : "+buddyFan);
			 mav.addObject("BoardFanReq", buddyFan);
	
			 
		 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;

}




@RequestMapping(value="/teamSearch", method=RequestMethod.POST)
public @ResponseBody SearchResponse teamSearch( HttpServletRequest req,@RequestBody String name)
{
	SearchResponse response=null;
	System.out.println("key value : "+name);
	try{
	HttpSession session=req.getSession(true);
		
			if(session!=null && session.getAttribute("USRID")!=null)
			{
		 hubReq=new HubRequest(88); 
		 hubReq.setMsgType(88);
		
		
		 ModelMap map = new ModelMap();
		 map.put("startNode", 0);
		 map.put("endNode", 20);
		 map.put("searchQuery", name);

		 hubReq.setRequestParam(map);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		    GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		   HubResponse hubres =gson.fromJson(result, HubResponse.class);
		   if(hubres.getResults()!=null) {
			   response=hubres.getResults().getSearchResponse();
				
				
		   }
		   
		  }else{
		  
		   }
		  
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	   
	return response;
}


@RequestMapping(value="insertGroundDetails",method=RequestMethod.POST)
public @ResponseBody String insertGroundDetails(@RequestBody Ground gnd,HttpServletRequest req){
	String response = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
		String latlng = (String) session.getAttribute("USRLocation");
		
		hubReq = new HubRequest(89);
		hubReq.setMsgType(89);
		//gnd.setLatLang(gnd.getLatLang());
		System.out.println("gnd.getLatLang   :"+gnd.getLatLang());
		hubReq.setRequestParam(gnd);
		
		String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		if(returnResponse != null){
			HubResponse hubRes = gson.fromJson(returnResponse, HubResponse.class);
			if(hubRes != null && hubRes.getResults() != null){
				String responseStatus = hubRes.getResults().getGroundStatus();
				if(responseStatus.equalsIgnoreCase("created successfully")){
					response = "success";
				}else{
					response = "failure";
				}
			}
		}
		
		}else{
			ModelAndView mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}


@RequestMapping(value="updateGroundDetails",method=RequestMethod.POST)
public @ResponseBody String updateGroundDetails(@RequestBody Ground ground,HttpServletRequest req ){
	String response = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		String latlng = (String) session.getAttribute("USRLocation");
		hubReq = new HubRequest(91);
		hubReq.setMsgType(91);
		//ground.setLatLang(latlng);
		hubReq.setRequestParam(ground);
		
		String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		if(returnResponse != null){
			HubResponse hubRes = gson.fromJson(returnResponse, HubResponse.class);
			if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getGroundStatus() != ""){
				String responseStatus = hubRes.getResults().getGroundStatus();
				if(responseStatus.equalsIgnoreCase("updated successfully")){
					response = "success";
				}else{
					response = "failure";
				}
			}
		}
		}else{
			ModelAndView mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}

@RequestMapping(value="/CreateSchedule/boardId/{boardId}",method= RequestMethod.GET)
public ModelAndView createSchedule(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		mav = new ModelAndView("CreateSchedule");
		mav.addObject("boardId", boardId);
        UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
		  
		  GsonBuilder builder = new GsonBuilder();
		  Gson gson = builder.create();
		  
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
	 hubReq = new HubRequest(92);
	 hubReq.setMsgType(92);
	 ModelMap map = new ModelMap();
	 map.put("createdBy", boardId);
	 hubReq.setRequestParam(map);
	 
	 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(response != null){
		 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
		 if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getTournamentDetails() != null){
			 if(hubRes.getResults().getTournamentDetails().size() != 0){
				 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
				 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
			 }
			 
		 }else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
		 }
	 }
	 
	    hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);

		hubReq.setRequestParam(model);
		String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(groundList !=  null){
			HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}
		hubReq = new HubRequest(191);
		hubReq.setMsgType(191);
		
		ModelMap mod= new ModelMap();
		mod.put("createdBy", boardId);
		hubReq.setRequestParam(mod);
		String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(tournamentListOfTheBoard !=  null){
			HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
				mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}
		
		/* hubReq = new HubRequest(95);
			hubReq.setMsgType(95);
			ModelMap mod= new ModelMap();
			mod.put("boardId", boardId);
			hubReq.setRequestParam(mod);
			String teamList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(teamList !=  null){
				HubResponse  hubRes = gson.fromJson(teamList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("teamList", hubRes.getResults().getTournamentList());

					System.out.println("list size-- :"+hubRes.getResults().getTournamentList().size());
				}
		 
			}	*/
		List<UmpireNameList> umpireList = new ArrayList<UmpireNameList>();
			hubReq = new HubRequest(223);
			hubReq.setMsgType(223);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					//System.out.println("scorer list size :"+ hubRes.getResults().getTournamentSchedulerList().get(0).getScorerNamesList().size());
					/*if(hubRes.getResults().getTournamentsList().size() != 0)
					{
						List<TournamentScheduler> list = hubRes.getResults().getTournamentsList();
						
						if(list.size() != 0){
							
							for(int i =0 ; i < list.size(); i++){
								Date date = list.get(i).getGameDate();
								DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
								String dateFor = df.format(date);
								
								mav.addObject("date", dateFor);
								System.out.println("date:"+dateFor);
								
									System.out.println("i size "+i);
									System.out.println("size :"+list.size());
								mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList());
								System.out.println("umpire Name : "+hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList().get(0).getUmpireName());
								
								
							}
					//mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(0).getUmpireNamesList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				
						}
						}*/
				}
		 
			}	
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
			
	}else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
	}
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/CreateScheduleLanding/boardId/{boardId}",method= RequestMethod.GET)
public ModelAndView createScheduleLanding(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
	HttpSession session = req.getSession(true);
	
	if(session != null && session.getAttribute("USRID") != null){
		
		String showalert=(String) session.getAttribute("CreateScheduleLanding");
		mav = new ModelAndView("CreateScheduleLanding");
		mav.addObject("boardId", boardId);
		if(showalert != null){
		if(showalert.equalsIgnoreCase("Created"))
		{
			mav.addObject("Showalert", "Yes");
			session.setAttribute("CreateScheduleLanding", "Old");
		}else
		{
			mav.addObject("Showalert", "No");
		}}
		
		String updatealert=(String) session.getAttribute("UpdateScheduleLanding");
		if(updatealert != null){
		if(updatealert.equalsIgnoreCase("Created"))
		{
			mav.addObject("Showalertupdate", "YesUpdate");
			session.setAttribute("UpdateScheduleLanding", "Old");
		}else
		{
			mav.addObject("Showalertupdates", "No");
		}
		}
		
        UUID userId = (UUID) session.getAttribute("USRID");
        
        GsonBuilder builder = new GsonBuilder();
		  Gson gson = builder.create();
        
		 hubReq = new HubRequest(266);
			hubReq.setMsgType(266);
			ModelMap m5 = new ModelMap();
			m5.put("createdBy", boardId);
			
			hubReq.setRequestParam(m5);
			String tournamentListforLanding = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentListforLanding !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentListforLanding, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentLandingList", hubRes.getResults().getRecentScheduleList());
					
				}
			}
        
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
		  
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
	 hubReq = new HubRequest(92);
	 hubReq.setMsgType(92);
	 ModelMap map = new ModelMap();
	 map.put("createdBy", boardId);
	 hubReq.setRequestParam(map);
	 
	 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(response != null){
		 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
		 if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getTournamentDetails() != null){
			 if(hubRes.getResults().getTournamentDetails().size() != 0){
				 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
				 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
			 }
			 
		 }else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
		 }
	 }
	 
	    hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);

		hubReq.setRequestParam(model);
		String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(groundList !=  null){
			HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
			}
	 
		}
		hubReq = new HubRequest(191);
		hubReq.setMsgType(191);
		
		ModelMap mod= new ModelMap();
		mod.put("createdBy", boardId);
		hubReq.setRequestParam(mod);
		String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(tournamentListOfTheBoard !=  null){
			HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
				mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
			}
	 
		}
		
		List<UmpireNameList> umpireList = new ArrayList<UmpireNameList>();
			hubReq = new HubRequest(223);
			hubReq.setMsgType(223);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
							}
		 
			}	
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
			
	}else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
	}
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}
@RequestMapping(value="/insertScheduleDetails",method=RequestMethod.POST)
public ModelAndView insertScheduleDetails(HttpServletRequest req, @ModelAttribute Scheduler scheduler){
	String response =  null;
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			 String boardId = scheduler.getCreatedBy();
			
			
			String dateString = scheduler.getGameDateStr();

			System.out.println("date string :"+dateString);
			
			/*String[] spliteDOB = dateString.split("/");
			
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 			
			 String convertedDate= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(convertedDate);*/
			
			/*System.out.println("date string value:"+dateString);
			scheduler.getGameTime().replace(" ", "");*/
				
			//System.out.println("date string value:"+dateString);
			//System.out.println("get game time "+scheduler.getGameTime());
			String strpmtime=scheduler.getGameTime().replaceAll("PM", "PM");
			String strAmTime=strpmtime.replaceAll("AM", "AM");
			//System.out.println("time ----------------> "+strAmTime);
		    String time[] = strAmTime.split(":");
			String hourString=time[0].trim();
			String timeString=time[1].trim();
			//System.out.println("first value-"+hourString+" second value "+timeString+" length-"+hourString.length());
			if(hourString.length() == 1){
				hourString = "0"+hourString;
				timeString = hourString+":"+timeString;
			}else{
				hourString = hourString;
				timeString = hourString+":"+timeString;
			}
			//System.out.println("time ----------------> 123-"+timeString);
			//System.out.println("time ----------------> 1234-"+dateString+" "+timeString);
			//event.setEventDateAndTime(DateUtil.getDatabaseDateString2UTC(event.getStrDate()+" "+strAmTime));					
			
			String convertedDate = DateUtil.getUTCDate1(dateString+" "+timeString,req.getParameter("timeZone"));
			
			System.out.println("final date : "+convertedDate);
			
			Map<String, String> myMap = new HashMap<String, String>();
		
			String idList = scheduler.getScorerId();
			List<ScorerBean> scorerIdList = new ArrayList<ScorerBean>();
			System.out.println("id list :"+idList);
			List<String> scorerIds;
			if(idList.isEmpty()){
				scorerIds=null;
			}else{
			if(idList!= null){
			    scorerIds = Arrays.asList(idList.split(","));
				for(int i = 0; i<scorerIds.size(); i++){
					String scorerId = scorerIds.get(i);
					ScorerBean updatedId = new ScorerBean();
					updatedId.setScorerId(scorerId);
					System.out.println("id: "+scorerId);
				 
					scorerIdList.add(updatedId);
				System.out.println(scorerIdList);
				}

			}
			}
			
			
			String portalidList=scheduler.getPortalscorerId();
			List<ScorerBean> portalscoreridlist=new ArrayList<ScorerBean>();
			List<String> portalscorerids;
			if(portalidList.isEmpty())
			{
				portalscorerids=null;
			}else{
				if(portalidList != null)
				{
					portalscorerids=Arrays.asList(portalidList.split(","));
					for(int i=0;i<portalscorerids.size();i++)
					{
						String portalscorerid=portalscorerids.get(i);
						ScorerBean updatedId=new ScorerBean();
						updatedId.setScorerId(portalscorerid);
						portalscoreridlist.add(updatedId);
					}
				}
			}
			
			
			
			
			
			String ids = scheduler.getUserId();
			if(ids!= null){
			List<String> umpireIds = Arrays.asList(ids.split(","));
			
			int count = 1;
			
			
			for(String i : umpireIds){
				if(i.isEmpty()){
					
				myMap.put("umpire_id_"+count, "null");
				
				}else{
					
					myMap.put("umpire_id_"+count, i);
					
				String h="{";
				
				for (Map.Entry<String, String> entry : myMap.entrySet())
				{
				    System.out.println("------------------------"+entry.getKey() + "/" + entry.getValue());
				   
				    
				    
				    String key = entry.getKey();
				    
				    String value = entry.getValue();
				    
				    String key1="'"+key+"'";
				    
				    String value1="'"+value+"'";
				    
					if(h.endsWith("{"))
					{
						  h=h+key1+":"+value1;
					}else{
						  h=h+","+key1+":"+value1;
					}

				}
				
				h=h+"}";
			
				 count++;
				}
				
			}
			
			
			
			}
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			
			
			
			hubReq = new HubRequest();
			hubReq.setMsgType(102);
			System.out.println("Schedule Created Date Converted to local date :"+scheduler.getScheduleCreatedDate());
           
			ModelMap map = new ModelMap();
			map.put("awayTeamId", scheduler.getAwayTeamId());
			map.put("homeTeamId", scheduler.getHomeTeamId());
			//map.put("gameDateStr",convertedDate);
			
			
			SimpleDateFormat sdf1= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			sdf1.setTimeZone(TimeZone.getTimeZone(req.getParameter("timeZone")));
			Date inDate=sdf1.parse(scheduler.getScheduleCreatedDate()); 
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
	        String outDate=sdf.format(inDate);
			
			
			
			
			map.put("gameDateStr",outDate);
			map.put("groundId", scheduler.getGroundId());
			map.put("tournamentId", scheduler.getTournamentId());
			map.put("createdBy", scheduler.getCreatedBy());
			map.put("modifiedBy", scheduler.getCreatedBy());
			map.put("umpireList", myMap);
			map.put("status", "Upcoming");
			map.put("gameDateforMail", scheduler.getGameDateforMail());
			if(scorerIdList != null){
			map.put("scorerNamesList", scorerIdList);
			}
			if(portalscoreridlist !=null)
			{
				map.put("portalScorerList", portalscoreridlist);
			}
			map.put("gameId", scheduler.getGameId());
			map.put("gameTime", strAmTime);
			
			
			hubReq.setRequestParam(map);
			
			String schedulerResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(schedulerResponse != null){
				HubResponse hubRes = gson.fromJson(schedulerResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					
					mav = new ModelAndView("ScheduleList");
					mav.addObject("boardId", boardId);
					
						 hubReq = new HubRequest(104);
							hubReq.setMsgType(104);
							ModelMap m = new ModelMap();
							m.put("createdBy", boardId);
							m.put("previousNextFlag", "current");
							
							hubReq.setRequestParam(m);
							String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
							if(tournamentList !=  null){
								HubResponse  hubResponse = gson.fromJson(tournamentList, HubResponse.class);
								if(hubResponse !=  null && hubResponse.getResults() !=  null){
								/*	mav.addObject("tournamentList", hubResponse.getResults().getTournamentSchedulerList());
									//String scheduleId=hubResponse.getResults().getTournamentSchedulerList().get(0).getTournamentSchedulerId();
									mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
									mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
									
									String endDate = hubResponse.getResults().getEndDateStr();

									String startDate = hubResponse.getResults().getStartDateStr();
									String[] spliteDOB1 = startDate.split("-");
									
									 String monthInEditProfile1 = spliteDOB1[0];
									 String dayInEditProfile1 = spliteDOB1[1];
									 String yearInEditProfile1 = spliteDOB1[2];
									
									 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
									
									
										mav.addObject("startDateSet", startDateSet);
									
									
									String[] spliteDOB123 = endDate.split("-");
									
									 String monthInEditProfile2 = spliteDOB123[0];
									 String dayInEditProfile2 = spliteDOB123[1];
									 String yearInEditProfile2 = spliteDOB123[2];
									 
									
									 String endDateSet= dayInEditProfile2+'/'+yearInEditProfile2+'/'+monthInEditProfile2;
									
									 mav.addObject("endDateSet", endDateSet);*/
									
									session.setAttribute("CreateScheduleLanding", "Created");
									
									 mav=new ModelAndView("redirect:/CreateScheduleLanding/boardId/"+boardId);
									/*mav=new ModelAndView("redirect:/SchedulerList/boardId/"+boardId);*/
								//	 mav=new ModelAndView("redirect:/SchedulerList/boardId/"+boardId+"/"+scheduleId);
									 return mav;
									 
									 
								}
							}
					 
					
					
					
					
					/*if(hubRes.getResults().getTournamentList() != null){
						mav.addObject("tournamentDetails", hubRes.getResults().getTournamentList());
						if(hubRes.getResults().getTournamentList().size() != 0){
						mav.addObject("teamList", hubRes.getResults().getTournamentList().get(0).getBoardSearchBean());
						mav.addObject("umpireCheck", hubRes.getResults().getTournamentList().get(0).getUmpireCheck());
						mav.addObject("tournamentId", hubRes.getResults().getTournamentList().get(0).getTournamentId());
						System.out.println("teamlistSize : "+hubRes.getResults().getTournamentList().get(0).getBoardSearchBean().size());
						}
						}else{
						
					}
					*/
				}
			}
	
		
	        UUID userId = (UUID) session.getAttribute("USRID");
			
	        
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
		
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				
				
				 
				 //Createschedule Redirection methods
				/* hubReq = new HubRequest(85);
					hubReq.setMsgType(85);
					
					ModelMap model= new ModelMap();
					model.put("boardId", boardId);
					hubReq.setRequestParam(model);
					String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(groundList !=  null){
						HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null){
							mav.addObject("groundList", hubRes.getResults().getGroundList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}	 
					
					hubReq = new HubRequest(191);
					hubReq.setMsgType(191);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}
					
					
					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}*/
					
					
					//*************************** Getting Board info  ***************************************
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(40);
					 ModelMap map11=new ModelMap();			
					 map11.put("userId", session.getAttribute("USRID"));			 
					 map11.put("boardId", boardId);
					 hubReq1.setRequestParam(map11);
					 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
					 if(strBoarddetail!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
						{
							 mav.addObject("BoardId", boardId);
							 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
							 final String context = req.getContextPath();
							 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
							 mav.addObject("LeaugeMenuList", menuList);				
						}
					 }	

					/* hubReq = new HubRequest(92);
					 hubReq.setMsgType(92);
					 ModelMap map12 = new ModelMap();
					 map12.put("createdBy", boardId);
					 hubReq.setRequestParam(map12);
					 
					 String strresponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					 if(strresponse != null){
						 HubResponse hubRes = gson.fromJson(strresponse, HubResponse.class);
						 if(hubRes != null && hubRes.getRequestStatus() != null){
							 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
							 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
						 }else{
							 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
						 }
					 }
					
						 
						hubReq = new HubRequest(223);
						hubReq.setMsgType(223);
						ModelMap m = new ModelMap();
						m.put("createdBy",boardId);
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
			
							}
						}*/
			
		}else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/CreateTrophy/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView createTrophy(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null)  {
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
			  
			  GsonBuilder builder = new GsonBuilder();
			  Gson gson = builder.create();
			  
			  mav = new ModelAndView("CreateTrophy");
			  mav.addObject("boardId", boardId);
			  
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoardId", boardId);
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						// final String context = req.getContextPath();
						// MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						// mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
	
			
		}else{
		 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/CreateTournament/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView CreateTournament(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null)  {
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
			  
			  GsonBuilder builder = new GsonBuilder();
			  Gson gson = builder.create();
			  
			  mav = new ModelAndView("CreateTournament");
			  mav.addObject("boardId", boardId);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoardId", boardId);
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
	
				 
				 

		}else{
		 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/insertTournamentDetails", method= RequestMethod.POST)
public ModelAndView insertTournamentDetails(@ModelAttribute Tournament tournament, HttpServletRequest req){
	
	ModelAndView mav = null;
	try{
		System.out.println("inside");
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID")!= null){
			hubReq= new HubRequest(100);
			hubReq.setMsgType(100);
			
			
			List<UmpireIds> teamIdList = new ArrayList<UmpireIds>();
			
			String boardId = req.getParameter("boardId");
			//String boardName = req.getParameter("boardName");
			String tournamentName = req.getParameter("tournamentName");
			String idList = req.getParameter("hiddenID");
			String umpireCheck = req.getParameter("rr");
			int umpireCheckInt = Integer.parseInt(umpireCheck);
			String points = req.getParameter("winpoints"); 
			int winpoints = Integer.parseInt(points);
			
		
			
			if(idList!= null){
			List<String> teamIds = Arrays.asList(idList.split(","));
			for(int i = 0; i<teamIds.size(); i++){
				String teamId = teamIds.get(i);
				UmpireIds updatedString = new UmpireIds();
				updatedString.setTeamid(teamId);
				System.out.println("id: "+teamId);
			 
				teamIdList.add(updatedString);
				System.out.println(teamIdList);
			}
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			
			
			
			
			Tournament t = new Tournament();
			t.setCreatedBy(boardId);
			t.setTeamboardslist(teamIdList);
			t.setTournamentName(tournamentName);
			t.setUmpireCheck(umpireCheckInt);
			t.setWinPoints(winpoints);
		
			
			System.out.println(t.getTeamboardslist().size());
			hubReq.setRequestParam(t);
			
			
			
			String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav = new ModelAndView("CreateSchedule");
					if(hubRes.getResults().getTournamentList() != null){
						mav.addObject("tournamentDetails", hubRes.getResults().getTournamentList());
						 //if(hubRes.getResults()!=null && hubRes.getResults().getTournamentDetails()!=null && hubRes.getResults().getTournamentDetails().size() != 0){
						if(hubRes.getResults()!=null && hubRes.getResults().getTournamentList()!=null && hubRes.getResults().getTournamentList().size() != 0){	
						mav.addObject("teamList", hubRes.getResults().getTournamentList().get(0).getBoardSearchBean());
								mav.addObject("umpireCheck", hubRes.getResults().getTournamentList().get(0).getUmpireCheck());
								mav.addObject("tournamentId", hubRes.getResults().getTournamentList().get(0).getTournamentId());
								System.out.println("teamlistSize : "+hubRes.getResults().getTournamentList().get(0).getBoardSearchBean().size());
						 }else{
							 mav.addObject("umpireCheck", 0);
						 }
						
						
					}else{
						
					}
					
					
				}
			}
	
			//mav = new ModelAndView("CreateSchedule");
			mav.addObject("boardId", boardId);
	        UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
		
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
	/*	
		 hubReq = new HubRequest(92);
		 hubReq.setMsgType(92);
		 ModelMap map = new ModelMap();
		 map.put("createdBy", tournament.getCreatedBy());
		 hubReq.setRequestParam(map);
		 
		 String responseforTournamentDetails = cricketSocialRestTemplateService.userRegistration(hubReq);
		 if(responseforTournamentDetails != null){
			 HubResponse hubRes = gson.fromJson(responseforTournamentDetails, HubResponse.class);
			 if(hubRes != null && hubRes.getRequestStatus() != null){
				 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
				 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
			 }else{
				 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
			 }
		 }*/
		 
		    hubReq = new HubRequest(85);
			hubReq.setMsgType(85);
			
			ModelMap model= new ModelMap();
			model.put("boardId", boardId);
			hubReq.setRequestParam(model);
			String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(groundList !=  null){
				HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("groundList", hubRes.getResults().getGroundList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				}
		 
			}	 
			
			hubReq = new HubRequest(191);
			hubReq.setMsgType(191);
			
			ModelMap mod= new ModelMap();
			mod.put("createdBy", boardId);
			hubReq.setRequestParam(mod);
			String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentListOfTheBoard !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
					mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				}
		 
			}
			
			
			
			
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
				 
				hubReq = new HubRequest(104);
				hubReq.setMsgType(104);
				ModelMap m = new ModelMap();
				m.put("createdBy",boardId);
				hubReq.setRequestParam(m);
				String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(tournamentList !=  null){
					HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
						//System.out.println("scorer list size :"+ hubRes.getResults().getTournamentSchedulerList().get(0).getScorerNamesList().size());
						/*if(hubRes.getResults().getTournamentsList().size() != 0)
						{
							List<TournamentScheduler> list = hubRes.getResults().getTournamentsList();
							if(list.size() != 0){
								for(int i =0 ; i < list.size(); i++){
									Date date = list.get(i).getGameDate();
									System.out.println("date ");
									DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
									String dateFor = df.format(date);
									
									mav.addObject("date", dateFor);
									
									
									
									mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(0).getUmpireNamesList());
								}
						//mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(0).getUmpireNamesList());
						//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
					
							}
							}*/
					}
			 
				}	
			
			
			}
			
		}else{
		 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;

}


@RequestMapping(value="/boardSearchInCreateTournament", method=RequestMethod.GET)

public @ResponseBody Object boardSearchInCreateTounament(HttpServletRequest request,@RequestParam String term) throws CSException
{

		HttpSession session=request.getSession(true);
		Object ob=null;
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID  userId = (UUID) session.getAttribute("USRID");
			 hubReq=new HubRequest(103);
			 hubReq.setMsgType(103);
			 ModelMap map=new ModelMap();
			 map.put("searchQuery", term);
			 //map.put("boardType","Team");
			 map.put("startNode",0);
			 map.put("endNode",10);
			// map.put("userId",userId);
			 hubReq.setRequestParam(map);
			 
			 System.out.println("hubReq :"+hubReq);
			 
			 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 System.out.println("strUseList ");
			 
			 if(strUseList!=null)
			 {
				 HubResponse  searchResponse= gson.fromJson(strUseList, HubResponse.class);
				 if(searchResponse!=null && searchResponse.getResults()!=null)
				 {
					 SearchResponse searchResponse1=searchResponse.getResults().getSearchResponse();
					 if(searchResponse1 != null){
						 ob= searchResponse1.getBoardProfileList();
						 System.out.println(searchResponse1.getBoardProfileList());
					 }				 
				 }else{
					 ob=new ArrayList<UserSearchVO>();
				 }
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
			
		 
		}else{
			 ob=new ArrayList<UserSearchVO>();
			 //model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		return ob;
		
}


@RequestMapping(value="/umpireCheckList/{bid}", method=RequestMethod.GET)
public @ResponseBody Object getUmpireCheckList(@RequestParam String term, @PathVariable String bid, HttpServletRequest req){
	Object ob = null;
	try{
		HttpSession session = req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			System.out.println("board ID "+bid);
			UUID  userId = (UUID) session.getAttribute("USRID");
			 hubReq=new HubRequest(93);
			 hubReq.setMsgType(93);
			 ModelMap map=new ModelMap();
			 map.put("searchQuery", term);
			 map.put("boardId", bid);
			 hubReq.setRequestParam(map);
			 
			 System.out.println("hubReq :"+hubReq);
			 
			 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 if(strUseList!=null)
			 {
				 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
				 if(searchResponse!=null && searchResponse.getResults()!=null)
				 {
					 SearchResults results=searchResponse.getResults();
					 SearchResponse searchResponse1=results.getSearchResponse();
					 if(searchResponse1 != null){
						 ob= searchResponse1.getUserSearchBean();
					 }				 
				 }else{
					 ob=new ArrayList<UserSearchVO>();
				 }
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
			
		 
		}else{
			 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return ob;
}

@RequestMapping(value="/umpireCheckListWithLeauge", method=RequestMethod.POST)
public @ResponseBody Object getumpireCheckListWithLeauge(@RequestBody CenturiesSerach search, HttpServletRequest req){
	Object ob = null;
	try{
		HttpSession session = req.getSession(true);
		System.out.println("dddddddddddddddddddddddddddddddddddddddddddddd---------------------------..................");
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			 UUID  userId = (UUID) session.getAttribute("USRID");
			 hubReq=new HubRequest();
			// hubReq.setMsgType(93);
			 hubReq.setMsgType(238);
			 ModelMap map=new ModelMap();
			 map.put("searchQuery", search.getSearchKey());
			 map.put("boardId", search.getBoardId());
			 hubReq.setRequestParam(map);
			 
			 System.out.println("hubReq :"+map);
			 
			 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 if(strUseList!=null)
			 {
				 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
				 if(searchResponse!=null && searchResponse.getResults()!=null)
				 {
					 SearchResults results=searchResponse.getResults();
					 SearchResponse searchResponse1=results.getSearchResponse();
					 if(searchResponse1 != null){
						 ob= searchResponse1.getUserSearchBean();
					 }				 
				 }else{
					 ob=new ArrayList<UserSearchVO>();
				 }
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
			
		 
		}else{
			 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return ob;
}


@RequestMapping(value="/deleteScheduler", method = RequestMethod.POST)
public @ResponseBody String deleteScheduler(@RequestBody TournamentScheduler ts,HttpServletRequest req){
	String returnRes = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			hubReq = new HubRequest();
			hubReq.setMsgType(105);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", ts.getTournamentSchedulerId() );
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					String res = hubRes.getResults().getStatus();
					if(res != null && res != ""){
						if(res.equalsIgnoreCase("deleted successfully")){
							returnRes = "success";
						}else{
							returnRes = "failure";
						}
					}
				}
			}
					
			
		}else{
		   ModelAndView mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return returnRes;
}

@RequestMapping(value="/editScheduler/boardId/{boardId}/tournamentSchedulerId/{tournamentSchedulerId}/tournamentId/{tournamentId}",method=RequestMethod.GET)
public ModelAndView editScheduler(HttpServletRequest req, @PathVariable String boardId, @PathVariable String tournamentSchedulerId,@PathVariable String tournamentId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			 hubReq = new HubRequest();
			 hubReq.setMsgType(109);
			 ModelMap map = new ModelMap();
			 map.put("tournamentSchedulerId", tournamentSchedulerId);
			 hubReq.setRequestParam(map);
			 
			 GsonBuilder builder  = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				 if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getTournamentSchelduleDetails()!=null){
					 mav = new ModelAndView("EditScheduler");
					 mav.addObject("boardId", boardId);
					 mav.addObject("schedulerDetails", hubRes.getResults().getTournamentSchelduleDetails().get(0));
					 
					
					 
					 mav.addObject("tournamentSchedulerId",  hubRes.getResults().getTournamentSchelduleDetails().get(0).getTournamentSchedulerId());
					 mav.addObject("umpireList", hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 JSONArray arr = new JSONArray(hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 mav.addObject("umpireListForPrePopulate", arr);
					 
					 List<UmpireNameList> listOfUmpires = hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList();
					 List<String> umpireIdList = new ArrayList<String>();
					 
					 System.out.println("size :"+listOfUmpires.size());
					 for(int i=0; i< listOfUmpires.size(); i++){
						 String id = listOfUmpires.get(i).getUmpireId();
						 umpireIdList.add("\"" + id + "\"");
						
					 }
					 
					 
					 mav.addObject("previousUmpireIds", umpireIdList);
				
					 
					 List<UserSearchVO> umpireNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr1 = new JSONArray();
					 for(int k=0; k<listOfUmpires.size(); k++){
						 String name = listOfUmpires.get(k).getUmpireName();
						 UserSearchVO user = new UserSearchVO();
						 user.setFullName(name);
						 user.setId(listOfUmpires.get(k).getUmpireId());
						 umpireNameList.add(user);
						 arr1 = new JSONArray(umpireNameList);
						
					 }
					 mav.addObject("umpireNameList",arr1);
					 System.out.println("umpireNameList :"+arr1);

					 List<ScorerNameList> listOfScorers = hubRes.getResults().getTournamentSchelduleDetails().get(0).getScorerNamesList();
					 List<String> scorerIdList = new ArrayList<String>();
					 for(int i=0; i< listOfScorers.size(); i++){
						 String id = listOfScorers.get(i).getScorerId();
						 scorerIdList.add("\"" + id + "\"");

					 }
					 
					 mav.addObject("previousScorerId", scorerIdList);
					 
					 List<UserSearchVO> scorerNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr2 = new JSONArray();
					 for(int j=0; j < listOfScorers.size(); j++){
						 UserSearchVO userSearch = new  UserSearchVO();
						 userSearch.setId(listOfScorers.get(j).getScorerId());
						 userSearch.setFullName(listOfScorers.get(j).getScorerName());
						 scorerNameList.add(userSearch);
						 arr2 = new JSONArray(scorerNameList);
						
					 }
					 mav.addObject("scorerNameList",arr2);
					 
					 //Portal Scorer
					 
					 List<ScorerNameList> listofportalScorer=hubRes.getResults().getTournamentSchelduleDetails().get(0).getPortalScorerList();
					 List<String> portalscorerIdlist=new ArrayList<String>();
					 for(int i=0; i< listofportalScorer.size();i++)
					 {
						 String id=listofportalScorer.get(i).getScorerId();
						 portalscorerIdlist.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("portalscorerIdlist", portalscorerIdlist);
					 List<UserSearchVO> portalscorernamelist=new ArrayList<UserSearchVO>();
					 JSONArray arr5=new JSONArray();
					 for(int j=0;j<listofportalScorer.size();j++)
					 {
						 UserSearchVO usersearch=new UserSearchVO();
						 usersearch.setId(listofportalScorer.get(j).getScorerId());
						 usersearch.setFullName(listofportalScorer.get(j).getScorerName());
						 portalscorernamelist.add(usersearch);
						 arr5=new JSONArray(portalscorernamelist);
					 }
					 mav.addObject("portalscorerNameList",arr5);
					 
					 
					 System.out.println("scorerNameList :"+arr2);
					 
					 System.out.println("scorerId List :"+scorerIdList);
					 System.out.println("umpireList :"+umpireIdList);
					 Date date = hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate();
						DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
						String dateFor = df.format(date);
						System.out.println("df "+date);
						mav.addObject("dateEdit", dateFor);
						
					/*	DateFormat df1 = new SimpleDateFormat("hh:mma");
						String time = df1.format(date);
						System.out.println("df "+time);
						mav.addObject("timeEdit", time);*/
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("M/d/YYYY hh:mm a");
						simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate());
						System.out.println("simple date format :"+simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
						mav.addObject("eventTime", simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
				 
				 }
			 }
			 
			 hubReq = new HubRequest(85);
				hubReq.setMsgType(85);
				
				ModelMap model= new ModelMap();
				model.put("boardId", boardId);
				hubReq.setRequestParam(model);
				String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(groundList !=  null){
					HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("groundList", hubRes.getResults().getGroundList());
						//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
					}
			 
				}	 
	 
					
				
				/*
				hubReq = new HubRequest(223);
				hubReq.setMsgType(223);
				ModelMap m = new ModelMap();
				m.put("createdBy",boardId);
				hubReq.setRequestParam(m);
				String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(tournamentList !=  null){
					HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
						
					}
			 
				}*/
				
					hubReq = new HubRequest();
					hubReq.setMsgType(113);
					ModelMap map1 = new ModelMap();
					System.out.println("tournamentId *******************: "+tournamentId);
					if(tournamentId != null){
					map1.put("tournamentId",tournamentId);
					hubReq.setRequestParam(map1);
					System.out.println("hub REq param : "+hubReq.getRequestParam());
					String torunamentDetails = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(torunamentDetails != null){
						HubResponse hubRes = gson.fromJson(torunamentDetails, HubResponse.class);
						if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getTournamentDetails()!=null){
							mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails());
							mav.addObject("tournamentName", hubRes.getResults().getTournamentDetails().get(0).getTournamentName());
							mav.addObject("teamList", hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean());
							mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
							mav.addObject("tournamentId", hubRes.getResults().getTournamentDetails().get(0).getTournamentId());
							System.out.println("teamlistSize : "+hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean().size());
						}
					}
					}
					else{
						
					}
					
					
					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					
					

					//*************************** Getting Board info  ***************************************
								 HubRequest hubReq1=new HubRequest();
								 hubReq1.setMsgType(40);
								 ModelMap map11=new ModelMap();			
								 map11.put("userId", session.getAttribute("USRID"));			 
								 map11.put("boardId", boardId);
								 hubReq1.setRequestParam(map11);
								 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
								 if(strBoarddetail!=null)
								 {
									 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
									if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
									{
										 mav.addObject("BoardId", boardId);
										 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
										 final String context = req.getContextPath();
										 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
										 mav.addObject("LeaugeMenuList", menuList);				
									}
								 }	
								 hubReq= new HubRequest();
								 hubReq.setMsgType(41);
								 ModelMap map2=new ModelMap();
								 map2.put("userId", session.getAttribute("USRID"));
								 map2.put("startNode", 0);
								 map2.put("endNode", 200);
								  hubReq.setRequestParam(map2);

									 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
									 if(strBoardList!=null)
									 {
										 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
										 if(hubResponse!=null && hubResponse.getResults()!=null)
										 {
											 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
										 }
									 }
								 
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/editSchedulerLanding/boardId/{boardId}/tournamentSchedulerId/{tournamentSchedulerId}/tournamentId/{tournamentId}",method=RequestMethod.GET)
public ModelAndView editSchedulerLanding(HttpServletRequest req, @PathVariable String boardId, @PathVariable String tournamentSchedulerId,@PathVariable String tournamentId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			 hubReq = new HubRequest();
			 hubReq.setMsgType(109);
			 ModelMap map = new ModelMap();
			 map.put("tournamentSchedulerId", tournamentSchedulerId);
			 hubReq.setRequestParam(map);
			 
			 GsonBuilder builder  = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				 if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getTournamentSchelduleDetails()!=null){
					 mav = new ModelAndView("EditScheduler");
					 mav.addObject("FromLanding", "Yes");
					 mav.addObject("boardId", boardId);
					 mav.addObject("schedulerDetails", hubRes.getResults().getTournamentSchelduleDetails().get(0));
					 
					
					 
					 mav.addObject("tournamentSchedulerId",  hubRes.getResults().getTournamentSchelduleDetails().get(0).getTournamentSchedulerId());
					 mav.addObject("umpireList", hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 JSONArray arr = new JSONArray(hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 mav.addObject("umpireListForPrePopulate", arr);
					 
					 List<UmpireNameList> listOfUmpires = hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList();
					 List<String> umpireIdList = new ArrayList<String>();
					 
					 System.out.println("size :"+listOfUmpires.size());
					 for(int i=0; i< listOfUmpires.size(); i++){
						 String id = listOfUmpires.get(i).getUmpireId();
						 umpireIdList.add("\"" + id + "\"");
						
					 }
					 
					 
					 mav.addObject("previousUmpireIds", umpireIdList);
				
					 
					 List<UserSearchVO> umpireNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr1 = new JSONArray();
					 for(int k=0; k<listOfUmpires.size(); k++){
						 String name = listOfUmpires.get(k).getUmpireName();
						 UserSearchVO user = new UserSearchVO();
						 user.setFullName(name);
						 user.setId(listOfUmpires.get(k).getUmpireId());
						 umpireNameList.add(user);
						 arr1 = new JSONArray(umpireNameList);
						
					 }
					 mav.addObject("umpireNameList",arr1);
					 System.out.println("umpireNameList :"+arr1);

					 List<ScorerNameList> listOfScorers = hubRes.getResults().getTournamentSchelduleDetails().get(0).getScorerNamesList();
					 List<String> scorerIdList = new ArrayList<String>();
					 for(int i=0; i< listOfScorers.size(); i++){
						 String id = listOfScorers.get(i).getScorerId();
						 scorerIdList.add("\"" + id + "\"");

					 }
					 
					 mav.addObject("previousScorerId", scorerIdList);
					 
					 List<UserSearchVO> scorerNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr2 = new JSONArray();
					 for(int j=0; j < listOfScorers.size(); j++){
						 UserSearchVO userSearch = new  UserSearchVO();
						 userSearch.setId(listOfScorers.get(j).getScorerId());
						 userSearch.setFullName(listOfScorers.get(j).getScorerName());
						 scorerNameList.add(userSearch);
						 arr2 = new JSONArray(scorerNameList);
						
					 }
					 mav.addObject("scorerNameList",arr2);
					 
					 
					 
//Portal Scorer
					 
					 List<ScorerNameList> listofportalScorer=hubRes.getResults().getTournamentSchelduleDetails().get(0).getPortalScorerList();
					 List<String> portalscorerIdlist=new ArrayList<String>();
					 for(int i=0; i< listofportalScorer.size();i++)
					 {
						 String id=listofportalScorer.get(i).getScorerId();
						 portalscorerIdlist.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("portalscorerIdlist", portalscorerIdlist);
					 List<UserSearchVO> portalscorernamelist=new ArrayList<UserSearchVO>();
					 JSONArray arr5=new JSONArray();
					 for(int j=0;j<listofportalScorer.size();j++)
					 {
						 UserSearchVO usersearch=new UserSearchVO();
						 usersearch.setId(listofportalScorer.get(j).getScorerId());
						 usersearch.setFullName(listofportalScorer.get(j).getScorerName());
						 portalscorernamelist.add(usersearch);
						 arr5=new JSONArray(portalscorernamelist);
					 }
					 mav.addObject("portalscorerNameList",arr5);
					 
					 
					 
					 
					 System.out.println("scorerNameList :"+arr2);
					 
					 System.out.println("scorerId List :"+scorerIdList);
					 System.out.println("umpireList :"+umpireIdList);
					 Date date = hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate();
						DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
						String dateFor = df.format(date);
						System.out.println("df "+date);
						mav.addObject("dateEdit", dateFor);
						
					/*	DateFormat df1 = new SimpleDateFormat("hh:mma");
						String time = df1.format(date);
						System.out.println("df "+time);
						mav.addObject("timeEdit", time);*/
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("M/d/YYYY hh:mm a");
						simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate());
						System.out.println("simple date format :"+simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
						mav.addObject("eventTime", simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
				 
				 }
			 }
			 
			 hubReq = new HubRequest(85);
				hubReq.setMsgType(85);
				
				ModelMap model= new ModelMap();
				model.put("boardId", boardId);
				hubReq.setRequestParam(model);
				String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(groundList !=  null){
					HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("groundList", hubRes.getResults().getGroundList());
						//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
					}
			 
				}	 
	 
					
				
				/*
				hubReq = new HubRequest(223);
				hubReq.setMsgType(223);
				ModelMap m = new ModelMap();
				m.put("createdBy",boardId);
				hubReq.setRequestParam(m);
				String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(tournamentList !=  null){
					HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
						
					}
			 
				}*/
				
					hubReq = new HubRequest();
					hubReq.setMsgType(113);
					ModelMap map1 = new ModelMap();
					System.out.println("tournamentId *******************: "+tournamentId);
					if(tournamentId != null){
					map1.put("tournamentId",tournamentId);
					hubReq.setRequestParam(map1);
					System.out.println("hub REq param : "+hubReq.getRequestParam());
					String torunamentDetails = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(torunamentDetails != null){
						HubResponse hubRes = gson.fromJson(torunamentDetails, HubResponse.class);
						if(hubRes != null && hubRes.getRequestStatus() != null && hubRes.getResults().getTournamentDetails()!=null){
							mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails());
							mav.addObject("tournamentName", hubRes.getResults().getTournamentDetails().get(0).getTournamentName());
							mav.addObject("teamList", hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean());
							mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
							mav.addObject("tournamentId", hubRes.getResults().getTournamentDetails().get(0).getTournamentId());
							System.out.println("teamlistSize : "+hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean().size());
						}
					}
					}
					else{
						
					}
					
					
					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					
					

					//*************************** Getting Board info  ***************************************
								 HubRequest hubReq1=new HubRequest();
								 hubReq1.setMsgType(40);
								 ModelMap map11=new ModelMap();			
								 map11.put("userId", session.getAttribute("USRID"));			 
								 map11.put("boardId", boardId);
								 hubReq1.setRequestParam(map11);
								 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
								 if(strBoarddetail!=null)
								 {
									 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
									if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
									{
										 mav.addObject("BoardId", boardId);
										 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
										 final String context = req.getContextPath();
										 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
										 mav.addObject("LeaugeMenuList", menuList);				
									}
								 }	
								 hubReq= new HubRequest();
								 hubReq.setMsgType(41);
								 ModelMap map2=new ModelMap();
								 map2.put("userId", session.getAttribute("USRID"));
								 map2.put("startNode", 0);
								 map2.put("endNode", 200);
								  hubReq.setRequestParam(map2);

									 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
									 if(strBoardList!=null)
									 {
										 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
										 if(hubResponse!=null && hubResponse.getResults()!=null)
										 {
											 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
										 }
									 }
								 
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/UmpireCreationNameSearch", method=RequestMethod.POST)
@ResponseBody
public SearchResponse umpireCreationNameSearch(HttpServletRequest request,@RequestBody String key) throws CSException{

	SearchResponse response = null;
	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(43);
		 hubReq.setMsgType(43);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", key);
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 response = searchResponse1;
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return response;
	
}

@RequestMapping(value="/LeaguePoints/{bid}", method=RequestMethod.GET)
public ModelAndView LeaguePoints(HttpServletRequest request, @PathVariable String bid) throws CSException
{
	

	
	
	 
	 	ModelAndView model=null;
	    HttpSession session = request.getSession(true);	
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			
			UUID  userId = (UUID) session.getAttribute("USRID");
			model= new ModelAndView("PointsTables");
			
			
			
			
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", bid);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					model.addObject("BoardId", bid);
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					
				}
			 }
			 

			 HubRequest hubReq=new HubRequest();
		//	 hubReq.setMsgType(110);
			 hubReq.setMsgType(142);
			 ModelMap map=new ModelMap();			
		//	 map.put("userId", userId);			 
			 map.put("boardId", bid);
			 map.put("tournamentId", "");
			 map.put("homeTeamId", "");
			 map.put("startNode", 0);
			 map.put("endNode", 100);
			// map.put("boardId", bid);
			 
			 
			 hubReq.setRequestParam(map);
			 String strPoints=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strPoints!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strPoints, HubResponse.class);
				 if(hubResponse1!=null && hubResponse1.getResults()!=null && hubResponse1.getResults().getCentueryList()!=null)
				 {
					 //model.addObject("TournamentPointTableList", hubResponse1.getResults().getTournamentPointTableList());
					 model.addObject("TournamentPointTableList", hubResponse1.getResults().getCentueryList());
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
			 }
			 
			 
			 
			 
				//********************************************************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
				 
				 
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	return model;
}
@RequestMapping(value="/LeaguePointsPage", method=RequestMethod.POST)
public ModelAndView LeaguePointspage(CenturiesSerach search , HttpServletRequest request) throws CSException
{
	

	
	
	 
	 	ModelAndView model=null;
	    HttpSession session = request.getSession(true);	
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			
			UUID  userId = (UUID) session.getAttribute("USRID");
			model= new ModelAndView("PointsTables");
			
			
			
			
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", search.getBoardId());
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					model.addObject("BoardId", search.getBoardId());
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					
				}
			 }
			 

			 HubRequest hubReq=new HubRequest();
		//	 hubReq.setMsgType(110);
			 hubReq.setMsgType(142);
			 ModelMap map=new ModelMap();			
		//	 map.put("userId", userId);			 
			 map.put("boardId", search.getBoardId());
			 map.put("tournamentId", search.getTournamentId());
			 map.put("homeTeamId", search.getHomeTeamId());
			 map.put("startNode", 0);
			 map.put("endNode", 10);
			// map.put("boardId", bid);
			 
			 
			 hubReq.setRequestParam(map);
			 String strPoints=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strPoints!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strPoints, HubResponse.class);
				 if(hubResponse1!=null && hubResponse1.getResults()!=null && hubResponse1.getResults().getCentueryList()!=null)
				 {
					 //model.addObject("TournamentPointTableList", hubResponse1.getResults().getTournamentPointTableList());
					 model.addObject("TournamentPointTableList", hubResponse1.getResults().getCentueryList());
					 
					 model.addObject("PointTableSearchInfo", search);
					 
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
			 }
			 
			 
			//********************************************************************************************	  
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 
			 
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	return model;
}
@RequestMapping(value="/public/LeaguePointsPage", method=RequestMethod.POST)
public ModelAndView publicLeaguePointspage(CenturiesSerach search , HttpServletRequest request) throws CSException
{
	

	
	
	 
	 	ModelAndView model=null;
	    HttpSession session = request.getSession(true);	
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			
			UUID  userId = (UUID) session.getAttribute("USRID");
			model= new ModelAndView("publicPointsTables");
			
			
			
			
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", search.getBoardId());
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					model.addObject("BoardId", search.getBoardId());
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = request.getContextPath();

					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
											 model.addObject("LeaugeMenuList", menuList);
					
				}
			 }
			 

			 HubRequest hubReq=new HubRequest();
		//	 hubReq.setMsgType(110);
			 hubReq.setMsgType(142);
			 ModelMap map=new ModelMap();			
		//	 map.put("userId", userId);			 
			 map.put("boardId", search.getBoardId());
			 map.put("tournamentId", search.getTournamentId());
			 map.put("homeTeamId", search.getHomeTeamId());
			 map.put("startNode", 0);
			 map.put("endNode", 10);
			// map.put("boardId", bid);
			 
			 
			 hubReq.setRequestParam(map);
			 String strPoints=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strPoints!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strPoints, HubResponse.class);
				 if(hubResponse1!=null && hubResponse1.getResults()!=null && hubResponse1.getResults().getCentueryList()!=null)
				 {
					 //model.addObject("TournamentPointTableList", hubResponse1.getResults().getTournamentPointTableList());
					 model.addObject("TournamentPointTableList", hubResponse1.getResults().getCentueryList());
					 model.addObject("PointTableSearchInfo", search);
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
			 }
			 
			 
			//********************************************************************************************	  
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 }else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
			 
			 
				 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	return model;
}
@RequestMapping(value="/rosterProfile/{bid}", method=RequestMethod.GET)
public ModelAndView rosterProfile(@PathVariable String bid, HttpServletRequest request) throws CSException
{

	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	if(session != null ){
		
		UUID userId=(UUID) session.getAttribute("USRID");
		
		 hubReq=new HubRequest(63);
		 hubReq.setMsgType(63);
		 ModelMap modelMap=new ModelMap();
		 modelMap.put("boardId", bid);
		 hubReq.setRequestParam(modelMap);
		 
		 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
		 if(resp !=null && resp.getRequestStatus().equals("0")){
			 
			 ResponseType results=resp.getResults();
			 if(results != null ){
				 model=new ModelAndView("publicProfileRoster");
				 List<Roaster> roasters=results.getRosterList();
				 if(roasters.size() >0){
					 request.setAttribute("Roasters", roasters);
					 ModelMap rosterMap=new ModelMap();
					 hubReq=new HubRequest(48);
					 hubReq.setMsgType(48);
					 rosterMap.put("startNode", 0);
					 rosterMap.put("endNode", 100);
					 rosterMap.put("rosterId", roasters.get(0).getRosterId());
					 System.out.println("roterid : "+rosterMap);
					 
					 rosterMap.put("feedHitUserId", userId);					
					 hubReq.setRequestParam(rosterMap);
	
					 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
					 if(hubResponse !=null){
						 ResponseType results1=hubResponse.getResults();
						 if(results1 != null){
							RoasterResponseById roasterResponseById=results1.getRosterInfo();
							
							request.setAttribute("RoasterResponseById", roasterResponseById);
							
							
							 hubReq = new HubRequest();
							 hubReq.setMsgType(190);
							 ModelMap memberMap = new ModelMap();
							 memberMap.put("userId", userId);
							 memberMap.put("rosterId", roasters.get(0).getRosterId());
							 memberMap.put("publicProfileUserId", "");
							 hubReq.setRequestParam(memberMap);
							
							 String memberResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
							 if(memberResponse != null){
								 
								 HubResponse hubRes = GsonConverters.getGsonObject().fromJson(memberResponse, HubResponse.class);
								 if(hubRes != null && hubRes.getRequestStatus() != null){
									 model.addObject("memberExists", hubRes.getRequestStatus());
								 }
								 
							 }
							
						 }
					 }
					 hubReq=new HubRequest();
					 
					 hubReq.setMsgType(188);// roster details based uisng cassandra
					 ModelMap rosterMap2=new ModelMap();
					 rosterMap2.put("rosterId",roasters.get(0).getRosterId());
					 rosterMap2.put("startNode",0 );
					 rosterMap2.put("endNode",100 );
					 
					 hubReq.setRequestParam(rosterMap2);

					 String roasterResponseByIdStringResult=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					 if(roasterResponseByIdStringResult!=null){
						 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdStringResult, HubResponse.class);
							
						 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterInfo()!=null){
							 
								RoasterResponseById roasterResponseById2=rosterhubResponse.getResults().getRosterInfo();
								request.setAttribute("RoasterMemberList", roasterResponseById2);
								
						 }
							
					 }
					 
					 
					 // Print details
					 
                      hubReq=new HubRequest();
					 
					 hubReq.setMsgType(267);
					 ModelMap rosterMapprint=new ModelMap();
					 rosterMapprint.put("rosterId",roasters.get(0).getRosterId());
					 
					 hubReq.setRequestParam(rosterMapprint);

					 String roasterResponseprint=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					 if(roasterResponseprint!=null){
						 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseprint, HubResponse.class);
							
						 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterPrintDetails()!=null){
							 
								Roaster rosterprint=rosterhubResponse.getResults().getRosterPrintDetails();
								
								model.addObject("Rosterprint", rosterprint);
								model.addObject("RosterCreatedDate", rosterprint.getRosterCreatedDate());
								
								Date date=new Date();
								SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
								model.addObject("PrintDate", sdf.format(date));
						 }
							
					 }
					 
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(99);
					 ModelMap modelMap5=new ModelMap();
					 //modelMap5.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");		
					 modelMap5.put("rosterId", roasters.get(0).getRosterId());
					 hubReq.setRequestParam(modelMap5);
					 String bowler=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse bowlingPerformance= GsonConverters.getGsonObject().fromJson(bowler, HubResponse.class);
					 if(bowlingPerformance!=null && bowlingPerformance.getResults()!=null)
					 {
						 model.addObject("BowlingPerformance", bowlingPerformance.getResults().getBowlingPerformance());
					 }
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(98);
					 ModelMap modelMap6=new ModelMap();
					 //modelMap6.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");
					 modelMap6.put("rosterId", roasters.get(0).getRosterId());
					 hubReq.setRequestParam(modelMap6);
					 String batting=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse battingPerformance= GsonConverters.getGsonObject().fromJson(batting, HubResponse.class);
					 if(battingPerformance!=null && battingPerformance.getResults()!=null)
					 {
						 model.addObject("BattingPerformance", battingPerformance.getResults().getBattingPerformance());
					 }
					 
					 
					 hubReq=new HubRequest();
						hubReq.setMsgType(97);
						 ModelMap map2=new ModelMap();			
						 map2.put("rosterId", roasters.get(0).getRosterId());			 
						 map2.put("boardId", bid);
						 map2.put("attachmentType", "video");
						 hubReq.setRequestParam(map2);
						 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 if(strBoarddetail2!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
							if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
							{
								model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
								
							}
						 }	
						 
						 hubReq=new HubRequest();
							hubReq.setMsgType(96);
							 ModelMap map4=new ModelMap();			
							 map4.put("rosterId", roasters.get(0).getRosterId());			 
							 map4.put("boardId", bid);
							 map4.put("attachmentType", "image");
							 hubReq.setRequestParam(map4);
							 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
							
							 if(strBoarddetail2!=null)
							 {
								 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
								if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
								{
									model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
									
								}
							 }	
							 
					 
					 
			 	}
				 
				 
				 
				 
				 System.out.println("board details"+userId);
				 HubRequest hubReq1=new HubRequest(40);
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }	
				 
			/*	 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }
				 */
				 
				 ModelMap neweventmap=new ModelMap();
				 neweventmap.put("userId", bid);
				 neweventmap.put("loggedUserId", userId);
				 neweventmap.put("startNode", 0);
				 neweventmap.put("endNode", 20);
				 hubReq= new HubRequest();
				 hubReq.setMsgType(222);
				 hubReq.setRequestParam(neweventmap);
				 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
				 if(strneweventlist!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
					 {
						 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
						 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
					 }
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				
				

				//*********************************************************** Boad Fan check  ******************************************************
									 hubReq= new HubRequest();
									 hubReq.setMsgType(76);
									 ModelMap map4=new ModelMap();
									 map4.put("boardId",bid);
									 map4.put("userId", userId);						
									 hubReq.setRequestParam(map4);
									 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
									 boolean buddyFan=false;
									 if(buddyFandeatil!=null)
									 {
										 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
										 if(buddyFanResponse!=null)
										 {
											 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
											 {
												 buddyFan=true;
											 }
										 }
										 
									 }
									// buddyFan=true;
									 System.out.println("board : "+buddyFan);
									 model.addObject("BoardFanReq", buddyFan);
				 
				 
			//********************************************************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map=new ModelMap();
				 map.put("userId", userId);
				 map.put("startNode", 0);
				 map.put("endNode", 200);
				  hubReq.setRequestParam(map);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
							 
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
				 
				 
				 
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
		 }
		 }else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");
		 } 
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return model;
}

@RequestMapping(value="/rosterProfileDetails/{rid}/{bId}", method=RequestMethod.GET)
public ModelAndView rosterProfileDetails(@PathVariable String rid, @PathVariable String bId, HttpServletRequest request ) throws CSException
{

	String rosterId= rid;
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	UUID userId=(UUID) session.getAttribute("USRID");
	if(session != null && userId!=null){
		
			 hubReq=new HubRequest(48);
			 hubReq.setMsgType(48);
			 
			 ModelMap modelMap=new ModelMap();
			 modelMap.put("rosterId",rosterId );
			 modelMap.put("startNode",0 );
			 modelMap.put("endNode",100 );
			 modelMap.put("feedHitUserId", userId);
			 hubReq.setRequestParam(modelMap);

			 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
			
			 if(hubResponse !=null){
				 
				 model=new ModelAndView("publicProfileRoster");
				 ResponseType results1=hubResponse.getResults();
				 if(results1 != null){
					RoasterResponseById roasterResponseById=results1.getRosterInfo();
					request.setAttribute("RoasterResponseById", roasterResponseById);
				 }
				 
				 
				 
				 hubReq=new HubRequest();
				 
				 hubReq.setMsgType(188);// roster details based uisng cassandra
				 ModelMap rosterMap2=new ModelMap();
				 rosterMap2.put("rosterId",rid);
				 rosterMap2.put("startNode",0 );
				 rosterMap2.put("endNode",100 );
				 
				 hubReq.setRequestParam(rosterMap2);

				 String roasterResponseByIdStringResult=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseByIdStringResult!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdStringResult, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterInfo()!=null){
						 
							RoasterResponseById roasterResponseById2=rosterhubResponse.getResults().getRosterInfo();
							request.setAttribute("RoasterMemberList", roasterResponseById2);
							
					 }
						
				 }
				 
				// Print details
				 
                 hubReq=new HubRequest();
				 
				 hubReq.setMsgType(267);
				 ModelMap rosterMapprint=new ModelMap();
				 rosterMapprint.put("rosterId",rid);
				 
				 hubReq.setRequestParam(rosterMapprint);

				 String roasterResponseprint=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseprint!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseprint, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterPrintDetails()!=null){
						 
							Roaster rosterprint=rosterhubResponse.getResults().getRosterPrintDetails();
							
							model.addObject("Rosterprint", rosterprint);
							model.addObject("RosterCreatedDate", rosterprint.getRosterCreatedDate());
							
							Date date=new Date();
							SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
							model.addObject("PrintDate", sdf.format(date));
					 }
						
				 }

				

				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(40);
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId",bId );
				 hubReq.setRequestParam(map);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					}
				 }	
				
				 hubReq=new HubRequest(63);
				 hubReq.setMsgType(63);
				 ModelMap modelMap1=new ModelMap();
				 modelMap1.put("boardId", bId);
				 hubReq.setRequestParam(modelMap1);
		
				 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
				 
				 
				 if(resp !=null && resp.getRequestStatus().equals("0")){
					 
					 ResponseType results=resp.getResults();
					 
					 System.out.println("results"+results.getRosterList().size());
					 
					 if(results != null ){
						 
						 List<Roaster> roasters=results.getRosterList();
						 request.setAttribute("Roasters", roasters);
						 
					 }
				 
				 }
				 hubReq=new HubRequest();
				 hubReq.setMsgType(99);
				 ModelMap modelMap5=new ModelMap();
				 //modelMap5.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");		
				 modelMap5.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap5);
				 String bowler=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse bowlingPerformance= GsonConverters.getGsonObject().fromJson(bowler, HubResponse.class);
				 if(bowlingPerformance!=null && bowlingPerformance.getResults()!=null)
				 {
					 model.addObject("BowlingPerformance", bowlingPerformance.getResults().getBowlingPerformance());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(98);
				 ModelMap modelMap6=new ModelMap();
				 //modelMap6.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");
				 modelMap6.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap6);
				 String batting=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse battingPerformance= GsonConverters.getGsonObject().fromJson(batting, HubResponse.class);
				 if(battingPerformance!=null && battingPerformance.getResults()!=null)
				 {
					 model.addObject("BattingPerformance", battingPerformance.getResults().getBattingPerformance());
				 }
				 
				 
				 hubReq=new HubRequest();
					hubReq.setMsgType(97);
					 ModelMap map2=new ModelMap();			
					 map2.put("rosterId", rosterId);			 
					 map2.put("boardId", bId);
					 map2.put("attachmentType", "video");
					 hubReq.setRequestParam(map2);
					 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail2!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
						if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
						{
							model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
							System.out.println("RoasterVideosList------>hubResponse2.getResults().getRosterAttachment()----> "+hubResponse2.getResults().getRosterAttachment().size());
							
						}
					 }	
					 
					 hubReq=new HubRequest();
						hubReq.setMsgType(96);
						 ModelMap map4=new ModelMap();			
						 map4.put("rosterId", rosterId);			 
						 map4.put("boardId", bId);
						 map4.put("attachmentType", "image");
						 hubReq.setRequestParam(map4);
						 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 if(strBoarddetail2!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
							if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
							{
								model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
								System.out.println("RoasterImageList-----> hubResponse2.getResults().getRosterAttachment()---> "+hubResponse2.getResults().getRosterAttachment().size());
								
							}
						 }	
						 
				 
				 
				 
				/* hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }*/
						 
						 ModelMap neweventmap=new ModelMap();
						 neweventmap.put("userId", bId);
						 neweventmap.put("loggedUserId", userId);
						 neweventmap.put("startNode", 0);
						 neweventmap.put("endNode", 20);
						 hubReq= new HubRequest();
						 hubReq.setMsgType(222);
						 hubReq.setRequestParam(neweventmap);
						 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
						 if(strneweventlist!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
							 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
							 {
								 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
								 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
							 }
						 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(190);
				 ModelMap memberMap = new ModelMap();
				 memberMap.put("userId", userId);
				 memberMap.put("rosterId", rid);
				 memberMap.put("publicProfileUserId", "");
				 hubReq.setRequestParam(memberMap);
				
				 String memberResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
				 if(memberResponse != null){
					 
					 HubResponse hubRes = GsonConverters.getGsonObject().fromJson(memberResponse, HubResponse.class);
					 if(hubRes != null && hubRes.getRequestStatus() != null){
						 model.addObject("memberExists", hubRes.getRequestStatus());
					 }
					 
				 }
				 

				//*********************************************************** Boad Fan check  ******************************************************
									 hubReq= new HubRequest();
									 hubReq.setMsgType(76);
									 ModelMap fanmap=new ModelMap();
									 fanmap.put("boardId",bId);
									 fanmap.put("userId", userId);						
									 hubReq.setRequestParam(fanmap);
									 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
									 boolean buddyFan=false;
									 if(buddyFandeatil!=null)
									 {
										 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
										 if(buddyFanResponse!=null)
										 {
											 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
											 {
												 buddyFan=true;
											 }
										 }
										 
									 }
									// buddyFan=true;
									 System.out.println("board : "+buddyFan);
									 model.addObject("BoardFanReq", buddyFan);
									 
					//********************************************  Get board Details  ************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
			 }else {
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");

			 }
		}else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	return model;
	

}

@RequestMapping(value="/rosterInfo/{rid}/{bid}", method=RequestMethod.GET)
public ModelAndView rosterInfo(@PathVariable String rid, @PathVariable String bid, HttpServletRequest request) throws CSException
{

	ModelAndView model=null;
	model= new ModelAndView("rosterInfo");
	HttpSession session=request.getSession(true);
	
	if(session != null && session.getAttribute("USRID")!=null){
		
		UUID userId= (UUID) session.getAttribute("USRID");
		
		hubReq=new HubRequest();
		hubReq.setMsgType(97);
		 ModelMap map2=new ModelMap();			
		 map2.put("rosterId", rid);			 
		 map2.put("boardId", bid);
		 map2.put("attachmentType", "video");
		 hubReq.setRequestParam(map2);
		 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoarddetail2!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
			if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
			{
				model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
				
			}
		 }	
		 
		 hubReq=new HubRequest();
			hubReq.setMsgType(96);
			 ModelMap map4=new ModelMap();			
			 map4.put("rosterId", rid);			 
			 map4.put("boardId", bid);
			 map4.put("attachmentType", "image");
			 hubReq.setRequestParam(map4);
			 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoarddetail2!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
				if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
				{
					model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
					
				}
			 }	
			 
		
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map3=new ModelMap();
		 map3.put("userId", userId);
		 map3.put("startNode", 0);
		 map3.put("endNode", 200);
		  hubReq.setRequestParam(map3);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
			 if(hubResponse2!=null && hubResponse2.getResults()!=null)
			 {
				 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 

		//*********************************************************** Boad Fan check  ******************************************************
							 hubReq= new HubRequest();
							 hubReq.setMsgType(76);
							 ModelMap fanmap4=new ModelMap();
							 fanmap4.put("boardId",bid);
							 fanmap4.put("userId", userId);						
							 hubReq.setRequestParam(fanmap4);
							 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
							 boolean buddyFan=false;
							 if(buddyFandeatil!=null)
							 {
								 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
								 if(buddyFanResponse!=null)
								 {
									 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
									 {
										 buddyFan=true;
									 }
								 }
								 
							 }
							// buddyFan=true;
							 System.out.println("board : "+buddyFan);
							 model.addObject("BoardFanReq", buddyFan);
		 
		 HubRequest hubReq1=new HubRequest(40);
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", bid);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
			{
				model.addObject("BoardId", bid);
				 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				
			}
		 }	
		 
		 model.addObject("rosterId", rid);
		
		
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;

}
@RequestMapping(value="/LeaguePointsProfile/{bid}", method=RequestMethod.GET)
public ModelAndView leaguePointsProfile(HttpServletRequest request, @PathVariable String bid) throws CSException
{
	

	
	
	 
	 	ModelAndView model=null;
	    HttpSession session = request.getSession(true);	
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			
			UUID  userId = (UUID) session.getAttribute("USRID");
			model= new ModelAndView("publicPointsTables");
			
			final String context = request.getContextPath();

			
			
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", bid);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					model.addObject("BoardId", bid);
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
					 model.addObject("LeaugeMenuList", menuList);
					
				}
			 }
			 

		/*	 HubRequest hubReq=new HubRequest();
			 hubReq.setMsgType(110);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", bid);
			 hubReq.setRequestParam(map);
			 String strPoints=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strPoints!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strPoints, HubResponse.class);
				 if(hubResponse1!=null && hubResponse1.getResults()!=null && hubResponse1.getResults().getTournamentPointTableList()!=null)
				 {
					 model.addObject("TournamentPointTableList", hubResponse1.getResults().getTournamentPointTableList());
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
			 }
			 */

			 HubRequest hubReq=new HubRequest();
				//	 hubReq.setMsgType(110);
					 hubReq.setMsgType(142);
					 ModelMap map=new ModelMap();			
				//	 map.put("userId", userId);			 
					 map.put("boardId", bid);
					 map.put("tournamentId", "");
					 map.put("homeTeamId", "");
					 map.put("startNode", 0);
					 map.put("endNode", 500);
					// map.put("boardId", bid);
					 
					 
					 hubReq.setRequestParam(map);
					 String strPoints=cricketSocialRestTemplateService.userRegistration(hubReq);
					 if(strPoints!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strPoints, HubResponse.class);
						 if(hubResponse1!=null && hubResponse1.getResults()!=null && hubResponse1.getResults().getCentueryList()!=null)
						 {
							 //model.addObject("TournamentPointTableList", hubResponse1.getResults().getTournamentPointTableList());
							 model.addObject("TournamentPointTableList", hubResponse1.getResults().getCentueryList());
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
					 }
					 
					 
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					 
					 //*********************************************************** Boad Fan check  ******************************************************
							 hubReq= new HubRequest();
							 hubReq.setMsgType(76);
							 ModelMap fanmap4=new ModelMap();
							 fanmap4.put("boardId",bid);
							 fanmap4.put("userId", userId);						
							 hubReq.setRequestParam(fanmap4);
							 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
							 boolean buddyFan=false;
							 if(buddyFandeatil!=null)
							 {
								 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
								 if(buddyFanResponse!=null)
								 {
									 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
									 {
										 buddyFan=true;
									 }
								 }
								 
							 }
							// buddyFan=true;
							 System.out.println("board : "+buddyFan);
							 model.addObject("BoardFanReq", buddyFan);
							 
							 
					 
					 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	return model;
}

@RequestMapping(value="/LeaguePointsProfilepage", method=RequestMethod.POST)
public ModelAndView LeaguePointsProfilepage(CenturiesSerach search , HttpServletRequest request) throws CSException
{
	

	
	
	 
	 	ModelAndView model=null;
	    HttpSession session = request.getSession(true);	
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			
			UUID  userId = (UUID) session.getAttribute("USRID");
			model= new ModelAndView("publicPointsTables");
			
			
			
			
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", search.getBoardId());
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					model.addObject("BoardId", search.getBoardId());
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					
				}
			 }
			 

			 HubRequest hubReq=new HubRequest();
		//	 hubReq.setMsgType(110);
			 hubReq.setMsgType(142);
			 ModelMap map=new ModelMap();			
		//	 map.put("userId", userId);			 
			 map.put("boardId", search.getBoardId());
			 map.put("tournamentId", search.getTournamentId());
			 map.put("homeTeamId", search.getHomeTeamId());
			 map.put("startNode", 0);
			 map.put("endNode", 10);
			// map.put("boardId", bid);
			 
			 
			 hubReq.setRequestParam(map);
			 String strPoints=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strPoints!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strPoints, HubResponse.class);
				 if(hubResponse1!=null && hubResponse1.getResults()!=null && hubResponse1.getResults().getCentueryList()!=null)
				 {
					 //model.addObject("TournamentPointTableList", hubResponse1.getResults().getTournamentPointTableList());
					 model.addObject("TournamentPointTableList", hubResponse1.getResults().getCentueryList());
				 }
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=service not available");
			 }
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	return model;
}

@RequestMapping(value="/leaguecenturies/{bid}", method=RequestMethod.GET)
public ModelAndView leaguecenturies(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("Centuries");
				model.addObject("boardId", bid);
				System.out.println("boardid==============================>"+bid);
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", bid);
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							model.addObject("defaultload", "yes");
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
					/*HubRequest hubReq=new HubRequest();
					// hubReq.setMsgType(107);
					 ModelMap map=new ModelMap();			
					 hubReq.setMsgType(122);
					//ModelMap map=new ModelMap();			
					 map.put("userId", userId);			 
					 map.put("boardId", bid);
					 map.put("startNode", 0);
					 map.put("endNode", 500);
					 map.put("filterByYear", yearVal);
					 
					 CenturiesSerach search= new CenturiesSerach();
					 search.setAgainstTeamId("");
					 search.setHomeTeamId("");
					 search.setBoardId(bid);
					 search.setStartNode(0);
					 search.setEndNode(500);
					 search.setFilterByYear(yearVal);
					 
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("centueryListSize", hubResponse1.getResults().getCentueryList().size());
					}
				 }*/
				
				HubRequest hubReq=new HubRequest();
				// hubReq.setMsgType(107);
				 ModelMap map=new ModelMap();			
				 hubReq.setMsgType(122);
				//ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 map.put("flag", "Century");
				 map.put("filterByYear", yearVal);
				 
				 CenturiesSerach search= new CenturiesSerach();
				 search.setTournamentId("");
				 search.setAgainstTeamId("");
				 search.setHomeTeamId("");
				 search.setBoardId(bid);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFilterByYear(yearVal);
				 search.setFlag("Century");
				 
			 hubReq.setRequestParam(search);
			 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
		
			 if(strCentury!=null)
			 {
				 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
				{
					model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
					model.addObject("centueryListSize", hubResponse1.getResults().getCentueryList().size());
				}
			 }
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }
				 

				//*********************************************************** Boad Fan check  ******************************************************
									 hubReq= new HubRequest();
									 hubReq.setMsgType(76);
									 ModelMap map4=new ModelMap();
									 map4.put("boardId",bid);
									 map4.put("userId", userId);						
									 hubReq.setRequestParam(map4);
									 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
									 boolean buddyFan=false;
									 if(buddyFandeatil!=null)
									 {
										 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
										 if(buddyFanResponse!=null)
										 {
											 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
											 {
												 buddyFan=true;
											 }
										 }
										 
									 }
									// buddyFan=true;
									 System.out.println("board : "+buddyFan);
									 model.addObject("BoardFanReq", buddyFan);
				 
				 
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}




@RequestMapping(value="/yearWiseCenturies", method = RequestMethod.POST)
public @ResponseBody List<TournamentDTO> yearWiseCenturies(@RequestBody CenturiesSerach search, HttpServletRequest req){
	List<TournamentDTO> centuriesList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			System.out.println("boardId=======Here====>"+search.getBoardId());
			HubRequest hubReq=new HubRequest();
			// hubReq.setMsgType(107);
			 ModelMap map=new ModelMap();			
			 hubReq.setMsgType(122);
			//ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", search.getBoardId());
			 map.put("startNode", 0);
			 map.put("endNode", 500);
			 map.put("filterByYear", search.getFilterByYear());
			 map.put("homeTeamId", "");
			 map.put("againstTeamId", "");
			 map.put("tournamentId", "");
			 map.put("flag", "Century");
			 
			 hubReq.setRequestParam(map);
			String centuriesResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(centuriesResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(centuriesResponse, HubResponse.class);
				if(response!=null && response.getResults().getCentueryList()!=null)
				{
					centuriesList = response.getResults().getCentueryList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return centuriesList;

}






@RequestMapping(value="/yearWiseHalfCenturies", method = RequestMethod.POST)
public @ResponseBody List<TournamentDTO> yearWiseHalfCenturies(@RequestBody CenturiesSerach search, HttpServletRequest req){
	List<TournamentDTO> halfCenturiesList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			HubRequest hubReq=new HubRequest();
			// hubReq.setMsgType(107);
			 ModelMap map=new ModelMap();			
			// hubReq.setMsgType(131);
			//ModelMap map=new ModelMap();
			 hubReq.setMsgType(122);
			 map.put("userId", userId);			 
			 map.put("boardId", search.getBoardId());
			 map.put("startNode", 0);
			 map.put("endNode", 500);
			 map.put("filterByYear", search.getFilterByYear());
			 map.put("homeTeamId", "");
			 map.put("againstTeamId", "");
			 map.put("flag", "HalfCentury");
			 map.put("tournamentId", "");
			 
			 hubReq.setRequestParam(map);
			String centuriesResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(centuriesResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(centuriesResponse, HubResponse.class);
				if(response!=null && response.getResults().getCentueryList()!=null)
				{
					halfCenturiesList = response.getResults().getCentueryList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return halfCenturiesList;

}

@RequestMapping(value="/yearWise5fer", method = RequestMethod.POST)
public @ResponseBody List<TournamentDTO> yearWise5fer(@RequestBody CenturiesSerach search, HttpServletRequest req){
	List<TournamentDTO> fivewktList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq = new HubRequest();
			 hubReq.setMsgType(184);
			 ModelMap map = new ModelMap();
			 map.put("boardId", search.getBoardId());
			 map.put("tournamentId","");
			 map.put("homeTeamId", "");
			 map.put("againstTeamId", "");
			 map.put("filterByYear", search.getFilterByYear());
			 map.put("startNode", 0);
			 map.put("endNode", 500);
			 hubReq.setRequestParam(map);
			 
			String centuriesResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(centuriesResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(centuriesResponse, HubResponse.class);
				if(response!=null && response.getResults().getFiveWicketsPlayerList()!=null)
				{
					fivewktList = response.getResults().getFiveWicketsPlayerList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return fivewktList;

}

@RequestMapping(value="/yearWiseTopBatsman", method = RequestMethod.POST)
public @ResponseBody List<TournamentDTO> yearWiseTopBatsman(@RequestBody CenturiesSerach search, HttpServletRequest req){
	List<TournamentDTO> topBatsmanList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			System.out.println("CAME TO CONTROLLER>>>>>>>>>>>>>>>>");
			
			hubReq = new HubRequest();
			hubReq.setMsgType(182);
			 ModelMap map = new ModelMap();
			 map.put("boardId", search.getBoardId());
			 map.put("tournamentId","");
			 map.put("homeTeamId", "");
			 map.put("againstTeamId", "");
			 map.put("filterByYear", search.getFilterByYear());
			 map.put("startNode", 0);
			 map.put("endNode", 500);
			 hubReq.setRequestParam(map);
			 
			String centuriesResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(centuriesResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(centuriesResponse, HubResponse.class);
				if(response!=null && response.getResults().getTopBatsmanList()!=null)
				{
					topBatsmanList = response.getResults().getTopBatsmanList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return topBatsmanList;

}



@RequestMapping(value="/yearWiseTopBowler", method = RequestMethod.POST)
public @ResponseBody List<TournamentDTO> yearWiseTopBowler(@RequestBody CenturiesSerach search, HttpServletRequest req){
	List<TournamentDTO> topBowlerList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq = new HubRequest();
			 hubReq.setMsgType(183);
			 ModelMap map = new ModelMap();
			 map.put("boardId", search.getBoardId());
			 map.put("tournamentId","");
			 map.put("homeTeamId", "");
			 map.put("againstTeamId", "");
			 map.put("filterByYear", search.getFilterByYear());
			 map.put("startNode", 0);
			 map.put("endNode", 500);
			 hubReq.setRequestParam(map);
			 
			String centuriesResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(centuriesResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(centuriesResponse, HubResponse.class);
				if(response!=null && response.getResults().getTopBowlersList()!=null)
				{
					topBowlerList = response.getResults().getTopBowlersList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return topBowlerList;

}





@RequestMapping(value="/leaguehalfcenturies/{bid}", method=RequestMethod.GET)
public ModelAndView leaguehalfcenturies(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		  HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
			//	model= new ModelAndView("HalfCenturies");
				model= new ModelAndView("HalfCenturiesSearch"); 
				model.addObject("boardId", bid);
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", bid);
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							model.addObject("defaultload", "yes");
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				
				
				
				
				/*HubRequest hubReq=new HubRequest();
				// hubReq.setMsgType(108);
				 hubReq.setMsgType(131);
				 //dsfsdf sd
				 CenturiesSerach serach= new CenturiesSerach();
				 serach.setAgainstTeamId("");
				 serach.setBoardId(bid);
				 serach.setEndNode(500);
				 serach.setStartNode(0);
				 serach.setTournamentId("");
				 serach.setHomeTeamId("");
				 serach.setFilterByYear(yearVal);
				 
				
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 hubReq.setRequestParam(serach);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getHalfCenturyList());
						
					}
				 }
				
				 
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getHalfCenturyList());
						System.out.println("list size ------> "+hubResponse1.getResults().getHalfCenturyList());
					}
				 }*/
				

				HubRequest hubReq=new HubRequest();
				// hubReq.setMsgType(108);
				/* hubReq.setMsgType(131);*/
				 hubReq.setMsgType(122);
				 //dsfsdf sd
				 CenturiesSerach serach= new CenturiesSerach();
				 serach.setTournamentId("");
				 serach.setAgainstTeamId("");
				 serach.setBoardId(bid);
				 serach.setEndNode(500);
				 serach.setStartNode(0);
				 serach.setTournamentId("");
				 serach.setHomeTeamId("");
				 serach.setFlag("HalfCentury");
				 serach.setFilterByYear(yearVal);
				 
				
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 hubReq.setRequestParam(serach);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getCentueryList());
						System.out.println("list size ------> "+hubResponse1.getResults().getCentueryList().size());
					}
				 }
				 
				 
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/leaguecenturiesprofile/{bid}", method=RequestMethod.GET)
public ModelAndView leaguecenturiesProfile(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		  HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("CenturiesPublic");
				model.addObject("publicboardId", bid);
				 
				final String context = request.getContextPath();
				System.out.println("------------------------------------> "+context);
				HubRequest hubReq=new HubRequest();
				/* hubReq.setMsgType(107);
				 * 
				 "boardId":"25434436-6e27-4fbb-b311-d2419e230165",
"tournamentId":"2e3f1f13-1817-4d23-8779-344761545722",
"homeTeamId":"4ae648c2-741b-4f72-ad74-88b84b061f60",
"againstTeamId":"7d20f285-e3b3-4f56-91ca-06e12577c8ef",
"startNode":0,
"endNode":10
				 * */
				
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", bid);
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							model.addObject("defaultload", "yes");
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				
				/* hubReq.setMsgType(122);
				ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 CenturiesSerach search= new CenturiesSerach();
				 search.setAgainstTeamId("");
				 search.setHomeTeamId("");
				 search.setBoardId(bid);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFilterByYear(yearVal);
			 hubReq.setRequestParam(search);
				 //hubReq.setRequestParam(map);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						
					}
				 }*/
				
				hubReq.setMsgType(122);
				ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 CenturiesSerach search= new CenturiesSerach();
				 search.setTournamentId("");
				 search.setAgainstTeamId("");
				 search.setHomeTeamId("");
				 search.setBoardId(bid);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFilterByYear(yearVal);
				 search.setFlag("Century");
			 hubReq.setRequestParam(search);
				 //hubReq.setRequestParam(map);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						
					}
				 }
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						// List<String> userCoOrdinator=Util.gettingCoordinaterList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"");
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
						 model.addObject("LeaugeMenuList", menuList);
						 
					}
				 }
				 

				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",bid);
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
						 
				 
				 
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/leaguecenturieslist", method=RequestMethod.POST)
public ModelAndView leaguecenturieslist(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("Centuries");
				model.addObject("boardId", search.getBoardId()); 
				/*
				 
				 {
"msgType": 122,
"requestParam": {
"boardId":"25434436-6e27-4fbb-b311-d2419e230165",
"tournamentId":"2e3f1f13-1817-4d23-8779-344761545722",
"homeTeamId":"4ae648c2-741b-4f72-ad74-88b84b061f60",
"againstTeamId":"7d20f285-e3b3-4f56-91ca-06e12577c8ef",
"startNode":0,
"endNode":10

}
}
				 * */
				System.out.println("in leaguesenturylist>>>>>>>>>>>>>>>>>>>>>>"+search.getBoardId());
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				/*HubRequest hubReq=new HubRequest();
				 hubReq.setMsgType(122);		
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("CenturySearch", search);
						
					}
				 }*/
				
				HubRequest hubReq=new HubRequest();
				 hubReq.setMsgType(122);		
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFlag("Century");
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("CenturySearch", search);
						
					}
				 }
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/profile/leaguecenturieslist", method=RequestMethod.POST)
public ModelAndView leaguecenturieslistprofile(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("CenturiesPublic");
				model.addObject("publicboardId", search.getBoardId());  
				/*
				 
				 {
"msgType": 122,
"requestParam": {
"boardId":"25434436-6e27-4fbb-b311-d2419e230165",
"tournamentId":"2e3f1f13-1817-4d23-8779-344761545722",
"homeTeamId":"4ae648c2-741b-4f72-ad74-88b84b061f60",
"againstTeamId":"7d20f285-e3b3-4f56-91ca-06e12577c8ef",
"startNode":0,
"endNode":10

}
}
				 * */
				
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				
				
				
				/*
				HubRequest hubReq=new HubRequest();
				 hubReq.setMsgType(122);		
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("CenturySearch", search);
					}
				 }*/
				
				HubRequest hubReq=new HubRequest();
				 hubReq.setMsgType(122);		
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFlag("Century");
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("centueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("CenturySearch", search);
					}
				 }
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = request.getContextPath();

						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
												 model.addObject("LeaugeMenuList", menuList);
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

//JITHIN changes mav to same page

@RequestMapping(value="/leaguehalfcenturieslist", method=RequestMethod.POST)
public ModelAndView leaguehalfcenturieslist(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("HalfCenturiesSearch");
				model.addObject("boardId", search.getBoardId()); 
				
				 
				/*
				 
				 {
"msgType": 122,
"requestParam": {
"boardId":"25434436-6e27-4fbb-b311-d2419e230165",
"tournamentId":"2e3f1f13-1817-4d23-8779-344761545722",
"homeTeamId":"4ae648c2-741b-4f72-ad74-88b84b061f60",
"againstTeamId":"7d20f285-e3b3-4f56-91ca-06e12577c8ef",
"startNode":0,
"endNode":10

}
}
				 * */
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				/*
				HubRequest hubReq=new HubRequest();
				 hubReq.setMsgType(131);		
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getHalfCenturyList());
						model.addObject("HalfCentrrySearch", search);
					}
				 }*/
				HubRequest hubReq=new HubRequest();
				 //hubReq.setMsgType(131);
				hubReq.setMsgType(122);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFlag("HalfCentury");
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("HalfCentrrySearch", search);
					}
				 }
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 
						 final String context = request.getContextPath();

						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
												 model.addObject("LeaugeMenuList", menuList);

						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

//JITHIN changed mav to same page
@RequestMapping(value="profile/leaguehalfcenturieslist", method=RequestMethod.POST)
public ModelAndView leaguehalfcenturieslistprofile(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("HalfCenturiesPublicSearch");
				model.addObject("publicBoardId", search.getBoardId()); 
				/*
				 
				 {
"msgType": 122,
"requestParam": {
"boardId":"25434436-6e27-4fbb-b311-d2419e230165",
"tournamentId":"2e3f1f13-1817-4d23-8779-344761545722",
"homeTeamId":"4ae648c2-741b-4f72-ad74-88b84b061f60",
"againstTeamId":"7d20f285-e3b3-4f56-91ca-06e12577c8ef",
"startNode":0,
"endNode":10

}
}
				 * */
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				/*HubRequest hubReq=new HubRequest();
				 hubReq.setMsgType(131);		
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getHalfCenturyList());
						model.addObject("HalfCentrrySearch", search);
					}
				 }*/
				HubRequest hubReq=new HubRequest();
				// hubReq.setMsgType(131);
				 hubReq.setMsgType(122);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 search.setFlag("HalfCentury");
				 hubReq.setRequestParam(search);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getCentueryList());
						model.addObject("HalfCentrrySearch", search);
					}
				 }
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = request.getContextPath();

						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
												 model.addObject("LeaugeMenuList", menuList);
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			

				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",search.getBoardId());
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
						 
						 
						 
				 
				 
				 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/leaguehalfcenturiesprofile/{bid}", method=RequestMethod.GET)
public ModelAndView leaguehalfcenturiesprofile(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		  HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				//model= new ModelAndView("HalfCenturiesPublic");
				model= new ModelAndView("HalfCenturiesPublicSearch");
				model.addObject("publicBoardId", bid);
				final String context = request.getContextPath();

				
				
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", bid);
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							model.addObject("defaultload", "yes");
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				/*HubRequest hubReq=new HubRequest();
				 //hubReq.setMsgType(108);
				hubReq.setMsgType(131);
				// hubReq.setRequestParam(map);
				 CenturiesSerach serach= new CenturiesSerach();
				 serach.setAgainstTeamId("");
				 serach.setBoardId(bid);
				 serach.setEndNode(500);
				 serach.setStartNode(0);
				 serach.setTournamentId("");
				 serach.setHomeTeamId("");
				 serach.setFilterByYear(yearVal);
				 
				
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 hubReq.setRequestParam(serach);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getHalfCenturyList());
						
					}
				 }
				
				 
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getHalfCenturyList());
						System.out.println("list size ------> "+hubResponse1.getResults().getHalfCenturyList());
					}
				 }*/
				
				HubRequest hubReq=new HubRequest();
				 //hubReq.setMsgType(108);
				//hubReq.setMsgType(131);
				hubReq.setMsgType(122);
				// hubReq.setRequestParam(map);
				 CenturiesSerach serach= new CenturiesSerach();
				 serach.setTournamentId("");
				 serach.setAgainstTeamId("");
				 serach.setBoardId(bid);
				 serach.setEndNode(500);
				 serach.setStartNode(0);
				 serach.setTournamentId("");
				 serach.setHomeTeamId("");
				 serach.setFlag("HalfCentury");
				 serach.setFilterByYear(yearVal);
				 
				
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId", bid);
				 hubReq.setRequestParam(serach);
				 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				
				 if(strCentury!=null)
				 {
					 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getCentueryList()!=null)
					{
						model.addObject("halfcentueryList", hubResponse1.getResults().getCentueryList());
						System.out.println("list size ------> "+hubResponse1.getResults().getCentueryList().size());
					}
				 }
				
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));

						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
												 model.addObject("LeaugeMenuList", menuList);
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				

				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",bid);
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
						 
						 
						 
				 
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/umpire-list/{boardId}", method=RequestMethod.GET)
public ModelAndView umpireProfileList(@PathVariable String boardId, HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				final String context = req.getContextPath();

		System.out.println("board id:"+boardId);
		mav = new ModelAndView("UmpireProfileList");
		 ModelMap modelMap = new ModelMap();
		modelMap.put("boardId", boardId);
		//modelMap.put("paginationFlag", "No");
		//modelMap.put("tokenId", "");
		hubReq = new HubRequest(65);
		hubReq.setMsgType(65);
		hubReq.setRequestParam(modelMap);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder gsonBuilder = new GsonBuilder();
		 Gson gson = gsonBuilder.create();
		 
		 UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList1=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson1 = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson1.fromJson(strBoardList1, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
		 
		 
		 
		 if(strBoardList != null){
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {					 
				 mav.addObject("BoardUmpireList", hubResponse.getResults().getBoardUmpireList());
				 mav.addObject("BoardUmpireListSize", hubResponse.getResults().getBoardUmpireList().size());
				 mav.addObject("boardId",boardId);
				 
				 /*if(hubResponse.getResults().getBoardUmpireList().size() != 0){
					 mav.addObject("hiddenToken", hubResponse.getResults().getBoardUmpireList().get(hubResponse.getResults().getBoardUmpireList().size() - 1).getTokenId());
					 }else{
						 mav.addObject("hiddenToken", "");
					 }
				 */
			 }else{
				 mav.addObject("BoardUmpireListSize", hubResponse.getResults().getBoardUmpireList().size());
			 }
		 }else{
			 mav = new ModelAndView("redirect:/CreateUmpire.htm");
		 }
		 
		 
		 //*********************************************************** Boad Fan check  ******************************************************
				 hubReq= new HubRequest();
				 hubReq.setMsgType(76);
				 ModelMap fanmap4=new ModelMap();
				 fanmap4.put("boardId",boardId);
				 fanmap4.put("userId", userId);						
				 hubReq.setRequestParam(fanmap4);
				 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean buddyFan=false;
				 if(buddyFandeatil!=null)
				 {
					 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
					 if(buddyFanResponse!=null)
					 {
						 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
						 {
							 buddyFan=true;
						 }
					 }
					 
				 }
				// buddyFan=true;
				 System.out.println("board : "+buddyFan);
				 mav.addObject("BoardFanReq", buddyFan);
				 
				 
		 
		 
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
			{
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);				
			}
		 }		 
			}else{
				mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/ground-list/{boardId}",method=RequestMethod.GET)
public ModelAndView groundProfileList(@PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
		mav = new ModelAndView("GroundProfileList");
		mav.addObject("boardId", boardId);
		hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);
		//model.put("paginationFlag", "No");
		//model.put("tokenId", 0);
		
		
		
		System.out.println("board Id :"+boardId);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		hubReq.setRequestParam(model);
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response !=  null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				/* if(hubRes.getResults().getGroundList().size() != 0){
					 mav.addObject("hiddenToken",hubRes.getResults().getGroundList().get(hubRes.getResults().getGroundList().size() - 1).getTokenId());
					 }else{
						 mav.addObject("hiddenToken", "");
					 }*/
			}
			else{
				 mav.addObject("groundListSize", hubRes.getResults().getGroundList().size());
			}
		}
		
		
		
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		 
			 
			 //*********************************************************** Boad Fan check  ******************************************************
					 hubReq= new HubRequest();
					 hubReq.setMsgType(76);
					 ModelMap fanmap4=new ModelMap();
					 fanmap4.put("boardId",boardId);
					 fanmap4.put("userId", userId);						
					 hubReq.setRequestParam(fanmap4);
					 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
					 boolean buddyFan=false;
					 if(buddyFandeatil!=null)
					 {
						 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
						 if(buddyFanResponse!=null)
						 {
							 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
							 {
								 buddyFan=true;
							 }
						 }
						 
					 }
					// buddyFan=true;
					 System.out.println("board : "+buddyFan);
					 mav.addObject("BoardFanReq", buddyFan);
					 
			 
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }		 
			 
			 
			 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/create-ground/{boardId}", method=RequestMethod.GET)
public ModelAndView createGroundProfile(@PathVariable String boardId,HttpServletRequest req){
	ModelAndView mav = new ModelAndView();
	try{

		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
		System.out.println(boardId);
		mav = new ModelAndView("CreateGroundprofile");
		mav.addObject("boardId", boardId);
		String latlng = (String) session.getAttribute("USRLocation");
		if(latlng!=null && latlng.length()>3)
		{
			System.out.println("user location ---> "+latlng);
			String[] latlngArray = latlng.split(",");
			String lat = latlngArray[0];
			String lang = latlngArray[1];
			System.out.println("lat :"+lat+" lng:"+lang);
			mav.addObject("lat", lat);
			mav.addObject("lang", lang);
		}
	
		UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		/*String latlng = (String) session.getAttribute("USRLocation");
		ModelMap map = new ModelMap();
		map.put("latlng", latlng);
		map.put("startNode", 0);
		map.put("endNode", 10);
		hubReq = new HubRequest();
		hubReq.setMsgType(0);
		hubReq.setRequestParam(map);
		
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes != null){
				
			}
		}*/
		
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }		 
			 
			 
			 
			 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@SuppressWarnings("unused")
@RequestMapping(value="/fivewickets/{bid}", method=RequestMethod.GET)
public ModelAndView fiveWickets(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			final String context = request.getContextPath();
			model= new ModelAndView("fiveWicket");
			model.addObject("boardId", bid);
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
					 
				 
				/*HubRequest fiveWicket= new HubRequest();
				fiveWicket.setMsgType(114);
				 ModelMap mapfiveWicket=new ModelMap();	
				 mapfiveWicket.put("createdBy", bid);
				fiveWicket.setRequestParam(mapfiveWicket);
				String strfiveWicket=cricketSocialRestTemplateService.userRegistration(fiveWicket);
				if(fiveWicket!=null)
				{
					 HubResponse fiveWicketResponse= gson.fromJson(strfiveWicket, HubResponse.class);
					 if(fiveWicketResponse!=null && fiveWicketResponse.getResults()!=null && fiveWicketResponse.getResults().getFiveWicketsPlayerList()!=null)
					 {
						 model.addObject("fiveWicketResponse", fiveWicketResponse.getResults().getFiveWicketsPlayerList());
					 }else{
						 
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
				 
				 hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("boardId", bid);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					String yearVal = null;
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
								model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								model.addObject("defaultload", "yes");
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								model.addObject("yearListSize",0);
							}
						}
					}
				 
				 
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(184);
				 ModelMap map = new ModelMap();
				 map.put("boardId", bid);
				 map.put("tournamentId","");
				 map.put("homeTeamId", "");
				 map.put("againstTeamId", "");
				 map.put("filterByYear", yearVal);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 hubReq.setRequestParam(map);
				 
				 String strfiveWicket=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strfiveWicket!=null)
					{
						 HubResponse fiveWicketResponse= gson.fromJson(strfiveWicket, HubResponse.class);
						 if(fiveWicketResponse!=null && fiveWicketResponse.getResults()!=null && fiveWicketResponse.getResults().getFiveWicketsPlayerList()!=null)
						 {
							 model.addObject("fiveWicketResponse", fiveWicketResponse.getResults().getFiveWicketsPlayerList());
						 }else{
							 
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@SuppressWarnings("unused")
@RequestMapping(value="/topbatsman/{bid}", method=RequestMethod.GET)
public ModelAndView topbatsman(@PathVariable String bid , HttpServletRequest request)
{
System.out.println("IN CONTROLLER 1");
	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			final String context = request.getContextPath();
			model= new ModelAndView("TopBatsman");
			model.addObject("boardId", bid);
			
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
				 /*{
					 "msgType":107,
					 "requestParam": {

					  "createdBy":"25434436-6e27-4fbb-b311-d2419e230165"
					  
					  
					 }
					 }*/			 
				 
				/*HubRequest topBatsman= new HubRequest();
				topBatsman.setMsgType(115);
				 ModelMap maptopBatsman=new ModelMap();	
				 maptopBatsman.put("boardId", bid);
				 topBatsman.setRequestParam(maptopBatsman);
				String strtopBatsman=cricketSocialRestTemplateService.userRegistration(topBatsman);
				if(strtopBatsman!=null)
				{
					 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
					 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
					 {
						 model.addObject("TopBatsmanResponse", topBatsmanResponse.getResults().getTopBatsmanList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
			 
				 System.out.println("IN CONTROLLER 2");
				 	hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("boardId", bid);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					String yearVal = null;
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
								model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								model.addObject("defaultload", "yes");
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								model.addObject("yearListSize",0);
							}
						}
					}
				 
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(182);
				 ModelMap map = new ModelMap();
				 map.put("boardId", bid);
				 map.put("tournamentId","");
				 map.put("homeTeamId", "");
				 map.put("againstTeamId", "");
				 map.put("filterByYear", yearVal);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 hubReq.setRequestParam(map);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
						 {
							 model.addObject("TopBatsmanResponse", topBatsmanResponse.getResults().getTopBatsmanList());
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				 
				 
				 
				 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;

}

@RequestMapping(value="/topbowler/{bid}", method=RequestMethod.GET)
public ModelAndView topbowler(@PathVariable String bid , HttpServletRequest request)
{

	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			final String context = request.getContextPath();
			model= new ModelAndView("TopBowler");
			model.addObject("boardId", bid);
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
				 /*{
					 "msgType":107,
					 "requestParam": {

					  "createdBy":"25434436-6e27-4fbb-b311-d2419e230165"
					  
					  
					 }
					 }*/			 
				 
				/*HubRequest topBatsman= new HubRequest();
				topBatsman.setMsgType(116);
				 ModelMap maptopBatsman=new ModelMap();	
				 maptopBatsman.put("boardId", bid);
				 topBatsman.setRequestParam(maptopBatsman);
				String strtopBatsman=cricketSocialRestTemplateService.userRegistration(topBatsman);
				if(strtopBatsman!=null)
				{
					 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
					 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
					 {
						 model.addObject("TopBowlerResponse", topBatsmanResponse.getResults().getTopBowlersList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
				 
				
				 hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("boardId", bid);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					String yearVal = null;
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
								model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								model.addObject("defaultload", "yes");
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								model.addObject("yearListSize",0);
							}
						}
					}
				 
				 
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(183);
				 ModelMap map = new ModelMap();
				 map.put("boardId", bid);
				 map.put("tournamentId","");
				 map.put("homeTeamId", "");
				 map.put("againstTeamId", "");
				 map.put("filterByYear", yearVal);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 hubReq.setRequestParam(map);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
						 {
							 model.addObject("TopBowlerResponse", topBatsmanResponse.getResults().getTopBowlersList());
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				 
				 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;

}

@RequestMapping(value="/topUmpire/{bid}", method=RequestMethod.GET)
public ModelAndView topUmpire(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			model= new ModelAndView("TopUmpires");
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
				 		 
				 
				HubRequest topUmpire= new HubRequest();
				topUmpire.setMsgType(117);
				 ModelMap maptopUmpire=new ModelMap();	
				 maptopUmpire.put("boardId", bid);
				 topUmpire.setRequestParam(maptopUmpire);
				String strtopUmpire=cricketSocialRestTemplateService.userRegistration(topUmpire);
				if(strtopUmpire!=null)
				{
					 HubResponse topUmpireResponse= gson.fromJson(strtopUmpire, HubResponse.class);
					 if(topUmpireResponse!=null && topUmpireResponse.getResults()!=null && topUmpireResponse.getResults().getTopUmpireList()!=null)
					 {
						 model.addObject("TopUmpireResponse", topUmpireResponse.getResults().getTopUmpireList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}


@RequestMapping(value="/teamdetails/{bid}", method=RequestMethod.GET)
public ModelAndView teamdetails(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			model= new ModelAndView("TeamDetails");
			UUID userId = (UUID) session.getAttribute("USRID");
			
			//********************************** Getting User Board List  *******************************************************	 
			
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
				
				HubRequest teamdetails= new HubRequest();
				teamdetails.setMsgType(119);
				 ModelMap mapteamdetails=new ModelMap();	
				 mapteamdetails.put("boardId", bid);
				 mapteamdetails.put("startNode", 0);
				 mapteamdetails.put("endNode", 500);
				 teamdetails.setRequestParam(mapteamdetails);
				String strteamdetails=cricketSocialRestTemplateService.userRegistration(teamdetails);
				if(strteamdetails!=null)
				{
					 HubResponse teamdetailsResponse= gson.fromJson(strteamdetails, HubResponse.class);
					 if(teamdetailsResponse!=null && teamdetailsResponse.getResults()!=null && teamdetailsResponse.getResults().getTeamDetailsList()!=null)
					 {
						 model.addObject("TeamdetailsResponse", teamdetailsResponse.getResults().getTeamDetailsList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}

@RequestMapping(value="/teamcontacts/{bid}", method=RequestMethod.GET)
public ModelAndView teamcontacts(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			model= new ModelAndView("TeamContacts");
			UUID userId = (UUID) session.getAttribute("USRID");
			
			//********************************** Getting User Board List  *******************************************************	 
			
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
				
				/*HubRequest teamdetails= new HubRequest();
				teamdetails.setMsgType(119);
				 ModelMap mapteamdetails=new ModelMap();	
				 mapteamdetails.put("boardId", bid);
				 mapteamdetails.put("startNode", 0);
				 mapteamdetails.put("endNode", 500);
				 teamdetails.setRequestParam(mapteamdetails);
				String strteamdetails=cricketSocialRestTemplateService.userRegistration(teamdetails);
				if(strteamdetails!=null)
				{
					 HubResponse teamdetailsResponse= gson.fromJson(strteamdetails, HubResponse.class);
					 if(teamdetailsResponse!=null && teamdetailsResponse.getResults()!=null && teamdetailsResponse.getResults().getTeamDetailsList()!=null)
					 {
						 model.addObject("TeamdetailsResponse", teamdetailsResponse.getResults().getTeamDetailsList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
				 
				 
				 HubRequest teamcontacts=new HubRequest(268);
				 teamcontacts.setMsgType(268);
				 ModelMap map=new ModelMap();
				 map.put("boardId", bid);
				 teamcontacts.setRequestParam(map);
				 String teamcontactresponse=cricketSocialRestTemplateService.userRegistration(teamcontacts);
				 if(teamcontactresponse != null)
				 {
					 HubResponse contactresponse=gson.fromJson(teamcontactresponse, HubResponse.class);
					 if(contactresponse!=null && contactresponse.getResults()!=null && contactresponse.getResults().getTeamContactDetailList()!=null)
					 {
						 model.addObject("Teamcontactslist", contactresponse.getResults().getTeamContactDetailList());
					 }
				 }else
				 {
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
				 Date date=new Date();
					SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
					model.addObject("PrintDate", sdf.format(date)); 
				 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}


@RequestMapping(value="/create-event/{bid}", method=RequestMethod.GET)
public ModelAndView createEvent(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			model= new ModelAndView("createEvent");
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						
					}
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(234);
				 ModelMap eventtype=new ModelMap();
				 eventtype.put("pageFrom", "Buddy");
				  hubReq.setRequestParam(eventtype);
				 String streventtype=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(streventtype!=null)
				 {
					 String str2=streventtype.replaceFirst("eventListing ", "eventListing");
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(str2, HubResponse.class);
					 System.out.println("event list-----> "+str2);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("EventType", hubResponse2.getResults().getEventTypeList());
						 System.out.println("event----> "+hubResponse2.getResults().getEventTypeList().size());
					 }
					 
				 }
				 
			 
				 String message= null;
				 if(request.getAttribute("message")!=null)
				 {
					 message=(String) request.getAttribute("message");
					 if(message!=null && message!="")
					 {
						 model.addObject("message", message);
						 System.out.println("message ----> "+message);
					 }
					
				 }else{
					 System.out.println("message not found----> "+message);
				 }
				 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}
@RequestMapping(value="/create-buddyevent", method=RequestMethod.GET)
public ModelAndView createbuddyEvent(HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			model= new ModelAndView("createBuddyEvent");
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(234);
			 ModelMap eventtype=new ModelMap();
			 eventtype.put("pageFrom", "Buddy");
			  hubReq.setRequestParam(eventtype);
			 String streventtype=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventtype!=null)
			 {
				 String str2=streventtype.replaceFirst("eventListing ", "eventListing");
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(str2, HubResponse.class);
				 System.out.println("event list-----> "+str2);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("EventType", hubResponse2.getResults().getEventTypeList());
					 System.out.println("event----> "+hubResponse2.getResults().getEventTypeList().size());
				 }
				 
			 }
				 String message= null;
				 if(request.getAttribute("message")!=null)
				 {
					 message=(String) request.getAttribute("message");
					 if(message!=null && message!="")
					 {
						 model.addObject("message", message);
						 System.out.println("message ----> "+message);
					 }
					
				 }else{
					 System.out.println("message not found----> "+message);
				 }
				 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}
@RequestMapping(value="/saveevent", method=RequestMethod.POST)
public ModelAndView saveEvent(HttpServletRequest request, Event2 event)
{
	ModelAndView model=null;
	String eventid=null;
	try{
		HttpSession session=request.getSession(true);
		String message="";
		if(session!=null && session.getAttribute("USRID")!=null)
		{
					
					System.out.println("select date : "+event.getStrDate());
					System.out.println("select Time : "+event.getStrTime());
					
					//String date=DateUtil.getDatabaseDateString(event.getStrDate());
				//	event.setEventDateAndTime(date+" "+event.getStrTime()+":00");
					String strpmtime=event.getStrTime().replaceAll("PM", " PM");
					String strAmTime=strpmtime.replaceAll("AM", " AM");
					System.out.println("time formate  ---------> "+strAmTime);
					//event.setEventDateAndTime(DateUtil.getDatabaseDateString2UTC(event.getStrDate()+" "+strAmTime));					
					
					event.setEventDateAndTime(DateUtil.getUTCDate1(event.getStrDate()+" "+strAmTime,request.getParameter("timeZone")));
					
					System.out.println("final date : "+event.getEventDateAndTime());
					event.setActive(1);
					event.setStatusId("24");
					System.out.println("eve --------------> "+event.getCreatedBycheck());
					event.setCreatedAs(event.getCreatedBycheck().split(","));
					if(Arrays.asList(event.getCreatedAs()).contains("Buddy"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						event.setUserIds(event.getArrayUserids().split(","));
					}else{
						event.setUserIds(null);
					}
					
					if(Arrays.asList(event.getCreatedAs()).contains("Roster"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						//event.setUserIds(event.getArrayUserids().split(","));
						event.setRosterIds(event.getArrayRoasterIds().split(","));
					}else{
						event.setRosterIds(null);
					}
					
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(124);					 
					 hubReq1.setRequestParam(event);
					 String eventCreate=cricketSocialRestTemplateService.userRegistration(hubReq1);
					 if(eventCreate!=null)
					 {
						 System.out.println("Event created");
						 message="Event created";
						 
						 EventResponse response=  GsonConverters.getGsonObject().fromJson(eventCreate, EventResponse.class);
						 if(response!=null){
							 System.out.println("response ------> "+response.getResults().getSaveEvents());
							 String streventid=response.getResults().getSaveEvents();
							 eventid=streventid.replaceFirst("success-", "");
							 System.out.println("-------------------->"+eventid);
						 }
					 }
					
		}
		model= new ModelAndView("redirect:/create-event/"+event.getCreatedBy());
		if(message!="")
		{
			model.addObject("message", message);
		}
		 message="Event Created";
		 model.addObject("EventName", event.getEventName());
		 model.addObject("EventID", eventid);
		 model.addObject("EventDesc", event.getEventDescription());
		 model.addObject("EventVenue", event.getVenue());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/roasterEventSearch", method=RequestMethod.GET)
public @ResponseBody List<RoasterEventSearch> roasterSearch(@RequestParam String boardId, @RequestParam String q ) throws CSException
{
	List<RoasterEventSearch> result=null;
	System.out.println("");
	hubReq= new HubRequest();
	hubReq.setMsgType(164);
	 ModelMap map=new ModelMap();
	 map.put("boardId", boardId);
	 map.put("searchQuery", q);
	 hubReq.setRequestParam(map);
	 String strRoasterSerachResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strRoasterSerachResponse!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strRoasterSerachResponse, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null)
		 {
			 result= hubResponse2.getResults().getRosterEventSearchList();
		 }
	 }
	 System.out.println("size------------> "+result.size());
	return result;
}
@RequestMapping(value="/saveBuddyevent", method=RequestMethod.POST)
public ModelAndView saveBuddyEvent(HttpServletRequest request, Event2 event)
{
	ModelAndView model=null;
	try{
		HttpSession session=request.getSession(true);
		String message="";
		if(session!=null && session.getAttribute("USRID")!=null)
		{
					
			
			System.out.println("time zone :"+request.getParameter("timeZone"));
			
					System.out.println("select date : "+event.getStrDate());
					System.out.println("select Time : "+event.getStrTime());
					
					/*if(event.getCreatedAs().equals("Buddy"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						event.setUserIds(event.getArrayUserids().split(","));
					}else{
						event.setUserIds(null);
					}*/
				//	String date=DateUtil.getDatabaseDateString(event.getStrDate());
					
					//event.setEventDateAndTime(date+" "+event.getStrTime()+":00");
					String strpmtime=event.getStrTime().replaceAll("PM", " PM");
					String strAmTime=strpmtime.replaceAll("AM", " AM");
					System.out.println("time formate  ---------> "+strAmTime);
					//event.setEventDateAndTime(DateUtil.getDatabaseDateString2(event.getStrDate()+" "+strAmTime));
					//event.setEventDateAndTime(DateUtil.getDatabaseDateString2UTC(event.getStrDate()+" "+strAmTime));
					//event.setEventDateAndTime(request.getParameter("offsetValue"));
					
					event.setEventDateAndTime(DateUtil.getUTCDate1(event.getStrDate()+" "+strAmTime,request.getParameter("timeZone")));
					event.setActive(1);
					
					event.setStatusId("24");
					event.setCreatedAs(event.getCreatedBycheck().split(","));
					if(Arrays.asList(event.getCreatedAs()).contains("Buddy"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						event.setUserIds(event.getArrayUserids().split(","));
					}else{
						event.setUserIds(null);
					}
					
					HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(124);					 
					 hubReq1.setRequestParam(event);
					 String eventCreate=cricketSocialRestTemplateService.userRegistration(hubReq1);
					 if(eventCreate!=null)
					 {
						 System.out.println("Event created");
						 message="Event Created";
						 EventResponse response=  GsonConverters.getGsonObject().fromJson(eventCreate, EventResponse.class);
						 if(response!=null){
							 System.out.println("response ------> "+response.getResults().getSaveEvents());
							 String streventid=response.getResults().getSaveEvents();
							 String eventid=streventid.replaceFirst("success-", "");
							 System.out.println("--------------------> "+eventid);
						 }
						 
						 
					 }
					 
					
					 
					
		}
		model= new ModelAndView("redirect:/create-buddyevent");
		if(message!="")
		{
			model.addObject("message", message);
		}
		 
		 model.addObject("EventName", event.getEventName());
		 model.addObject("EventID", "123455");
		 model.addObject("EventDesc", event.getEventDescription());
		 model.addObject("EventVenue", event.getVenue());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}


@RequestMapping(value="/userEvent", method=RequestMethod.GET)
public ModelAndView userEvent(HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			//model= new ModelAndView("UserEventuList2");
			//model= new ModelAndView("UserEventuListNew");
			 model= new ModelAndView("UserEventList");
			 UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			 
			
			// SimpleDateFormat sdf1 = new SimpleDateFormat("'"); 
			// Date date = sdf1.parse(currentTime);
			 /*{
				 "msgType":123,
				 "requestParam": {

				 }
				 }
				 */
			 
			/* hubReq=new HubRequest();
			 hubReq.setMsgType(150);
			 ModelMap eventmap=new ModelMap();
			 eventmap.put("userId", userId);
				 eventmap.put("loggedUserId", userId);
				 
			  hubReq.setRequestParam(eventmap);
			 String streventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(streventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getEventListing()!=null)
				 {
					 model.addObject("EventList", hubResponse2.getResults().getEventListing().get(0));
				 }
				 
			 }*/
			 
			 
			 /*
			  {
    "msgType": 222,
    "properties": {},
    "requestParam": {
        "userId":"679c0940-b1da-4297-a969-4d0be8018b1b",
        "loggedUserId":"679c0940-b1da-4297-a969-4d0be8018b1b",
        "startNode":0,
        "endNode":2
    }
}
 
			  
			  * */
			 
			 ModelMap neweventmap=new ModelMap();
		/*	 neweventmap.put("userId", "679c0940-b1da-4297-a969-4d0be8018b1b");
			 neweventmap.put("loggedUserId", "679c0940-b1da-4297-a969-4d0be8018b1b");*/
			 neweventmap.put("userId", userId);
			 neweventmap.put("loggedUserId", userId);
			 neweventmap.put("startNode", 0);
			 neweventmap.put("endNode", 20);
			 hubReq= new HubRequest();
			 hubReq.setMsgType(222);
			 hubReq.setRequestParam(neweventmap);
			 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(strneweventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
				 {
					 model.addObject("MyEvents", hubResponse2.getResults().getCreatedEventList());
				 }
			 }
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}
@RequestMapping(value="/searchtournamentInLeaug", method=RequestMethod.POST)
@ResponseBody
public List<TournamentDTO> searchtournamentInLeaug(@RequestBody TournmentSearch search)
{
	List<TournamentDTO> list=null;
	try{
		hubReq = new HubRequest();
		hubReq.setMsgType(130);
		
		ModelMap map = new ModelMap();
		map.put("boardId", search.getBoardId());
		map.put("tournamentName", search.getTournamentName());
		hubReq.setRequestParam(map);
		String strSearchResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(strSearchResponse!=null )
		{
			HubResponse response= GsonConverters.getGsonObject().fromJson(strSearchResponse, HubResponse.class);
			if(response!=null && response.getResults()!=null)				
			{
				list=response.getResults().getCentueryList();
			}
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return list;
}

@RequestMapping(value="/eventAcceptedPeopleList", method=RequestMethod.POST)
public @ResponseBody List<UserProfile> acceptEventList(@RequestBody AcceptEventInfo event,HttpServletRequest request)
{
	List<UserProfile> acceptEventList=null;
	try{
		HttpSession session=request.getSession(true);		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId = (UUID) session.getAttribute("USRID");
			hubReq = new HubRequest();
			hubReq.setMsgType(event.getEventInfoId());			
			ModelMap map = new ModelMap();
			map.put("eventId", event.getEventId());			
			hubReq.setRequestParam(map);
			String strSearchResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(strSearchResponse!=null )
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strSearchResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null)				
				{
					acceptEventList=response.getResults().getEventCount();
				}
			}
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return acceptEventList;
}
@RequestMapping(value="/matchAcceptedPeopleList", method=RequestMethod.POST)
public @ResponseBody List<UserProfile> matchAcceptedPeopleList(@RequestBody AcceptEventInfo event,HttpServletRequest request)
{
	List<UserProfile> acceptEventList=null;
	try{
		HttpSession session=request.getSession(true);		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId = (UUID) session.getAttribute("USRID");
			hubReq = new HubRequest();
			hubReq.setMsgType(event.getEventInfoId());			
			ModelMap map = new ModelMap();
			map.put("rosterId", event.getRosterId());	
			map.put("matchId", event.getMatchid());	
			hubReq.setRequestParam(map);
			String strSearchResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			/*if(strSearchResponse!=null )
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strSearchResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null)				
				{
					acceptEventList=response.getResults().getEventCount();
				}
			}*/
			if(strSearchResponse!=null )
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strSearchResponse, HubResponse.class);
				
				if(response!=null && response.getResults()!=null)				
				{
					if(event.getEventInfoId()==200)
					{
						acceptEventList=response.getResults().getRosterMatchAcceptedPlayerList();
					}else if(event.getEventInfoId()==201){
						acceptEventList=response.getResults().getRosterMatchRejectedPlayerList();
					}else if(event.getEventInfoId()==202){
						acceptEventList=response.getResults().getRosterMatchMayBePlayerList();
					}
				}
				
				
			}
			
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return acceptEventList;
}

@RequestMapping(value="/eventOtionSelection", method=RequestMethod.POST)
//public @ResponseBody AcceptEventInfo eventOtionSelection(@RequestBody AcceptEventInfo event,HttpServletRequest request)
public @ResponseBody AcceptEventInfo eventOtionSelection(@RequestBody AcceptEventInfo event,HttpServletRequest request)
{
	String acceptEventList=null;
	AcceptEventInfo strresult=null;
	int result=0;
	try{
		HttpSession session=request.getSession(true);		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId = (UUID) session.getAttribute("USRID");
			hubReq = new HubRequest();
			hubReq.setMsgType(event.getEventInfoId());			
			ModelMap map = new ModelMap();
			map.put("eventId", event.getEventId());	
			map.put("buddyId", userId);
			hubReq.setRequestParam(map);
			String strSearchResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(strSearchResponse!=null )
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strSearchResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null)				
				{
					acceptEventList="success";
					
				}
				if(event.getEventInfoId()==71){
					if(response!=null && response.getResults()!=null && response.getResults().getEventAcceptedCount()!=null)
					{
						strresult=response.getResults().getEventAcceptedCount();
					}
				}else if(event.getEventInfoId()==72){
					if(response!=null && response.getResults()!=null && response.getResults().getEventMayBeCount()!=null)
					{
						strresult=response.getResults().getEventMayBeCount();
					}
				}else if(event.getEventInfoId()==73){
					if(response!=null && response.getResults()!=null && response.getResults().getEventRejectCount()!=null)
					{
						strresult=response.getResults().getEventRejectCount();
					}
				}
			}
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	if(acceptEventList!=null && acceptEventList.equalsIgnoreCase("success"))
	{
		result=1;
	}
	return strresult;
}
@RequestMapping(value="/schedualEventOtionSelection", method=RequestMethod.POST)
public @ResponseBody SheduleAcceptEventResponse schedualEventOtionSelection(@RequestBody SchedulAcceptEventInfo event,HttpServletRequest request)
{
//	String acceptEventList=null;
	SheduleAcceptEventResponse result=null;
//	int result=0;
	try{
		HttpSession session=request.getSession(true);		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID userId = (UUID) session.getAttribute("USRID");
			hubReq = new HubRequest();
			hubReq.setMsgType(196);			
			ModelMap map = new ModelMap();
			map.put("eventMatchMapId", event.getEventMatchMapId());	
			map.put("matchId", event.getMatchId());
			map.put("playerId", userId);
			map.put("rosterId", event.getRosterId());
			
			if(event.getStatus() == 196){
				map.put("statusType", "ACCEPT");
			}else if(event.getStatus() == 197){
				map.put("statusType", "MAYBE");
			}else if(event.getStatus() == 198){
				map.put("statusType", "REJECT");
			}
			
			hubReq.setRequestParam(map);
			String strSearchResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(strSearchResponse!=null )
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strSearchResponse, HubResponse.class);
				
					//result=response.getResults().getMatchAcceptedCount();
					/*if(event.getStatus()==196){
						if(response!=null && response.getResults()!=null && response.getResults().getMatchAcceptedCount()!=null)
						{
							result=response.getResults().getMatchAcceptedCount();
						}
					}else if(event.getStatus()==197){
						if(response!=null && response.getResults()!=null && response.getResults().getMatchMayBeCount()!=null)
						{
							result=response.getResults().getMatchMayBeCount();
						}
					}else if(event.getStatus()==198){
						if(response!=null && response.getResults()!=null && response.getResults().getMatchRejectCount()!=null)
						{
							result=response.getResults().getMatchRejectCount();
						}
					}*/
				
				if(response != null && response.getResults()!=null && response.getResults().getMatchAcceptedCount() !=null){
					result = response.getResults().getMatchAcceptedCount();
					System.out.println("--------------------------------"+response.getResults().getMatchAcceptedCount().getMaybeCount());
				}
				
			}
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	
	return result;
}
@RequestMapping(value="/MyScore", method=RequestMethod.GET)
public ModelAndView myScore(HttpServletRequest request)throws CSException
{
	ModelAndView model=null;
	HttpSession session=request.getSession(true);		
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId = (UUID) session.getAttribute("USRID");			
		model= new ModelAndView("MyScore");
			hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);		
			UserProfile userProfile= new UserProfile();
			userProfile.setUserId(userId);
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result ); 
			 LoginResponse profile = null;
			 if(result!=null)
			 {
				   profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
				  if(profile!=null && profile.getResults()!=null)
				  {
					  model.addObject("UserInfo", profile.getResults().getItemsFound()[0]);
				  }
			 }
			 
			
			 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
			 if(userProfile.getUserId()!=null)
			 {
				 String userIdString = userProfile.getUserId().toString();
				 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
				 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
				 playerInfo.setPlayer1(roldinfo);
			 }
			 model.addObject("SelectedPlayersInfo", playerInfo);
			 
	
			 /*hubReq=new HubRequest(14);
			 hubReq.setMsgType(14);
			 hubReq.setRequestParam("");
			 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("Get the role details  -------------------> "+result2 );
		 
			 
			// UserProfileRoleResponse role=gsonobj.fromJson(result2, UserProfileRoleResponse.class);
			  HubResponse role=GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
			  System.out.println("role sysout----------"+role);
			  
			 if(role.getResults()!=null)
			 {
				 model.addObject("RoleList", role.getResults().getRolesAndSubRoles().getRole());
				
				 model.addObject("SubCAT1", role.getResults().getRolesAndSubRoles().getSubroleLevelOne());
				 
									 
				 
				 model.addObject("SubCAT2",role.getResults().getRolesAndSubRoles().getSubroleLevelTwo());
				 
				
				 model.addObject("SubCAT3",role.getResults().getRolesAndSubRoles().getSubroleLevelThree());
				
					 
				 model.addObject("SubCAT4",role.getResults().getRolesAndSubRoles().getSubroleLevelFour());
			 }*/
			 
		
			List<UserRole> userRole = profile.getResults().getItemsFound()[0].getUserRoleMap();
			
			hubReq=new HubRequest();
			hubReq.setMsgType(145);		
			ModelMap map = new ModelMap();
			map.put("uid", userId);
			map.put("startNode", 0);
			map.put("endNode", 10);
			hubReq.setRequestParam(map);
			String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
			if(playerMatches!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
				if(response!=null && response.getResults()!=null)
				{
					model.addObject("UserMatchInfo", response.getResults().getSearchResponse());
				}
			}
			
			
			//for(int i=0 ; i< userRole.size(); i++){
				//String userRoleName = userRole.get(i).getRole();
				
				
				//if(userRoleName.equalsIgnoreCase("Player")){
			hubReq= new HubRequest();
			hubReq.setMsgType(170);
			ModelMap yearsMap = new ModelMap();
			yearsMap.put("uid", userId);
			yearsMap.put("startNode", 0);
			yearsMap.put("endNode", 10);
			hubReq.setRequestParam(yearsMap);
			String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
			String yearVal = null;
			
			
			if(strYears!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
					if(response.getResults().getCreateUmpire().getYearslist() != null){
						if(response.getResults().getCreateUmpire().getYearslist().size() !=0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}
						
					}else{
						model.addObject("yearListSize",0);
					}
				}
			}
			
			
			
			
			
					hubReq= new HubRequest();
					hubReq.setMsgType(155);
					ModelMap battingmap = new ModelMap();
					battingmap.put("uid", userId);
					battingmap.put("startNode", 0);
					battingmap.put("endNode", 10);
					battingmap.put("filterByYear",yearVal);
					hubReq.setRequestParam(battingmap);
					String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					if(strBattingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("battingPerformanceList", response.getResults().getUserBattingPerformanceList());
							model.addObject("strbattingPerformanceList", GsonConverters.getGsonObject().toJson(response.getResults().getUserBattingPerformanceList()));
							if(response.getResults().getUserBattingPerformanceList() != null){
								model.addObject("battingPerformanceListSize",response.getResults().getUserBattingPerformanceList().size());
							}else{
								model.addObject("battingPerformanceListSize",0);
							}
						}
					}
					
					hubReq= new HubRequest();
					hubReq.setMsgType(147);
					ModelMap bowlingmap = new ModelMap();
					bowlingmap.put("uid", userId);
					bowlingmap.put("startNode", 0);
					bowlingmap.put("endNode", 10);
					bowlingmap.put("flag", "forMyScore");
					bowlingmap.put("filterByYear",yearVal);
					hubReq.setRequestParam(bowlingmap);
					String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				
					if(strBowlingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("bowlingPerformanceList", response.getResults().getUserBowlingPerformanceList());
							if(response.getResults().getUserBowlingPerformanceList() != null){
								model.addObject("bowlingPerformanceListSize",response.getResults().getUserBowlingPerformanceList().size());
							}else{
								model.addObject("bowlingPerformanceListSize",0);
							}
						}
					}
					
					hubReq= new HubRequest();
					hubReq.setMsgType(148);
					ModelMap achievements = new ModelMap();
					achievements.put("uid", userId);
					achievements.put("startNode", 0);
					achievements.put("endNode", 500);
					achievements.put("filterByYear",yearVal);
					hubReq.setRequestParam(achievements);
					String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strAchievementsResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("achievementsList", response.getResults().getUseronedaymatchsachivements());
							if(response.getResults().getUseronedaymatchsachivements() != null){
								model.addObject("achievementsListSize",response.getResults().getUseronedaymatchsachivements().size());
							}else{
								model.addObject("achievementsListSize",0);
							}
						}
					}
					
					
					/*hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("uid", userId);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							if(response.getResults().getCreateUmpire().getYearslist() != null){
								model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							}else{
								model.addObject("yearListSize",0);
							}
						}
					}*/
					
					
					
				/*}else{
					model.addObject("battingPerformanceListSize",0);
					model.addObject("bowlingPerformanceListSize",0);
					model.addObject("achievementsListSize",0);
				}*/
				
			//}
			 
			 
			 
				
				
				
				
				hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
				
				
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;
}

@RequestMapping(value="/boardSearchInCreateTournament2", method=RequestMethod.GET)

public @ResponseBody Object boardSearchInCreateTounament2(HttpServletRequest request,@RequestParam String term) throws CSException
{

		HttpSession session=request.getSession(true);
		Object ob=null;
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			UUID  userId = (UUID) session.getAttribute("USRID");
			 hubReq=new HubRequest(103);
			 hubReq.setMsgType(103);
			 ModelMap map=new ModelMap();
			 map.put("searchQuery", term);
			 //map.put("boardType","Team");
			 map.put("startNode",0);
			 map.put("endNode",10);
			// map.put("userId",userId);
			 hubReq.setRequestParam(map);
			 
			 System.out.println("hubReq :"+hubReq);
			 
			 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 System.out.println("strUseList ");
			 
			 if(strUseList!=null)
			 {
				 HubResponse  searchResponse= gson.fromJson(strUseList, HubResponse.class);
				 if(searchResponse!=null && searchResponse.getResults()!=null)
				 {
					 SearchResponse searchResponse1=searchResponse.getResults().getSearchResponse();
					 if(searchResponse1 != null){
						 ob= searchResponse1.getBoardProfileList();
						 System.out.println(searchResponse1.getBoardProfileList());
					 }				 
				 }else{
					 ob=new ArrayList<UserSearchVO>();
				 }
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
			
		 
		}else{
			 ob=new ArrayList<UserSearchVO>();
			 //model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		return ob;
		
}




//Ramya Integrated
@RequestMapping(value="/updateSchedulerDetails", method= RequestMethod.POST)
public @ResponseBody String updateSchedulerDetails(HttpServletRequest req, @RequestBody Scheduler scheduler ){
	String returnResponse = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			/*String dateString = scheduler.getGameDateStr();

			System.out.println("date string :"+dateString);
			
			String[] spliteDOB = dateString.split("/");
			
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			 String convertedDate= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(convertedDate);*/
			
			String dateString = scheduler.getGameDateStr();

			System.out.println("date string :"+dateString);
			
			
			String strpmtime=scheduler.getGameTime().replaceAll("PM", "PM");
			String strAmTime=strpmtime.replaceAll("AM", "AM");
			//System.out.println("time ----------------> "+strAmTime);
		    String time[] = strAmTime.split(":");
			String hourString=time[0].trim();
			String timeString=time[1].trim();
			//System.out.println("first value-"+hourString+" second value "+timeString+" length-"+hourString.length());
			if(hourString.length() == 1){
				hourString = "0"+hourString;
				timeString = hourString+":"+timeString;
			}else{
				
				timeString = hourString+":"+timeString;
			}
			
			
			
			//String strpmtime=scheduler.getGameTime().replaceAll("PM", " PM");
			//String strAmTime=strpmtime.replaceAll("AM", " AM");
			System.out.println("time ----------------> "+timeString);
			
			
			//event.setEventDateAndTime(DateUtil.getDatabaseDateString2UTC(event.getStrDate()+" "+strAmTime));					
			
			String convertedDate = DateUtil.getUTCDate1(dateString+" "+timeString,scheduler.getTimeZone());
			
			System.out.println("final date : "+convertedDate);
			
			
			Map<String, String> myMap = new HashMap<String, String>();
		
			String idList = scheduler.getScorerId();
			List<ScorerBean> scorerIdList = new ArrayList<ScorerBean>();
			List<String> scorerIds=null;
			if(idList.isEmpty()){
				scorerIds=null;
			}else{
			if(idList!= null){
			    scorerIds = Arrays.asList(idList.split(","));
				for(int i = 0; i<scorerIds.size(); i++){
					String scorerId = scorerIds.get(i);
					ScorerBean updatedId = new ScorerBean();
					updatedId.setScorerId(scorerId);
					System.out.println("id: "+scorerId);
				 
					scorerIdList.add(updatedId);
				System.out.println(scorerIdList);
				}
			}
		}
			
			String portalidList=scheduler.getPortalscorerId();
			List<ScorerBean> portalscoreridlist=new ArrayList<ScorerBean>();
			List<String> portalscorerids;
			if(portalidList.isEmpty())
			{
				portalscorerids=null;
			}else{
				if(portalidList != null)
				{
					portalscorerids=Arrays.asList(portalidList.split(","));
					for(int i=0;i<portalscorerids.size();i++)
					{
						String portalscorerid=portalscorerids.get(i);
						ScorerBean updatedId=new ScorerBean();
						updatedId.setScorerId(portalscorerid);
						portalscoreridlist.add(updatedId);
					}
				}
			}
			
			
			
			
			
			
			String ids = scheduler.getUserId();
			if(ids!= null){
			List<String> umpireIds = Arrays.asList(ids.split(","));
			
			int count = 1;
			
			for(String i : umpireIds){
				if(i.isEmpty()){
					
					myMap.put("umpire_id_"+count, "null");
					
					}else{
				myMap.put("umpire_id_"+count, i);
				
				String h="{";
				
				for (Map.Entry<String, String> entry : myMap.entrySet())
				{
				    System.out.println("------------------------"+entry.getKey() + "/" + entry.getValue());
				   
				    
				    
				    String key = entry.getKey();
				    
				    String value = entry.getValue();
				    
				    String key1="'"+key+"'";
				    
				    String value1="'"+value+"'";
				    
					if(h.endsWith("{"))
					{
						  h=h+key1+":"+value1;
					}else{
						  h=h+","+key1+":"+value1;
					}

				}
				
				h=h+"}";
				
				 count++;
				
				
			}
			
			}
			}
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			
		
			
			
			hubReq = new HubRequest();
			hubReq.setMsgType(106);
			
			System.out.println("game Id :"+scheduler.getGameId());
           
			System.out.println("Schedule Created Date Converted to local date :"+scheduler.getScheduleCreatedDate());
	      
			
			/*SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date inDate=sdf.parse(scheduler.getScheduleCreatedDate()); 
	        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
	        String outDate=sdf.format(inDate);*/
			
			System.out.println("The time Zone :"+scheduler.getTimeZone());
			SimpleDateFormat sdf1= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			sdf1.setTimeZone(TimeZone.getTimeZone(scheduler.getTimeZone()));
			Date inDate=sdf1.parse(scheduler.getScheduleCreatedDate()); 
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
	        String outDate=sdf.format(inDate);
			
			
			ModelMap map = new ModelMap();
			map.put("awayTeamId", scheduler.getAwayTeamId());
			map.put("homeTeamId", scheduler.getHomeTeamId());
			map.put("gameDateStr",outDate);
			//map.put("gameDateStr",convertedDate);
			map.put("groundId", scheduler.getGroundId());
			map.put("tournamentId", scheduler.getTournamentId());
			map.put("createdBy", scheduler.getCreatedBy());
			map.put("modifiedBy", scheduler.getModifiedBy());
			map.put("umpireList", myMap);
			map.put("status", "Upcoming");
			map.put("active", 1);
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			map.put("scorerNamesList", scorerIdList);
			
			if(portalscoreridlist !=null)
			{
				map.put("portalScorerList", portalscoreridlist);
			}
			
			map.put("gameId", scheduler.getGameId());
			map.put("gameDateforMail", scheduler.getGameDateforMail());
			map.put("gameTime", strAmTime);
			
			hubReq.setRequestParam(map);
			
			String schedulerResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(schedulerResponse != null ){
				HubResponse hubRes = gson.fromJson(schedulerResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null)
				{
					String response1 = hubRes.getResults().getScheduleStatus();
					if(hubRes.getResults().getScheduleStatus() != null){
						if(response1.equalsIgnoreCase("updated Successfully")){
							returnResponse = "success";
						}else{
							returnResponse  = "failure"; 
						}
					}else{
						
					}
					
				}
			}
				
			session.setAttribute("UpdateScheduleLanding", "Created");
			
		}else{
			ModelAndView mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return returnResponse;
	
}

@RequestMapping(value="/umpireSearchForCreateScheduler", method=RequestMethod.GET)
@ResponseBody
public Object umpireSearchForCreateScheduler(HttpServletRequest request,@RequestParam String term) throws CSException{

	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(43);
		 hubReq.setMsgType(43);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", term);
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 ob= searchResponse1.getUserSearchBean();
				 }else{
					 ob=null;
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return ob;
	
}
@RequestMapping(value="/AssignUmpire/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView assignUmpire(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		
		if(session != null && session.getAttribute("USRID") != null){
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("AssignUmpire");
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }
		 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
				}
			}
			
			  /*  hubReq = new HubRequest(121);
				hubReq.setMsgType(121);
				ModelMap m1 = new ModelMap();
				m1.put("createdBy", boardId);
				hubReq.setRequestParam(m1);
				String umpireList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(umpireList !=  null){
					HubResponse  hubRes = gson.fromJson(umpireList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						if(hubRes.getResults().getUmpireList() !=null){
							mav.addObject("boardUmpires", hubRes.getResults().getUmpireList().get(0).getUmpireNamesList());
							List<UmpireNameList> nameList = hubRes.getResults().getUmpireList().get(0).getUmpireNamesList();
							System.out.println("boardUmpires size :"+nameList.size());
							
						}else{
						}
						
						
					}
				}*/
			
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
			
		}else{
		ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	
	return mav;
	
}

@RequestMapping(value="/showUmpireListInAssignUmpire", method=RequestMethod.POST)
public @ResponseBody List<TournamentScheduler> showUmpireListAssignUmpire(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<TournamentScheduler> umpireNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(111);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					umpireNameList =  hubRes.getResults().getUmpireListOfSchedule();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return umpireNameList;
}
@RequestMapping(value="/showUmpireListInAssignUmpire2", method=RequestMethod.POST)
public @ResponseBody List<UmpireNameList> showUmpireListAssignUmpire2(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<UmpireNameList> umpireNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(111);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					umpireNameList =  hubRes.getResults().getUmpireListOfSchedule().get(0).getUmpireNamesList();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return umpireNameList;
}
@RequestMapping(value="/addUmpireFromAssignPage", method = RequestMethod.POST)
public @ResponseBody List<BoardUmpire> addUmpireFromAssignPage(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<BoardUmpire> umpireNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(120);
			ModelMap map = new ModelMap();
			map.put("umpireId", scheduler.getUserId());
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getUmpireList()!=null && hubRes.getResults().getUmpireList().size()>0){
					umpireNameList =  hubRes.getResults().getUmpireList();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return umpireNameList;

	
}


@RequestMapping(value="/deleteUmpireFromAssignPage", method = RequestMethod.POST)
public @ResponseBody List<BoardUmpire> deleteUmpireFromAssignPage(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<BoardUmpire> umpireNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(112);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			map.put("umpireId", scheduler.getUserId());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					umpireNameList =  hubRes.getResults().getUmpireList();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return umpireNameList;

	
}

@RequestMapping(value="/AssignScorer/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView assignScorer(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		
		if(session != null && session.getAttribute("USRID") != null){
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("AssignScorer");
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }
		 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
				}
			}
			
			// Commented for code optimization
			
			/*
			    hubReq = new HubRequest(125);
				hubReq.setMsgType(125);
				ModelMap m1 = new ModelMap();
				hubReq.setRequestParam(m1);
				String scorerList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(scorerList !=  null){
					HubResponse  hubRes = gson.fromJson(scorerList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("scorersList", hubRes.getResults().getScorerList().get(0).getScorerNamesList());
						List<ScorerNameList> nameList = hubRes.getResults().getScorerList().get(0).getScorerNamesList();
						System.out.println("scorerList size :"+nameList.size());
					}
				}*/
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
				
			
		}else{
		ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	
	return mav;
	
}

@RequestMapping(value="/showScorerListInAssignUmpire", method=RequestMethod.POST)
public @ResponseBody List<ScorerNameList> showScorerListAssignUmpire(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<ScorerNameList> scorerNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(126);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					scorerNameList =  hubRes.getResults().getScorerListOfSchedule().get(0).getScorerNamesList();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return scorerNameList;
}

@RequestMapping(value="/addScorerFromAssignPage", method = RequestMethod.POST)
public @ResponseBody List<ScorerNameList> addScorerFromAssignPage(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<ScorerNameList> scorerNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(128);
			ModelMap map = new ModelMap();
			map.put("scorerId", scheduler.getUserId());
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					scorerNameList =  hubRes.getResults().getScorerListOfSchedule().get(0).getScorerNamesList();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return scorerNameList;

	
}


@RequestMapping(value="/deleteScorerFromAssignPage", method = RequestMethod.POST)
public @ResponseBody List<ScorerNameList> deleteScorerFromAssignPage(HttpServletRequest req, @RequestBody Scheduler scheduler) throws CSException{
	List<ScorerNameList> scorerNameList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(127);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			map.put("scorerId", scheduler.getUserId());
			hubReq.setRequestParam(map);
			
			//System.out.println("tournamentSchedulerId : "+scheduler.getTournamentSchedulerId());
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson  = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(response != null){
				HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					scorerNameList =  hubRes.getResults().getScorerListOfSchedule().get(0).getScorerNamesList();
					
				}
			}
			

		}else{
			ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return scorerNameList;

	
}

@RequestMapping(value="/SchedulerList/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView SchedulerList(HttpServletRequest req, @PathVariable String boardId) throws CSException{
ModelAndView mav = null;
try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		UUID userId = (UUID) session.getAttribute("USRID");
		
	mav = new ModelAndView("ScheduleList");
	mav.addObject("boardId", boardId);
	
	//*************************** Getting Board info  ***************************************
	 HubRequest hubReq1=new HubRequest();
	 hubReq1.setMsgType(40);
	 ModelMap map1=new ModelMap();			
	 map1.put("userId", userId);			 
	 map1.put("boardId", boardId);
	 hubReq1.setRequestParam(map1);
	 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 if(strBoarddetail!=null){
		 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
		if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
			 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
			
		}
	 }
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(41);
	 ModelMap map2=new ModelMap();
	 map2.put("userId", userId);
	 map2.put("startNode", 0);
	 map2.put("endNode", 200);
	  hubReq.setRequestParam(map2);

		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }
		 }
	 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
					/*if(hubRes.getResults().getTournamentSchedulerList().size() !=0){
						String date = hubRes.getResults().getTournamentSchedulerList().get(0).getEndDateString();
						System.out.println("string date end date :"+date);
						
						mav.addObject("dateString", date);
						
					}else{
						
						Date newDate = new Date();
						
						DateFormat df = new SimpleDateFormat("YYYY-MM-dd");
						String dateFor = df.format(newDate);

						System.out.println("dateFor -------------"+dateFor);
						mav.addObject("dateString", dateFor);
					}*/
				}
			}
	 
	}
	else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	
	
	
}catch(Exception ex){
	ex.printStackTrace();
}
return mav;
}


@RequestMapping(value="/SchedulerList/boardId/{boardId}/{scheduleId}", method = RequestMethod.GET)
public ModelAndView SchedulerList2(HttpServletRequest req, @PathVariable String boardId,@PathVariable Object scheduleId) throws CSException{
ModelAndView mav = null;
try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		UUID userId = (UUID) session.getAttribute("USRID");
		
	mav = new ModelAndView("ScheduleList");
	mav.addObject("boardId", boardId);
	System.out.println("String object ----> "+scheduleId);
	//*************************** Getting Board info  ***************************************
	 HubRequest hubReq1=new HubRequest();
	 hubReq1.setMsgType(40);
	 ModelMap map1=new ModelMap();			
	 map1.put("userId", userId);			 
	 map1.put("boardId", boardId);
	 hubReq1.setRequestParam(map1);
	 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 if(strBoarddetail!=null){
		 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
		if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
			 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
			
		}
	 }
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(41);
	 ModelMap map2=new ModelMap();
	 map2.put("userId", userId);
	 map2.put("startNode", 0);
	 map2.put("endNode", 200);
	  hubReq.setRequestParam(map2);

		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }
		 }
	 
		 
		 
		 
		 
		    hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
					/*if(hubRes.getResults().getTournamentSchedulerList().size() !=0){
						String date = hubRes.getResults().getTournamentSchedulerList().get(0).getEndDateString();
						System.out.println("string date end date :"+date);
						
						mav.addObject("dateString", date);
						
					}else{
						
						Date newDate = new Date();
						
						DateFormat df = new SimpleDateFormat("YYYY-MM-dd");
						String dateFor = df.format(newDate);

						System.out.println("dateFor -------------"+dateFor);
						mav.addObject("dateString", dateFor);
					}*/
				}
			}
			
			
			hubReq = new HubRequest();
			 hubReq.setMsgType(109);
			 ModelMap map = new ModelMap();
			 map.put("tournamentSchedulerId", scheduleId);
			 hubReq.setRequestParam(map);
		
			 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				 if(hubRes != null && hubRes.getResults() != null){
			
					 mav.addObject("schedulerDetails", hubRes.getResults().getTournamentSchelduleDetails());
					
					
				 }
			 }
			 
			
	 
	}
	else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	
	
	
}catch(Exception ex){
	ex.printStackTrace();
}
return mav;
}



@RequestMapping(value="/AmendSchedule/boardId/{boardId}",method= RequestMethod.GET)
public ModelAndView AmendSchedule(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		mav = new ModelAndView("AmendSchedule");
		mav.addObject("boardId", boardId);
        UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
		  
		  GsonBuilder builder = new GsonBuilder();
		  Gson gson = builder.create();
		  
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
	 hubReq = new HubRequest(92);
	 hubReq.setMsgType(92);
	 ModelMap map = new ModelMap();
	 map.put("createdBy", boardId);
	 hubReq.setRequestParam(map);
	 
	 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(response != null){
		 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
		 if(hubRes != null && hubRes.getRequestStatus() != null){
			 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
			 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
		 }else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
		 }
	 }
	 
	    hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);

		hubReq.setRequestParam(model);
		String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(groundList !=  null){
			HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}	 
		
		/* hubReq = new HubRequest(95);
			hubReq.setMsgType(95);
			ModelMap mod= new ModelMap();
			mod.put("boardId", boardId);
			hubReq.setRequestParam(mod);
			String teamList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(teamList !=  null){
				HubResponse  hubRes = gson.fromJson(teamList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("teamList", hubRes.getResults().getTournamentList());

					System.out.println("list size-- :"+hubRes.getResults().getTournamentList().size());
				}
		 
			}	*/
		List<UmpireNameList> umpireList = new ArrayList<UmpireNameList>();
			hubReq = new HubRequest(223);
			hubReq.setMsgType(223);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					//System.out.println("scorer list size :"+ hubRes.getResults().getTournamentSchedulerList().get(0).getScorerNamesList().size());
					/*if(hubRes.getResults().getTournamentsList().size() != 0)
					{
						List<TournamentScheduler> list = hubRes.getResults().getTournamentsList();
						
						if(list.size() != 0){
							
							for(int i =0 ; i < list.size(); i++){
								Date date = list.get(i).getGameDate();
								DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
								String dateFor = df.format(date);
								
								mav.addObject("date", dateFor);
								System.out.println("date:"+dateFor);
								
									System.out.println("i size "+i);
									System.out.println("size :"+list.size());
								mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList());
								System.out.println("umpire Name : "+hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList().get(0).getUmpireName());
								
								
							}
					//mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(0).getUmpireNamesList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				
						}
						}*/
				}
		 
			}	
			
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
			
	}else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
	}
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/topUmpireInfo", method=RequestMethod.POST)
@ResponseBody
public List<UmpireRating> getTopUmpireInfo(@RequestBody String umpireId)
{
	List<UmpireRating> result=null;
	System.out.println("umpire read -------> "+umpireId);
	try{
		 HubRequest hubReq=new HubRequest();
		 hubReq.setMsgType(137);
		 ModelMap map=new ModelMap();			
		 map.put("umpireId", umpireId);			 
		 
		 hubReq.setRequestParam(map);
		 String strUmpire=cricketSocialRestTemplateService.userRegistration(hubReq);	
		 
		 if(strUmpire!=null)
		 {
			 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strUmpire, HubResponse.class);
			 if(hubResponse.getResults()!=null && hubResponse.getResults().getUmpireInfo()!=null)
			 {
				 result=hubResponse.getResults().getUmpireInfo();
			 }
		 }
		 
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return result;
}

//created by ramya
/*@RequestMapping(value="/GameSchedule/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView gameSchedule(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("GameSchedule");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(133);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("endNode", 10);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
					 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());		
					 System.out.println("upcoming matches ->>>>>>>>>>>>>>>>>"+boardId);
					 mav.addObject("boardId",boardId);
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
					 
					 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
					 
					 //System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					 //System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
						 }else{
							 mav.addObject("upcomingMatchesListSize", 0);
						 }
						 if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
						 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
						 }else{
							 mav.addObject("completedMatchesListSize",0);
						 }
						 
						 
						 if(hubResponse.getResults().getGameSchedule().getInprogressMatchesList() != null){
						 mav.addObject("inprogressMatchesListSize",hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size() ); 
					 }else{
						 mav.addObject("inprogressMatchesListSize",0);
					 }
						 
					if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
						mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
					}else{
						mav.addObject("inCompletedMatchesListSize", 0);
					}
				 
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}*/

@RequestMapping(value="/GameSchedule/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView gameSchedule(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("GameSchedule");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
			}
		 }
		 
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq =new HubRequest();
			 hubReq.setMsgType(133);
			 ModelMap map3=new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("previousNextFlag","current");
			 map3.put("endNode", 10);
			 hubReq.setRequestParam(map3);

			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 
					 
					 
					 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
						mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						
						String endDate = hubResponse.getResults().getEndDateStr();

						String startDate = hubResponse.getResults().getStartDateStr();
						String[] spliteDOB1 = startDate.split("-");
						
						 String monthInEditProfile1 = spliteDOB1[0];
						 String dayInEditProfile1 = spliteDOB1[1];
						 String yearInEditProfile1 = spliteDOB1[2];
						
						 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
						
						
							mav.addObject("startDateSet", startDateSet);
						
						
						String[] spliteDOB = endDate.split("-");
						
						 String monthInEditProfile = spliteDOB[0];
						 String dayInEditProfile = spliteDOB[1];
						 String yearInEditProfile = spliteDOB[2];
						 
						
						 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
						
						 mav.addObject("endDateSet", endDateSet);
						
					 
					 
					 mav.addObject("gameSchedule", hubResponse.getResults().getGameSchedule());
					 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());		
					 System.out.println("upcoming matches ->>>>>>>>>>>>>>>>>"+boardId);
					 mav.addObject("boardId",boardId);
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
					 
					 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
					 
					 //System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					 //System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
						 }else{
							 mav.addObject("upcomingMatchesListSize", 0);
						 }
						 if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
						 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
						 }else{
							 mav.addObject("completedMatchesListSize",0);
						 }
						 
						 
						 if(hubResponse.getResults().getGameSchedule().getInprogressMatchesList() != null){
						 mav.addObject("inprogressMatchesListSize",hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size() ); 
					 }else{
						 mav.addObject("inprogressMatchesListSize",0);
					 }
						 
					if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
						mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
					}else{
						mav.addObject("inCompletedMatchesListSize", 0);
					}
				 
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/AssignUmpireSearch", method=RequestMethod.POST)
@ResponseBody
public SearchResponse AssignUmpireSearch(HttpServletRequest request,@RequestBody String key) throws CSException{

	SearchResponse response = null;
	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(121);
		 hubReq.setMsgType(121);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", key);
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 response = searchResponse1;
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return response;
	
}

@RequestMapping(value="/TournamentNameSearchForFilter", method=RequestMethod.POST)
@ResponseBody
public SearchResponse TournamentNameSearchForFilter(HttpServletRequest request,@RequestBody BoardUmpire board) throws CSException{

	SearchResponse response = null;
	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		
		 hubReq=new HubRequest(136);
		 hubReq.setMsgType(136);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", board.getKey());
		 map.put("boardId", board.getBoardId());
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 response = searchResponse1;
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return response;
	
}


@RequestMapping(value="cancelSchedule", method=RequestMethod.POST)
public @ResponseBody String cancelSchedule(@RequestBody TournamentScheduler scheduler,HttpServletRequest req) throws CSException{
	String returnResponse = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			/*hubReq = new HubRequest();
			hubReq.setMsgType(139);
			ModelMap map = new ModelMap();
			map.put("tournamentSchedulerId", scheduler.getTournamentSchedulerId());
			map.put("scheduleCancelReason", scheduler.getScheduleCancelReason());
			map.put("cancelReason", scheduler.getScheduleCancelReason());
			hubReq.setRequestParam(map);
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(response != null){
				HubResponse res = gson.fromJson(response, HubResponse.class);
				if(res != null && res.getResults() != null){
					returnResponse = res.getResults().getStatus();
				}else{
					returnResponse = "failure";
				}
			}*/
			
			String id = scheduler.getTournamentSchedulerId();
			String[] shedulerArray = new String[1];
			shedulerArray[0] = id;
			CancelScheduleDTO dto = new CancelScheduleDTO();
			dto.setBoardId("");
			dto.setShedulerArray(shedulerArray);
			dto.setScheduleCancelReason(scheduler.getScheduleCancelReason());
			
			hubReq = new HubRequest();
			hubReq.setMsgType(203);
			ModelMap map = new ModelMap();
			map.put("boardId", dto.getBoardId());
			map.put("schedulerArray", dto.getShedulerArray());
			map.put("scheduleCancelReason", dto.getScheduleCancelReason());
			hubReq.setRequestParam(map);
			
			String returnRes = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(returnRes != null){
				HubResponse res = GsonConverters.getGsonObject().fromJson(returnRes, HubResponse.class);
				if(res != null && res.getResults() != null){
					returnResponse = res.getResults().getStatus();
				}
			}
			
			
		}else{
			ModelAndView mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return returnResponse;
}



@RequestMapping(value="/filterScheduleFunction", method = RequestMethod.POST)
public ModelAndView filterScheduleFunction(HttpServletRequest req, @ModelAttribute GameSchedule gs, GameScheduleFilter search ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("GameSchedule");
		mav.addObject("boardId", gs.getBoardId());
		mav.addObject("GameFilter", search);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", gs.getBoardId());
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		
			 String tournamentId = req.getParameter("tournamentHiddenId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			 
			 System.out.println("tournamentId :"+tournamentId+" fromDate :"+fromDate+" ToDate :"+toDate);
			 
			 String fromDateString = null;
			 
			 if(fromDate != null && fromDate != ""){
			 String[] spliteDOB = fromDate.split("/");
				
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(fromDateString);
			 }
			 
			 
			 String toDateString = null;
			 if(toDate != null && toDate != ""){
			 String[] spliteDOB1 = toDate.split("/");
				
			 String monthInEditProfile1 = spliteDOB1[0];
			 String dayInEditProfile1 = spliteDOB1[1];
			 String yearInEditProfile1 = spliteDOB1[2];
			 
			
			 toDateString = yearInEditProfile1+'-'+monthInEditProfile1+'-'+dayInEditProfile1;
			 System.out.println(toDateString);
			 }
			 if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId == null || tournamentId == ""){
				System.out.println("inside if");
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 //map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null && hubResponse.getResults().getGameSchedule()!=null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						 
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 
					//	 System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					//	 System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					if(hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					}else{
						 mav.addObject("upcomingMatchesListSize", 0);
					}
					
					if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
						 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					}else{
						 mav.addObject("completedMatchesListSize",0);
					}
					
					if(hubResponse.getResults().getGameSchedule().getInprogressMatchesList() != null){
						mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					}else{
						mav.addObject("inprogressMatchesListSize", 0);
					}
					
					if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
						mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
					}else{
						mav.addObject("inCompletedMatchesListSize", 0);
					}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }else if(tournamentId != null && tournamentId != "" && fromDateString == null || fromDateString == "" && toDateString == null || toDateString == ""){
				 
				 System.out.println("inside else if");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					//	 System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					//	 System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
						 
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());

					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				 
			 }else if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId != null && tournamentId != ""){
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }
			 else{
				 
				 System.out.println("inside else");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					//	 System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 
						 
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				
			 } 
			 
			 
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/CancelGameByDate/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView CancelGameByDate(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("CancelGameByDate");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(133);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("endNode", 10);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
					 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					 //System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					 //System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
				
					 if( hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 }else{
						 mav.addObject("upcomingMatchesListSize",0);
					 }
					 
					 //mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/DisputeManagement/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView DisputeManagement(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("DisputeManagement");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));	
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(146);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("endNode", 0);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
					 mav.addObject("completedMatchesListSize", hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					}
					else{
						 mav.addObject("completedMatchesListSize",0);
					}
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/DisputeManagementPublic/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView DisputeManagementPublic(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("DisputeManagementPublic");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));	
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);		
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(146);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("endNode", 0);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
					 mav.addObject("completedMatchesListSize", hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					}
					else{
						 mav.addObject("completedMatchesListSize",0);
					}
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			//*********************************************************** Boad Fan check  ******************************************************
			 hubReq= new HubRequest();
			 hubReq.setMsgType(76);
			 ModelMap fanmap4=new ModelMap();
			 fanmap4.put("boardId",boardId);
			 fanmap4.put("userId", userId);						
			 hubReq.setRequestParam(fanmap4);
			 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
			 boolean buddyFan=false;
			 if(buddyFandeatil!=null)
			 {
				 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
				 if(buddyFanResponse!=null)
				 {
					 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
					 {
						 buddyFan=true;
					 }
				 }
				 
			 }
			// buddyFan=true;
			 System.out.println("board : "+buddyFan);
			 mav.addObject("BoardFanReq", buddyFan); 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/showScoreCard/boardId/{boardId}/matchId/{matchId}", method = RequestMethod.GET)
public ModelAndView showScoreCard(HttpServletRequest req, @PathVariable String boardId,@PathVariable String matchId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("ScoreCard");
		mav.addObject("boardId", boardId);
		
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 UUID ownerid=null;
		 UUID coownerid=null;
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 ownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				 String coownerresponse=hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId();
				 if(!(coownerresponse.equals(""))){
				 coownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId());
				 }
			}
		 }
		 if((userId.equals(ownerid)) || userId.equals(coownerid))
		 {
			 session.removeAttribute("ScoreCardSession");
			 session.removeAttribute("ScoreCardBoardId");
			 session.removeAttribute("ScoreCardSessionMatchId");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 hubReq= new HubRequest();
			 hubReq.setMsgType(243);
			 ModelMap scoremap=new ModelMap();
			 scoremap.put("matchId", matchId);		
			  hubReq.setRequestParam(scoremap);

				 String strscoremap=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strscoremap!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strscoremap, HubResponse.class);
					 if(hubResponse!=null)
					 {
						 System.out.println("hubResponse.getRequestStatus() ---> "+hubResponse.getRequestStatus());
						 if(hubResponse.getRequestStatus().equalsIgnoreCase("4")){
							System.out.println("manual enter"); 
							
							
							 hubReq = new HubRequest();
							 hubReq.setMsgType(242);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									
									mav.addObject("fallOfWicketsFirstInningsWebPortal", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInningsWebPortal", res.getResults().getSecondInnings().getFallOfWickets());
									mav.addObject("webPortalScoreCard", "Yes");
									
									System.out.println("--------------------------------------------------------");
									System.out.println("---------------------------------------------------------");
									System.out.println("-------------fallOfWicketsFirstInnings-----"+res.getResults().getFirstInnings().getFallOfWickets().size());
									System.out.println("-------------fallOfWicketsSecondInnings-----"+res.getResults().getSecondInnings().getFallOfWickets().size());
									
									String manOfTheMatch="";
									if(res.getResults().getMatchResult().getManOfTheMatch()!=null){
										if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
											for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
										
												if(i == 0){
													manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
												}else{
													manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
												}
											}
										}
									}
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									System.out.println("------------ man of the match -----------"+manOfTheMatch);
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									
									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							
							
						 }else{
							 System.out.println("scoring app");
							 
							 hubReq = new HubRequest();
							 hubReq.setMsgType(13);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									mav.addObject("firstInningsPowerPlayDetails", res.getResults().getFirstInnings().getCommentary().getPowerPlay());
									mav.addObject("firstInningsCommentryDetails", res.getResults().getFirstInnings().getCommentary().getCommentary());
									mav.addObject("secondInningsPowerPlayDetails", res.getResults().getSecondInnings().getCommentary().getPowerPlay());
									mav.addObject("secondInningsCommentryDetails", res.getResults().getSecondInnings().getCommentary().getCommentary());
									
									
									if(res.getResults().getFirstInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getFirstInnings().getCommentary().getPowerPlay().size() > 0){
										mav.addObject("CommentryAvailable","Yes");
									}
									
									String manOfTheMatch = "";
									if(res.getResults().getMatchResult().getManOfTheMatch() != null){
										if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
											for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
										
												if(i == 0){
													manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
												}else{
													manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
												}
											}
										}
									}
									
									
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}
									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							 
							 
						 }
					 }
				 }
			 
			 
			 
		
			 
			 
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(11);
			 ModelMap matchMap = new ModelMap();
			 matchMap.put("tournamentSchedulerId", matchId);
			 matchMap.put("innings", "1");
			 hubReq.setRequestParam(matchMap);
			 
			 String summaryRes = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(summaryRes != null){
				 PlayerSummaryResponse playerRes = GsonConverters.getGsonObject().fromJson(summaryRes, PlayerSummaryResponse.class);
				 if(playerRes != null && playerRes.getResults() != null){
					 mav.addObject("overAllSummary", playerRes.getResults().getItemFound());
					 if(playerRes.getResults().getItemFound() != null){
						
						 mav.addObject("battingInfo", playerRes.getResults().getItemFound().getBattingInfo());			
						 mav.addObject("bowlingInfo",  playerRes.getResults().getItemFound().getBowlingInfo());				 
						 mav.addObject("runnerInfo",  playerRes.getResults().getItemFound().getRunnerInfo());	
						 
						 if(playerRes.getResults().getInningsSCore() != null){
							 
							mav.addObject("SecondInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getSecondInnings().getMap());
							mav.addObject("FirstInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getFirstInnings().getMap());
							 
						 }
						
						 
						 
					 }
					 
					
				 }
				 
			 }
			 */
			 
			 
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 req.setAttribute("BoardId", boardId);
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			
		 }else{
			 mav=new ModelAndView("redirect:/showScoreCardPublicProfile/boardId/"+boardId+"/matchId/"+matchId);
		 } 
		}else{
			session.setAttribute("ScoreCardSession","CompletedCard");
			session.setAttribute("ScoreCardBoardId", boardId);
			session.setAttribute("ScoreCardSessionMatchId", matchId);
			 mav=new ModelAndView("redirect:/showScoreCardSessionOut/boardId/"+boardId+"/matchId/"+matchId);
             /*	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");*/
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
	//return null;
}

@RequestMapping(value="/updateWinPoints", method=RequestMethod.POST)
public @ResponseBody String updateWinPoints(@RequestBody CompletedMatches comp){
	String returnRes = null;
	try{
		
		hubReq = new HubRequest();
		hubReq.setMsgType(153);
		ModelMap map = new ModelMap();
		map.put("tournamentSchedulerId", comp.getTournamentSchedulerId());
		map.put("winTeamPoints", comp.getWinTeamPoints());
		map.put("loseTeamPoints", comp.getLoseTeamPoints());
		map.put("reasonDispMng", comp.getReasonDispMng());
		hubReq.setRequestParam(map);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
			HubResponse  res = gson.fromJson(response, HubResponse.class);
			if(res != null && res.getResults() != null){
			response = res.getResults().getDisputeMangementStatus();	
			}else{
				response = "failure";
			}
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return returnRes;
}
@RequestMapping(value="/getTournamentDetails", method=RequestMethod.POST)
public @ResponseBody List<Tournament> getTournamentDetails(@RequestBody Tournament tournament){
	List<Tournament> tournaments = null;
	try{
		
		hubReq = new HubRequest();
		hubReq.setMsgType(162);
		ModelMap map = new ModelMap();
		map.put("tournamentId", tournament.getTournamentId());
		//map.put("gameId", tournament.getGameId());
		//map.put("gameName", tournament.getGameName());
		hubReq.setRequestParam(map);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
		      HubResponse res = gson.fromJson(response, HubResponse.class);
		      if(res != null && res.getResults() != null){
		    	  if(res.getResults().getTournamentList() != null && res.getResults().getTournamentList().size() != 0){
		    		  tournaments = res.getResults().getTournamentList();
		    	  }
		    		  
		    	  
		      }
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return tournaments;
}

@RequestMapping(value="/filterScheduleFunctionForUpcoming", method = RequestMethod.POST)
public ModelAndView filterScheduleFunctionForUpcoming(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("CancelGameByDate");
		mav.addObject("boardId", gs.getBoardId());
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", gs.getBoardId());
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		
			 String tournamentId = req.getParameter("tournamentHiddenId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			 
			 System.out.println("tournamentId :"+tournamentId+" fromDate :"+fromDate+" ToDate :"+toDate);
			 
			 String fromDateString = null;
			 
			 if(fromDate != null && fromDate != ""){
			 String[] spliteDOB = fromDate.split("/");
				
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(fromDateString);
			 }
			 
			 
			 String toDateString = null;
			 if(toDate != null && toDate != ""){
			 String[] spliteDOB1 = toDate.split("/");
				
			 String monthInEditProfile1 = spliteDOB1[0];
			 String dayInEditProfile1 = spliteDOB1[1];
			 String yearInEditProfile1 = spliteDOB1[2];
			 
			
			 toDateString = yearInEditProfile1+'-'+monthInEditProfile1+'-'+dayInEditProfile1;
			 System.out.println(toDateString);
			 }
			 if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId == null || tournamentId == ""){
				System.out.println("inside if");
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 //map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						 System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }else if(tournamentId != null && tournamentId != "" && fromDateString == null || fromDateString == "" && toDateString == null || toDateString == ""){
				 
				 System.out.println("inside else if");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						 System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				 
			 }else if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId != null && tournamentId != ""){
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						 //System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						 System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }
			 else{
				 
				 System.out.println("inside else");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						 System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				
			 } 
			 

		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

//######################################################  Murthy    ##########################################################################################

@RequestMapping(value="/board/events/{bid}", method=RequestMethod.GET)
public ModelAndView boardEvents(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{	
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			//model =new ModelAndView("boardEventPublic");
			model= new ModelAndView("boardEventListPublic2");
			hubReq=new HubRequest();
			 //hubReq.setMsgType(123);
			 hubReq.setMsgType(150);
			 ModelMap eventmap=new ModelMap();			
			 eventmap.put("userId", bid);
			 eventmap.put("loggedUserId", userId);
			  hubReq.setRequestParam(eventmap);
			 String streventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventlist!=null){
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(streventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getEventListing()!=null){
					 //model.addObject("EventList", hubResponse2.getResults().getEventList());
					 model.addObject("EventList", hubResponse2.getResults().getEventListing().get(0));
					 System.out.println("public event list "+hubResponse2.getResults().getEventListing().get(0).getUpcomingeventObj());
				 }
				 
			 }
			 
			 ModelMap neweventmap=new ModelMap();
				// neweventmap.put("userId", "1dfcf4f8-87e7-4849-986b-1a35777073cf");
				 neweventmap.put("userId", bid);
				 neweventmap.put("loggedUserId", userId);
				 neweventmap.put("startNode", 0);
				 neweventmap.put("endNode", 20);
				 hubReq= new HubRequest();
				 hubReq.setMsgType(222);
				 hubReq.setRequestParam(neweventmap);
				 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
				 if(strneweventlist!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
					 {
						 model.addObject("MyEvents", hubResponse2.getResults().getCreatedEventList());
					 }
				 }
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", bid);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			 
			//********************************************  Get board Details  ************************************************	  
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }
				 }

				 hubReq= new HubRequest();
				 hubReq.setMsgType(76);
				 ModelMap map4=new ModelMap();
				 map4.put("boardId",bid);
				 map4.put("userId", userId);						
				 hubReq.setRequestParam(map4);
				 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean buddyFan=false;
				 if(buddyFandeatil!=null)
				 {
					 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
					 if(buddyFanResponse!=null)
					 {
						 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
						 {
							 buddyFan=true;
						 }
					 }
					 
				 }
				// buddyFan=true;
				 System.out.println("board : "+buddyFan);
				 model.addObject("BoardFanReq", buddyFan);
				 
				 
		}else{
			model = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		 logger.error("board event public profile");
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/matcheUmpireList", method=RequestMethod.POST)
public @ResponseBody List<UserProfile> gettingUmpireList(@RequestBody UmpireList umpire )
{
	List<UserProfile> umpireList=null;
	System.out.println(""+umpire.getSchedualId());
	try{
		
		hubReq=new HubRequest();		
		 hubReq.setMsgType(169);
		 ModelMap umpiremap=new ModelMap();		
		 umpiremap.put("tournamentSchedulerId", umpire.getSchedualId());
		 umpiremap.put("captainId", umpire.getCaptainId());
		  hubReq.setRequestParam(umpiremap);
		 String strumpirelist=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strumpirelist!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strumpirelist, HubResponse.class);
			 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getUmpireNameList()!=null)
			 {
				 umpireList=hubResponse2.getResults().getUmpireNameList();
				System.out.println("umpire list  :  --> "+GsonConverters.getGsonObject().toJson(hubResponse2));
				System.out.println("========================================================================");
			 for(UserProfile p : hubResponse2.getResults().getUmpireNameList())
			 {
				 System.out.println("user name : "+p.getFirstName());
				 
			 }
			 
			 }
			 
		 }
		 
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return umpireList;
}

@RequestMapping(value="/umpireRating", method=RequestMethod.POST)
public @ResponseBody UmpireList umpireRating(@RequestBody UmpireList umpireList, HttpServletRequest request)
{
	System.out.println("==============================================================");
	UmpireList rating=null;
	try{
		String date=DateUtil.getDBFormateWithPassingDateAndTimes(umpireList.getMatchDate());
		System.out.println("game date ----> "+date);
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			umpireList.setGameDate(date);
			hubReq=new HubRequest();		
			hubReq.setMsgType(129);		
			umpireList.setTeamCaptainId(userId+"");
			hubReq.setRequestParam(umpireList);
			String strumpireRating=cricketSocialRestTemplateService.userRegistration(hubReq);
			if(strumpireRating!=null)
			{
				HubResponse hubResponse=GsonConverters.getGsonObject().fromJson(strumpireRating, HubResponse.class); 
				if(hubResponse!=null && hubResponse.getResults()!=null)
				{
					rating= new UmpireList();
					rating.setResultStatus(hubResponse.getResults().getCreateUmpireRating());
				}
			}
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return rating;
}

@RequestMapping(value="/playerCompare", method=RequestMethod.GET)
public ModelAndView playerCompare(HttpServletRequest request)
{
	ModelAndView model=null;
	try{
		model= new ModelAndView("SelectPlayerToComparisan");
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************************  Get board Details  ************************************************	  
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }
				 }

		}else{
			model = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return model;
}

@RequestMapping(value="/playerSearch", method=RequestMethod.POST)
public @ResponseBody List<PlayerSearchResponse> playerSearch(@RequestBody PlayerSearch search)
{
	List<PlayerSearchResponse> response= null;
	try{
		 hubReq=new HubRequest(13);
		 hubReq.setMsgType(160);	
		 search.setStartNode("0");
		 search.setEndNode("10");
		 hubReq.setRequestParam(search);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);		 
		 if(result!=null)
		 {
			  HubResponse player=GsonConverters.getGsonObject().fromJson(result, HubResponse.class);
			  if(player!=null && player.getResults()!=null)
			  {
				  response=player.getResults().getPlayerSearchList();
			  }
		 }
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return response;
}
@RequestMapping(value="/playerComparing", method=RequestMethod.POST)
public ModelAndView playerComparing(SelectedPlayers players,HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		
		HttpSession session=request.getSession(true);
	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
		
		UUID userId = (UUID) session.getAttribute("USRID");
		System.out.println("player info -- > "+players.getUid());
		System.out.println("player info2 ---> "+players.getUid1());

		System.out.println("player info3 ---> "+players.getUid2());
		System.out.println("player info4 ---> "+players.getUid3());
		System.out.println("year searting --- > "+players.getFilterByYear());
		model= new ModelAndView("PlayerComparisan");
		
		 hubReq=new HubRequest();
		 hubReq.setMsgType(156);		
		 hubReq.setRequestParam(players);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);		 
		 if(result!=null)
		 {
			  HubResponse player=GsonConverters.getGsonObject().fromJson(result, HubResponse.class);
			  if(player!=null && player.getResults()!=null)
			  {
				  
				  PlayerComparisionPerformanceList list= player.getResults().getPlayerComparisionPerformanceList();
				  if(players.getUid3()==null || players.getUid3()=="" ||players.getUid3().length()<2)
				  {
					  list.setPlayerbattingbowlingstatus3(null);
					  System.out.println("---------------------------------------------------");
				  }
				 
				  
				  model.addObject("PlayerComparisionList", list);
			  }
		 }
		 
		// UserPlayrInfo getUserPlayerInfo(
		 
		 
		 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
		 if(players.getUid()!=null && players.getUid()!="" && players.getUid().length()> 2)
		 {
			 UserProfileRole role= CSRestFullService.getUserDetails(players.getUid());
			 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
			 playerInfo.setPlayer1(roldinfo);
		 }
		 
		 if(players.getUid1()!=null && players.getUid1()!="" && players.getUid1().length()> 2)
		 {
			 UserProfileRole role= CSRestFullService.getUserDetails(players.getUid1());
			 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
			 playerInfo.setPlayer2(roldinfo);
		 }
		 
		
		 if(players.getUid2()!=null && players.getUid2()!="" && players.getUid2().length()> 2)
		 {
			 UserProfileRole role= CSRestFullService.getUserDetails(players.getUid2());
			 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
			 playerInfo.setPlayer3(roldinfo);
		 }
		 
		 if(players.getUid3()!=null && players.getUid3()!="" && players.getUid3().length()> 2)
		 {
			 UserProfileRole role= CSRestFullService.getUserDetails(players.getUid3());
			 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
			 playerInfo.setPlayer4(roldinfo);
		 }
		 
		 model.addObject("SelectedPlayersInfo", playerInfo);
		 model.addObject("CompareUserInfo", players);
		//********************************************  Get board Details  ************************************************	  
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map3=new ModelMap();
		 map3.put("userId", userId);
		 map3.put("startNode", 0);
		 map3.put("endNode", 200);
		  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
			 }
			
			}else{
				model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/Create-Umpire/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView createUmpire2(@PathVariable String boardId,HttpServletRequest request){
	
	System.out.println("boardId :"+boardId);
	ModelAndView mav = new ModelAndView();
	HttpSession session=request.getSession(true);
	try{
		if(session!=null && session.getAttribute("USRID")!=null)
		{
	mav = new ModelAndView("CreateUmpirepublicprofile");
	mav.addObject("boardId", boardId);
	
	UUID userId = (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(41);
	 ModelMap map=new ModelMap();
	 map.put("userId", userId);
	 map.put("startNode", 0);
	 map.put("endNode", 200);
	  hubReq.setRequestParam(map);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }
		 }
		 
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map11=new ModelMap();			
		 map11.put("userId", session.getAttribute("USRID"));			 
		 map11.put("boardId", boardId);
		 hubReq1.setRequestParam(map11);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
			{
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = request.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);				
			}
		 }	

		//*************************** Getting Country code  ***************************************
		 HubRequest hubReq2=new HubRequest();
		 hubReq2.setMsgType(249);
		 ModelMap map2=new ModelMap();			
		 String contryCodeString=cricketSocialRestTemplateService.userRegistration(hubReq2);		
		 if(contryCodeString != null){
			 HubResponse userDetails=GsonConverters.getGsonObject().fromJson(contryCodeString, HubResponse.class);
			 System.out.println("res----->>123>"+userDetails);
			/* if(userDetails!=null && userDetails.getResults()!=null && userDetails.getResults().getItemsFound()!=null && userDetails.getResults().getItemsFound().size()>0)
			 {*/
				 List<CountryCodes> countryCodes = userDetails.getResults().getItemFound().getCountryCodes();
				 mav.addObject("countryCodes", countryCodes);
				 System.out.println("ccccccccccccc======"+countryCodes.get(0).getCountryCode()+"----------"+countryCodes.get(0).getCountryName());
			// }
		 }
		 
		}else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}
@RequestMapping(value="/Scheduler-List/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView SchedulerList2(HttpServletRequest req, @PathVariable String boardId) throws CSException{
ModelAndView mav = null;
try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		UUID userId = (UUID) session.getAttribute("USRID");
		
	mav = new ModelAndView("ScheduleListpublicprofile");
	mav.addObject("boardId", boardId);
	
	//*************************** Getting Board info  ***************************************
	 HubRequest hubReq1=new HubRequest();
	 hubReq1.setMsgType(40);
	 ModelMap map1=new ModelMap();			
	 map1.put("userId", userId);			 
	 map1.put("boardId", boardId);
	 hubReq1.setRequestParam(map1);
	 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 if(strBoarddetail!=null){
		 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
		if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
			 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
			 final String context = req.getContextPath();
			 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
			 mav.addObject("LeaugeMenuList", menuList);
		}
	 }
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(41);
	 ModelMap map2=new ModelMap();
	 map2.put("userId", userId);
	 map2.put("startNode", 0);
	 map2.put("endNode", 200);
	  hubReq.setRequestParam(map2);

		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }
		 }
	 
		 
		 //*********************************************************** Boad Fan check  ******************************************************
				 hubReq= new HubRequest();
				 hubReq.setMsgType(76);
				 ModelMap fanmap4=new ModelMap();
				 fanmap4.put("boardId",boardId);
				 fanmap4.put("userId", userId);						
				 hubReq.setRequestParam(fanmap4);
				 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean buddyFan=false;
				 if(buddyFandeatil!=null)
				 {
					 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
					 if(buddyFanResponse!=null)
					 {
						 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
						 {
							 buddyFan=true;
						 }
					 }
					 
				 }
				// buddyFan=true;
				 System.out.println("board : "+buddyFan);
				 mav.addObject("BoardFanReq", buddyFan);
				 
		 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
					
					/*if(hubRes.getResults().getTournamentSchedulerList().size() !=0){
						String date = hubRes.getResults().getTournamentSchedulerList().get(0).getEndDateString();
						System.out.println("string date end date :"+date);
						
						mav.addObject("dateString", date);
						
					}else{
						
						Date newDate = new Date();
						
						DateFormat df = new SimpleDateFormat("YYYY-MM-dd");
						String dateFor = df.format(newDate);

						System.out.println("dateFor -------------"+dateFor);
						mav.addObject("dateString", dateFor);
					}*/
				}
			}
	 
	}
	else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	
	
	
}catch(Exception ex){
	ex.printStackTrace();
}
return mav;
}

@RequestMapping(value="/editEvent/{eid}", method=RequestMethod.GET)
public ModelAndView editEvent(@PathVariable String eid, HttpServletRequest request)
{
	ModelAndView model=null;
	
	try {
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		System.out.println("eid---> "+eid);
		model= new ModelAndView("editBuddyEvent");
		EditEvent event= csRestTemplateService.gettingEventDetail(eid);
		System.out.println("event name : "+event.getEventTypeId());
		
		Date date=DateUtil.getDateObjectPassingStringDate(event.getEventDate());
		System.out.println("eventDATE-----> "+date);
		event.setEventDateAndTime(date);
		model.addObject("EditEventObj", event);
		
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("M/d/YYYY hh:mm a");
		simpleDateFormat.format(event.getEventDateAndTime());
		System.out.println("simple date format :"+simpleDateFormat.format(event.getEventDateAndTime()));
		model.addObject("eventTime", simpleDateFormat.format(event.getEventDateAndTime()));
		
		List<String> check =	new ArrayList<String>(Arrays.asList(event.getCreatedAs()));
		model.addObject("SelectCheck", check);
		boolean buddy=false;
		if(check.contains("Buddy"))
		{
			buddy=true;
			System.out.println("");
		}
		System.out.println("buddy ---> "+buddy);
		model.addObject("BuddyDiv", buddy);
		
		
		
		
		
		
		
		
		
		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 
			    hubReq=new HubRequest();
hubReq.setMsgType(234);
ModelMap eventtype=new ModelMap();
eventtype.put("pageFrom", "Buddy");
hubReq.setRequestParam(eventtype);
String streventtype=cricketSocialRestTemplateService.userRegistration(hubReq);

if(streventtype!=null)
{
	 String str2=streventtype.replaceFirst("eventListing ", "eventListing");
	 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(str2, HubResponse.class);
	 System.out.println("event list-----> "+str2);
	 if(hubResponse2!=null && hubResponse2.getResults()!=null)
	 {
		 model.addObject("EventType", hubResponse2.getResults().getEventTypeList());
		 System.out.println("event----> "+hubResponse2.getResults().getEventTypeList().size());
	 }
	 
}
			 
		}else{
			model = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	} catch (Exception e) {
		e.printStackTrace();
	}
	return model;
			
}
@RequestMapping(value="/editboardEvent/board/{bid}/{eid}", method=RequestMethod.GET)
public ModelAndView editBoardEvent(@PathVariable String bid,@PathVariable String eid, HttpServletRequest request)
{
	ModelAndView model=null;
	
	try {
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		System.out.println("eid---> "+eid);
		model= new ModelAndView("editBoardEvent");
		EditEvent event= csRestTemplateService.gettingEventDetail(eid);
		Date date=DateUtil.getDateObjectPassingStringDate(event.getEventDate());
		System.out.println("eventDATE-----> "+date);	
		event.setEventDateAndTime(date);
		model.addObject("EditEventObj", event);
		
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("M/d/YYYY hh:mm a");
		simpleDateFormat.format(event.getEventDateAndTime());
		System.out.println("simple date format :"+simpleDateFormat.format(event.getEventDateAndTime()));
		model.addObject("eventTime", simpleDateFormat.format(event.getEventDateAndTime()));	
		
		List<String> check =	new ArrayList<String>(Arrays.asList(event.getCreatedAs()));
		model.addObject("SelectCheck", check);
		boolean roster=false;
		boolean buddy=false;
		if(check.contains("Buddy"))
		{
			buddy=true;
			System.out.println("");
		}
		System.out.println("buddy ---> "+buddy);
		model.addObject("BuddyDiv", buddy);
		if(check.contains("Roster"))
		{
			roster=true;
		}
		
		model.addObject("RosterDiv", roster);
		for(String s: check){
			System.out.println(s);
		}
		System.out.println("event name : "+event.getEventName());
		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", userId);
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", bid);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
				}
			 }
			 
			 
			 
hubReq=new HubRequest();
hubReq.setMsgType(234);
ModelMap eventtype=new ModelMap();
eventtype.put("pageFrom", "Board");
hubReq.setRequestParam(eventtype);
String streventtype=cricketSocialRestTemplateService.userRegistration(hubReq);

if(streventtype!=null)
{
	 String str2=streventtype.replaceFirst("eventListing ", "eventListing");
	 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(str2, HubResponse.class);
	 System.out.println("event list-----> "+str2);
	 if(hubResponse2!=null && hubResponse2.getResults()!=null)
	 {
		 model.addObject("EventType", hubResponse2.getResults().getEventTypeList());
		 System.out.println("event----> "+hubResponse2.getResults().getEventTypeList().size());
	 }
	 
}
			 
			 
		}else{
			model = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	} catch (Exception e) {
		e.printStackTrace();
	}
	return model;
			
}

@RequestMapping(value="/updateboardevent", method=RequestMethod.POST)
public ModelAndView updateEvent(HttpServletRequest request, Event2 event)
{
	ModelAndView model=null;
	try{
		HttpSession session=request.getSession(true);
		String message="";
		if(session!=null && session.getAttribute("USRID")!=null)
		{
					
					System.out.println("select date : "+event.getStrDate());
					System.out.println("select Time : "+event.getStrTime());
					
					
					//event.setEventDateAndTime(event.getStrDate()+" "+event.getStrTime());

					 String strpmtime=event.getStrTime().replaceAll("PM", " PM");
						String strAmTime=strpmtime.replaceAll("AM", " AM");
						System.out.println("time ----------------> "+strAmTime);
						//String strDate=DateUtil.getDatabaseDateString2(event.getStrDate()+" "+strAmTime);		
						
						String strDate = DateUtil.getUTCDate1(event.getStrDate()+" "+strAmTime,request.getParameter("timeZone"));
						
						event.setEventDateAndTime(strDate);
					
					event.setActive(1);
					event.setStatusId("24");
					System.out.println("eve --------------> "+event.getCreatedBycheck());
					event.setCreatedAs(event.getCreatedBycheck().split(","));
					if(Arrays.asList(event.getCreatedAs()).contains("Buddy"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						
						String userIds=event.getArrayUserids();
						
						String[] list=null;
						if(userIds!="" && userIds.length()>3){
							list=event.getArrayUserids().split(",");
						}
						event.setUserIds(list);
					}else{
						event.setUserIds(null);
					}
					
					if(Arrays.asList(event.getCreatedAs()).contains("Roster"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						//event.setUserIds(event.getArrayUserids().split(","));
						String rostorids=event.getArrayRoasterIds();
						String[] list=null;
						if(rostorids!="" && rostorids.length()>2){
							list=event.getArrayRoasterIds().split(",");
						}
						//event.setRosterIds(list);
						if(list.length>0)
						{
							event.setRosterIds(list);
						}else{
							event.setRosterIds(null);
						}
						
					}else{
						event.setRosterIds(null);
					}
					
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(175);					 
					 hubReq1.setRequestParam(event);
					 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
					 if(strBoarddetail!=null)
					 {
						 System.out.println("Event created");
						 message="Event Created";
						 
					 }
					
		}
		model= new ModelAndView("redirect:/boardEvent/"+event.getCreatedBy());
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/updateuserevent", method=RequestMethod.POST)
public ModelAndView updateuserevent(HttpServletRequest request, UserEventUpate event)
{
	ModelAndView model=null;
	try{
		HttpSession session=request.getSession(true);
		String message="";
		if(session!=null && session.getAttribute("USRID")!=null)
		{
					
					System.out.println("select date : "+event.getStrDate());
					System.out.println("select Time : "+event.getStrTime());
					
					
					//event.setEventDateAndTime(event.getStrDate()+" "+event.getStrTime()+":00");
					String strpmtime=event.getStrTime().replaceAll("PM", " PM");
					String strAmTime=strpmtime.replaceAll("AM", " AM");
					System.out.println("time ----------------> "+strAmTime);
				
					//String strDate=DateUtil.getDatabaseDateString2(event.getStrDate()+" "+strAmTime);				
					
					String strDate = DateUtil.getUTCDate1(event.getStrDate()+" "+strAmTime,request.getParameter("timeZone"));
					
					event.setEventDateAndTime(strDate);
					event.setActive(1);
					event.setStatusId("24");
					System.out.println("eve --------------> "+event.getCreatedBycheck());
					event.setCreatedAs(event.getCreatedBycheck().split(","));
					
					if(Arrays.asList(event.getCreatedAs()).contains("Buddy"))
					{
						
						String userids=event.getArrayUserids();
						String[] list= null;
						if(userids!="" && userids.length()>3){
							list= event.getArrayUserids().split(",");
						}
						
						
						System.out.println("select user id "+list);
						if(list!=null && list.length>0)
						{
							//event.setUserIds(Arrays.asList(list));
							List<String> arraylist=new ArrayList<String>();
							for(String l : list)
							{
								arraylist.add(l);
								System.out.println("userid ----------> "+l);
							}
							event.setUserIds(arraylist);
						}else{
							event.setUserIds(new ArrayList<String>());
						}
					}else{
						event.setUserIds(null);
					}
					event.setRosterIds(new ArrayList<String>());
					/*if(Arrays.asList(event.getCreatedAs()).contains("Roster"))
					{
						System.out.println("select user id "+event.getArrayUserids());
						//event.setUserIds(event.getArrayUserids().split(","));
						//event.setRosterIds(event.getArrayRoasterIds().split(","));
						String[] list=event.getArrayRoasterIds().split(",");
						//event.setRosterIds(list);
						if(list.length>0)
						{
							event.setRosterIds(list);
						}else{
							event.setRosterIds(null);
						}
					}else{
						event.setRosterIds(null);
					}*/
					
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(175);					 
					 hubReq1.setRequestParam(event);
					 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
					 if(strBoarddetail!=null)
					 {
						 System.out.println("Event created");
						 message="Event Created";
						 
					 }
					
		}
		model= new ModelAndView("redirect:/userEvent");
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/rosterInfo", method=RequestMethod.GET)
public @ResponseBody ModelAndView rosterInfo(HttpServletRequest request,@RequestParam String rosterId) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	UUID userId=(UUID) session.getAttribute("USRID");
	if(session != null && userId!=null){
		
			 hubReq=new HubRequest(48);
			 hubReq.setMsgType(48);
			 
			 ModelMap modelMap=new ModelMap();
			 modelMap.put("rosterId",rosterId );
			 modelMap.put("startNode",0 );
			 modelMap.put("endNode",100 );
			 modelMap.put("feedHitUserId", userId);
			 hubReq.setRequestParam(modelMap);

			 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
			String bId=null;
			 if(hubResponse !=null){
				// ffff
				// model=new ModelAndView("roaster");
				 model=new ModelAndView("publicProfileRoster");
				 ResponseType results1=hubResponse.getResults();
				 if(results1 != null){
					RoasterResponseById roasterResponseById=results1.getRosterInfo();
					request.setAttribute("RoasterResponseById", roasterResponseById);
					System.out.println("bord id -----> "+bId);
					//bId=results1.getRosterInfo().getRosterDetails().getRosterBoardDto().getBoardId();
					bId=results1.getRosterInfo().getRosterDetails().getRosterBoardDto().getBoardId();
					
					ModelMap neweventmap=new ModelMap();
					 neweventmap.put("userId", bId);
					 neweventmap.put("loggedUserId", userId);
					 neweventmap.put("startNode", 0);
					 neweventmap.put("endNode", 20);
					 hubReq= new HubRequest();
					 hubReq.setMsgType(222);
					 hubReq.setRequestParam(neweventmap);
					 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 if(strneweventlist!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
						 {
							 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
							 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
						 }
					 }
					
					
					
				 }
				 
				 
				 
// Print details
				 
                 hubReq=new HubRequest();
				 
				 hubReq.setMsgType(267);
				 ModelMap rosterMapprint=new ModelMap();
				 rosterMapprint.put("rosterId",rosterId);
				 
				 hubReq.setRequestParam(rosterMapprint);

				 String roasterResponseprint=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseprint!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseprint, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterPrintDetails()!=null){
						 
							Roaster rosterprint=rosterhubResponse.getResults().getRosterPrintDetails();
							
							model.addObject("Rosterprint", rosterprint);
							model.addObject("RosterCreatedDate", rosterprint.getRosterCreatedDate());
							
							Date date=new Date();
							SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
							model.addObject("PrintDate", sdf.format(date));
					 }
						
				 }
				 
				 
				 
				 
				 
				 hubReq=new HubRequest();
				 
				 hubReq.setMsgType(188);// roster details based uisng cassandra
				 ModelMap rosterMap2=new ModelMap();
				 rosterMap2.put("rosterId",rosterId);
				 rosterMap2.put("startNode",0 );
				 rosterMap2.put("endNode",100 );
				 
				 hubReq.setRequestParam(rosterMap2);

				 String roasterResponseByIdStringResult=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseByIdStringResult!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdStringResult, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterInfo()!=null){
						 
							RoasterResponseById roasterResponseById2=rosterhubResponse.getResults().getRosterInfo();
							request.setAttribute("RoasterMemberList", roasterResponseById2);
							
					 }
						
				 }
				 
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(40);
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId",bId);
				 hubReq.setRequestParam(map);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					}
				 }	
				
				 hubReq=new HubRequest(63);
				 hubReq.setMsgType(63);
				 ModelMap modelMap1=new ModelMap();
				 modelMap1.put("boardId", bId);
				 hubReq.setRequestParam(modelMap1);
		
				 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
				 
				 
				 if(resp !=null && resp.getRequestStatus().equals("0")){
					 
					 ResponseType results=resp.getResults();
					 
					 System.out.println("results"+results.getRosterList().size());
					 
					 if(results != null ){
						 
						 List<Roaster> roasters=results.getRosterList();
						 request.setAttribute("Roasters", roasters);
						 
					 }
				 
				 }
				 hubReq=new HubRequest();
				 hubReq.setMsgType(99);
				 ModelMap modelMap5=new ModelMap();
				 //modelMap5.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");		
				 modelMap5.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap5);
				 String bowler=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse bowlingPerformance= GsonConverters.getGsonObject().fromJson(bowler, HubResponse.class);
				 if(bowlingPerformance!=null && bowlingPerformance.getResults()!=null)
				 {
					 model.addObject("BowlingPerformance", bowlingPerformance.getResults().getBowlingPerformance());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(98);
				 ModelMap modelMap6=new ModelMap();
				 //modelMap6.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");
				 modelMap6.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap6);
				 String batting=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse battingPerformance= GsonConverters.getGsonObject().fromJson(batting, HubResponse.class);
				 if(battingPerformance!=null && battingPerformance.getResults()!=null)
				 {
					 model.addObject("BattingPerformance", battingPerformance.getResults().getBattingPerformance());
				 }
				 
				 
				 hubReq=new HubRequest();
					hubReq.setMsgType(97);
					 ModelMap map2=new ModelMap();			
					 map2.put("rosterId", rosterId);			 
					 map2.put("boardId", bId);
					 map2.put("attachmentType", "video");
					 hubReq.setRequestParam(map2);
					 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail2!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
						if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
						{
							model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
							System.out.println("RoasterVideosList------>hubResponse2.getResults().getRosterAttachment()----> "+hubResponse2.getResults().getRosterAttachment().size());
							
						}
					 }	
					 
					 hubReq=new HubRequest();
						hubReq.setMsgType(96);
						 ModelMap map4=new ModelMap();			
						 map4.put("rosterId", rosterId);			 
						 map4.put("boardId", bId);
						 map4.put("attachmentType", "image");
						 hubReq.setRequestParam(map4);
						 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 if(strBoarddetail2!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
							if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
							{
								model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
								System.out.println("RoasterImageList-----> hubResponse2.getResults().getRosterAttachment()---> "+hubResponse2.getResults().getRosterAttachment().size());
								
							}
						 }	
						 
				 
				 
				 
				/* hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
				
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }
				 */
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				 
				 
					//********************************************  Get board Details  ************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
			 }else {
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");

			 }
		}else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	return model;
	
}

@RequestMapping(value="/AssignUmpire/profile/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView assignUmpirepublic(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		
		if(session != null && session.getAttribute("USRID") != null){
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("AssignUmpireprofile");
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));	
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);
			}
				
			}
		
		 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = GsonConverters.getGsonObject().fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
				
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
				
				}
			}
			
			    hubReq = new HubRequest(121);
				hubReq.setMsgType(121);
				ModelMap m1 = new ModelMap();
				m1.put("createdBy", boardId);
				hubReq.setRequestParam(m1);
				String umpireList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(umpireList !=  null){
					HubResponse  hubRes = gson.fromJson(umpireList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("boardUmpires", hubRes.getResults().getUmpireList().get(0).getUmpireNamesList());
						List<UmpireNameList> nameList = hubRes.getResults().getUmpireList().get(0).getUmpireNamesList();
						System.out.println("boardUmpires size :"+nameList.size());
					}
				}
			
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
				
			
		}else{
		 mav =new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	
	return mav;
	
}
@RequestMapping(value="/AssignScorer/profile/boardId/{boardId}", method=RequestMethod.GET)
public ModelAndView assignScorerProfile(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		
		if(session != null && session.getAttribute("USRID") != null){
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("AssignScorerProfile");
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));	
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);
				
			}
		 }
		 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
				}
			}
			
			
			// Commented for code optimization
			
			/*
			    hubReq = new HubRequest(125);
				hubReq.setMsgType(125);
				ModelMap m1 = new ModelMap();
				hubReq.setRequestParam(m1);
				String scorerList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(scorerList !=  null){
					HubResponse  hubRes = gson.fromJson(scorerList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("scorersList", hubRes.getResults().getScorerList().get(0).getScorerNamesList());
						List<ScorerNameList> nameList = hubRes.getResults().getScorerList().get(0).getScorerNamesList();
						System.out.println("scorerList size :"+nameList.size());
					}
				}*/
			
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
			
		}else{
		ModelAndView model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	
	return mav;
	
}

@RequestMapping(value="/buddy/{buddyName}/{buddyId}/board/{bid}",method=RequestMethod.GET)
public ModelAndView getBuddyboardPublicProfile(HttpServletRequest request,@PathVariable String buddyId, @PathVariable String bid) throws CSException
{
	ModelAndView model=null;
	 HttpSession session = request.getSession(true);
	 if(session.getAttribute("USRID")!=null)
	 {
		 UUID userid=(UUID) session.getAttribute("USRID");
		 System.out.println("session userid : "+userid);
		 System.out.println("required userid : "+buddyId);
		 
		 System.out.println("board to buddy profile");

		 gsonobj=GsonConverters.getGsonObject();		
		 hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);			
			 ModelMap modelMap=new ModelMap();
			 modelMap.put("userId",buddyId);
			 modelMap.put("active", 0);
			 modelMap.put("isYourBuddy", false);
			 hubReq.setRequestParam(modelMap);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
			 
			  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
			  
			 if(profile!= null &&  profile.getResults()!=null)
			 {
				 
				 
				if(profile.getResults().getItemsFound()!=null)
				{
				//	BuddyPublicFirstName
					
					session.setAttribute("BuddyPublicFirstName", profile.getResults().getItemsFound()[0].getFirstName());
					session.setAttribute("BuddyPublicLastName", profile.getResults().getItemsFound()[0].getLastName());
					session.setAttribute("BuddyPublicIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
					session.setAttribute("BuddyPublicUserId", profile.getResults().getItemsFound()[0].getUserId());
					session.setAttribute("BuddyPublicFanCount", profile.getResults().getItemsFound()[0].getUserFanCount());
					System.out.println("buddy fan count : "+profile.getResults().getItemsFound()[0].getUserFanCount());
						model=new ModelAndView("buddyboardPublicProfile");	
						
						
						 hubReq=new HubRequest(189);
						 hubReq.setMsgType(189);
						
						 Feeds feed= new Feeds();
						 feed.setStartNode("0");
						 feed.setEndNode("100");
						 feed.setUserId(buddyId.toString());
						 feed.setFeedHitUserId(userid.toString());
						 /*
						   
						   hubReq.setMsgType(189);						
						 Feeds feed= new Feeds();
						 feed.setStartNode("0");
						 feed.setEndNode("100");
						 feed.setUserId(buddyId.toString());
						 feed.setFeedHitUserId(userid.toString());
						 feed.setPublicProfileUserId(userid.toString());
						 
						  * */
						 hubReq.setRequestParam(feed);
						 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
						 
						 HubResponse resp= GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
						 model.addObject("FeedsList", resp.getResults().getFeedResponse().getFeedList());
						 
					 
						 
						 hubReq= new HubRequest();
						 hubReq.setMsgType(74);
						 ModelMap map2=new ModelMap();
						 map2.put("inviteeId",buddyId);
						 map2.put("invitorId", userid);						
						 hubReq.setRequestParam(map2);
						 String buddyDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean friend=false;
						 if(buddyDetails!=null)
						 {
							 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(buddyDetails, HubResponse.class);
							 if(buddyResponse!=null)
							 {
								 if(buddyResponse.getRequestStatus()!=null && buddyResponse.getRequestStatus().endsWith("4"))
								 {
									 friend=true;
								 }
							 }
							 
						 }
						// friend=true;
						
						 session.setAttribute("BuddyFriend", friend);
						 
						 hubReq= new HubRequest();
						 hubReq.setMsgType(75);
						 ModelMap map3=new ModelMap();
						 
						 /*
						  
						  messageType=75
						  parameters 
						  
						   1) userId= public profile userid
						   2) buddyId = who login 
						  
						  * */
						 map3.put("userId",buddyId);
						 map3.put("buddyId", userid);						
						 hubReq.setRequestParam(map3);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 System.out.println("buddyFanResponse.getRequestStatus() --> "+buddyFanResponse.getRequestStatus());
								 if(buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
					
						 System.out.println("fan request : "+buddyFan);
						 session.setAttribute("BuddyFanReq", buddyFan);
						 
						 
						 hubReq=new HubRequest();
						 hubReq.setMsgType(77);
						 BoardSearchRequest searchReq= new BoardSearchRequest();
						 String userlocation=(String) session.getAttribute("USRLocation");

						 System.out.println("userlocation"+userlocation);
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						 }
						
						 
						 searchReq.setStartNode("0");
						 searchReq.setEndNode("4");
						 searchReq.setCategory("Matches");
						 hubReq.setRequestParam(searchReq);
					    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
						
						 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
						 {
							 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
						 }
						 
						 
						 hubReq=new HubRequest();
						 hubReq.setMsgType(22);
						 //session.setAttribute("USRLocation", userProfile.getLatLang());
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 }
						
						 searchReq.setStartNode("0");
						 searchReq.setEndNode("4");
						 searchReq.setCategory("League");
						 hubReq.setRequestParam(searchReq);
					    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
						
						 if(strsearchResponse.getResults().getSearchResponse()!=null)
						 {
							 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
						 }
						 
						 searchReq.setCategory("Team");						
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						 }
						 hubReq.setRequestParam(searchReq);
						 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
						 
						 if(strTeamResponse.getResults().getSearchResponse()!=null)
						 {
							 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
						 }
						 
						 hubReq.setMsgType(23);
						 searchReq.setCategory("");
						 //searchReq.setLatlang("17.3700,78.4800");
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						 }
						 hubReq.setRequestParam(searchReq);
						 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
						 if(buddyResponse.getResults().getSearchResponse()!=null)
						 {
							 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
							 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
						 }
						 
						 hubReq.setMsgType(79);
						 searchReq.setCategory("Merchants");
						 //searchReq.setLatlang("17.3700,78.4800");
						 if(userlocation!=null)
						 {
							if(userlocation.length()>3)
							{
								 searchReq.setLatlang(userlocation);
							}else{
								 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
							}
						 }else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						 }
						 hubReq.setRequestParam(searchReq);
						 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
						 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
						 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
						 {
							 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
							 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
						 }
						
						//*************************** Getting Board info  ***************************************
						 HubRequest hubReq1=new HubRequest();
						 hubReq1.setMsgType(40);
						 ModelMap boardmap=new ModelMap();			
						 boardmap.put("userId", buddyId);			 
						 boardmap.put("boardId", bid);
						 hubReq1.setRequestParam(boardmap);
						 String viewBoardDetails=cricketSocialRestTemplateService.userRegistration(hubReq1);					
						 if(viewBoardDetails!=null){
							 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(viewBoardDetails, HubResponse.class);
							if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
								 model.addObject("ViewBoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));								 
								
							}
						 }
						 
						
						 hubReq= new HubRequest();
						 hubReq.setMsgType(41);
						 ModelMap map=new ModelMap();
						 map.put("userId", userid);
						 map.put("startNode", 0);
						 map.put("endNode", 200);
						 
						 System.out.println("view board if;----> "+bid);
						 boolean boardToBuddynew=false;
						 HubResponse checkBoardFanToBoard= csRestTemplateService.checkBoadFanToBuddy(buddyId, bid);
						 if(buddyResponse!=null)
						 {
							 if(checkBoardFanToBoard.getRequestStatus()!=null && checkBoardFanToBoard.getRequestStatus().endsWith("4"))
							 {
								 boardToBuddynew=true;
							 }
						 }
						 model.addObject("BoardFanToBuddy", boardToBuddynew);
						 model.addObject("BoardFanId", bid);
						 
						 
						  hubReq.setRequestParam(map);
							 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
							 GsonBuilder builder = new GsonBuilder();
							 Gson gson = builder.create();
							 if(strBoardList!=null)
							 {
								 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
								 if(hubResponse!=null && hubResponse.getResults()!=null)
								 {
									 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
								 }else{
									 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
								 }
							 }else{
								 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
							 }
						
					 
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				} 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
	 }else{
		 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

	 }
	 return model;
}

@RequestMapping(value="/{boardName}/board/{boardID}/byBoard/{vid}", method=RequestMethod.GET)
public ModelAndView boardPublicProfileByboard(HttpServletRequest request, @PathVariable String boardName, @PathVariable String boardID, @PathVariable String vid)
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	final String context = request.getContextPath();
	List<Object> upcommingObject=new ArrayList<Object>();
	
	try{
		if(session!=null && session.getAttribute("USRID")!=null)
		{

			UUID userId=(UUID) session.getAttribute("USRID");
			
			 hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", boardID);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
				{
					// model= new ModelAndView("BoardPublicProfilebyboard");		
					 
					 
					 if(hubResponse.getResults().getBoardStatusDetail().get(0).getCategory().equalsIgnoreCase("Team"))
						{
						 model= new ModelAndView("BoardPublicProfilebyboard");
							System.out.println("Inside team  Board");
						}else{
							model=new ModelAndView("BoardLandingpublic");
							System.out.println("Inside League  Board");
							}
					 
					 MenuList menuList= Util.leaugeMenuList(hubResponse.getResults().getBoardStatusDetail().get(0), userId+"", context);						
					 model.addObject("LeaugeMenuList", menuList);
					 
					 //Split view and entry menu
					      List<MenuURL> umpireList=menuList.getUmpireList();
						  List<MenuURL> groundList=menuList.getGroundList();
						  List<MenuURL> scheduleList=menuList.getScheduleList();
						  List<String> entrymenu=new ArrayList<String>();
						  List<String> Viewmenu=new ArrayList<String>();
						  if(umpireList.size() >= 1)
						  {
							  for(int i=0;i<umpireList.size();i++)
							  {
								  MenuURL menu=umpireList.get(i);
								  System.out.println("umpire :"+menu.getURL());
								  int index=menu.getURL().indexOf("Create Umpire");
								  if(index == -1)
								  {
									  Viewmenu.add(menu.getURL()); 
								  }else
								  {
									  entrymenu.add(menu.getURL()); 
								  }
							  }
							  
						  }
						  if(groundList.size() >= 1)
						  {
							  for(int i=0;i<groundList.size();i++)
							  {
								  MenuURL menu=groundList.get(i);
								  System.out.println("groundList :"+menu.getURL());
								  int index=menu.getURL().indexOf("Create Ground");
								  if(index == -1)
								  {
									  Viewmenu.add(menu.getURL()); 
								  }else
								  {
									  entrymenu.add(menu.getURL()); 
								  }
							  }
						  }
						  if(scheduleList.size() >= 1)
						  {
							  for(int i=0;i<scheduleList.size();i++)
							  {
								  MenuURL menu=scheduleList.get(i);
								  System.out.println("scheduleList :"+menu.getURL()); 
								  int index=menu.getURL().indexOf("Schedule List");
								  int index1=menu.getURL().indexOf("Schedule & Scores");
								  if(index != -1 || index1 != -1)
								  {
									  Viewmenu.add(menu.getURL()); 
								  }else
								  {
									  entrymenu.add(menu.getURL()); 
								  }
							  }
						  }
					 
					 
					 
					 
					 model.addObject("Viewmenu", Viewmenu);
					 model.addObject("entrymenu", entrymenu);
					 
					 
					 
					//*************************************************  Upcomming details  **********************//
					 
					 
					 hubReq =new HubRequest();
					 hubReq.setMsgType(133);
					 ModelMap map5=new ModelMap();
					 map5.put("boardId", boardID);
					 map5.put("previousNextFlag","current");
					 map5.put("endNode", 10);
					 hubReq.setRequestParam(map5);

					 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					
					 if(strGameScheduleList != null){
						 HubResponse hubResponse1 = gson.fromJson(strGameScheduleList, HubResponse.class);
						 if(hubResponse1 != null && hubResponse1.getResults() != null){
							 
							 if(hubResponse1.getResults().getGameSchedule().getUpComingMatchesList() !=null || hubResponse1.getResults().getGameSchedule().getInprogressMatchesList() != null)
							 {
							 upcommingObject.addAll(hubResponse1.getResults().getGameSchedule().getUpComingMatchesList());
							 upcommingObject.addAll(hubResponse1.getResults().getGameSchedule().getInprogressMatchesList());
							 
							 Collections.sort(upcommingObject, Collections.reverseOrder(new UpcommingComprator()));
							 
							 System.out.println("The Upcomming object list size :"+upcommingObject.size());
							 
							 
							/* model.addObject("upcomingMatchesList", hubResponse1.getResults().getGameSchedule().getUpComingMatchesList());*/
							 model.addObject("upcomingMatchesList",upcommingObject);
							 }
						 }else{
							System.out.println("null condition"); 
						 }
					 }
					 
 //Completed phone
					 
					 
					 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					 Date date = new Date();
					 
					 long DAY_IN_MS = 1000 * 60 * 60 * 24;
					 System.out.println(new Date(System.currentTimeMillis() - (7 * DAY_IN_MS)));
					 
					 System.out.println(dateFormat.format(date));
					 
					 hubReq =new HubRequest();
					 hubReq.setMsgType(133);
					 ModelMap map8=new ModelMap();
					 map8.put("boardId", boardID);
					 map8.put("toDateString",dateFormat.format(date));
					 map8.put("fromDateString",dateFormat.format(new Date(System.currentTimeMillis() - (7 * DAY_IN_MS))));
					 map8.put("endNode", 100);
					 hubReq.setRequestParam(map8);

					 String strGameScheduleList1 = cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					
					 if(strGameScheduleList1 != null){
						 HubResponse hubResponse2 = gson.fromJson(strGameScheduleList1, HubResponse.class);
						 if(hubResponse2 != null && hubResponse2.getResults() != null){
							 model.addObject("completedMatchesList", hubResponse2.getResults().getGameSchedule().getCompletedMatchesList());
							 
						 }else{
							System.out.println("null condition"); 
						 }
					 }
					 
					 
// TopBowler TopBatsman details
					 
					 hubReq =new HubRequest();
					 hubReq.setMsgType(265);
					 ModelMap map6=new ModelMap();
					 map6.put("boardId", boardID);
					 map6.put("startNode",0);
					 map6.put("endNode", 500);
					 hubReq.setRequestParam(map6);

					 String topBatsmanList = cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					
					 if(topBatsmanList != null){
						 HubResponse hubResponse6 = gson.fromJson(topBatsmanList, HubResponse.class);
						 if(hubResponse6 != null && hubResponse6.getResults() != null){

							 model.addObject("StarBatsman", hubResponse6.getResults().getStarBatsmen());
							 
						 }else{
							System.out.println("null condition"); 
						 }
					 }
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(264);
					 ModelMap map7=new ModelMap();
					 map7.put("boardId", boardID);
					 map7.put("startNode", 0);
					 map7.put("endNode", 500);
					 hubReq.setRequestParam(map7);
					 
					 String TopBowlerList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
					 if(TopBowlerList !=null)
					 {
						 HubResponse hubResponse7 = gson.fromJson(TopBowlerList, HubResponse.class);
						 if(hubResponse7 != null && hubResponse7.getResults() != null){

							 model.addObject("StarBowler", hubResponse7.getResults().getStarBowlers());
						 }else{
							System.out.println("null condition"); 
						 }
						 
					 }
					 
					 
					 
					 
					 
					 
					 
					 model.addObject("BoradPublicInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 model.addObject("LeaguManagement","No");
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(40);
					 ModelMap map1=new ModelMap();			
					 map1.put("userId", userId);			 
					 map1.put("boardId", boardID);
					 hubReq.setRequestParam(map);
					 String strBoarddetail1=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail1!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
						{
											
							 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
							 String owner=hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy();
							 if(owner.equalsIgnoreCase(userId.toString()) || Util.checkisCoOwner(userId.toString(), hubResponse1.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList())){
								 model=new ModelAndView("redirect:/board?bid="+boardID);
								 System.out.println("redirect:board?bid="+boardID);
							 }else{
								 System.out.println("not equal");
							 }
							 
						}
					 }
					 
					//*************************** Getting Board info  ***************************************
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(40);
					 ModelMap boardmap=new ModelMap();			
					 boardmap.put("userId", userId);			 
					 boardmap.put("boardId", vid);
					 hubReq1.setRequestParam(boardmap);
					 String viewBoardDetails=cricketSocialRestTemplateService.userRegistration(hubReq1);					
					 if(viewBoardDetails!=null){
						 HubResponse hubResponse1= gson.fromJson(viewBoardDetails, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
							 model.addObject("ViewBoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));								 
							
						}
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(42);
					 ModelMap map2=new ModelMap();
					 map2.put("boardId", boardID);
					 map2.put("startNode", 0);
					 map2.put("endNode", 10);
					 hubReq.setRequestParam(map2);
					 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
					 if(strBoardFeedList!=null )
					 {
						 HubResponse feedlist= gson.fromJson(strBoardFeedList, HubResponse.class);
						 
						 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
						 {
							 //FeedsList
							model.addObject("FeedsList", feedlist.getResults().getBoardFeedResponse().getFeedList());
						 }
					 }else{
						 System.out.println("Board feeds not excuted...........");
					 }
					 
					//*******************************  for getting user boards   ******************************
						
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					
					 hubReq= new HubRequest();
					 hubReq.setMsgType(76);
					 ModelMap map4=new ModelMap();
					 map4.put("boardId",boardID);
					 map4.put("userId", userId);						
					 hubReq.setRequestParam(map4);
					 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
					 boolean buddyFan=false;
					 if(buddyFandeatil!=null)
					 {
						 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
						 if(buddyFanResponse!=null)
						 {
							 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
							 {
								 buddyFan=true;
							 }
						 }
						 
					 }
					// buddyFan=true;
					 System.out.println("board : "+buddyFan);
					 model.addObject("BoardFanReq", buddyFan);
					 
					 //*******************************************************   Around you details	 *************************************************
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(77);
					 BoardSearchRequest searchReq= new BoardSearchRequest();
					 String userlocation=(String) session.getAttribute("USRLocation");

					 System.out.println("userlocation"+userlocation);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					 }
					
					 
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("Matches");
					 hubReq.setRequestParam(searchReq);
				    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
					
					 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
					 {
						 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(22);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
							 System.out.println("user location setttt");
						}else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							 System.out.println("user not getted ------------- default 1");
						}
					 }else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 2");
					 }
					
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("League");
					 hubReq.setRequestParam(searchReq);
				    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strboardlist);
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
					 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
					
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 searchReq.setCategory("Team");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strTeamlist);
					 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
					 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
					 
					 if(strTeamResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 hubReq.setMsgType(23);
					 searchReq.setCategory("");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strbuddyresponse);
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
					 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
					 if(buddyResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
					 }
					 
					 request.setAttribute("BoardId", boardID);
					 hubReq.setMsgType(79);
					 searchReq.setCategory("Merchants");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
					 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					
					 /*HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(buddyDetails, HubResponse.class);
					 if(buddyResponse!=null)
					 {
						 if(buddyResponse.getRequestStatus()!=null && buddyResponse.getRequestStatus().endsWith("4"))
						 {
							 friend=true;
						 }
					 }*/
					 System.out.println("view board if;----> "+vid);
					 boolean boardToBoard=false;
					 HubResponse checkBoardFanToBoard= csRestTemplateService.checkBoadFanToBaoad(boardID, vid);
					 if(buddyResponse!=null)
					 {
						 if(checkBoardFanToBoard.getRequestStatus()!=null && checkBoardFanToBoard.getRequestStatus().endsWith("4"))
						 {
							 boardToBoard=true;
						 }
					 }
					 model.addObject("BoardFanToBoard", boardToBoard);
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
				 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			
		
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/{boardName}/boardPitch/{boardID}/byBoard/{vid}", method=RequestMethod.GET)
public ModelAndView boardPublicProfileByboardPitch(HttpServletRequest request, @PathVariable String boardName, @PathVariable String boardID, @PathVariable String vid)
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;

	
	try{
		if(session!=null && session.getAttribute("USRID")!=null)
		{

			UUID userId=(UUID) session.getAttribute("USRID");
			
			 hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", boardID);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
				{
					 model= new ModelAndView("BoardPublicProfilebyboard");		
					 
					 model.addObject("BoradPublicInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 model.addObject("LeaguManagement","No");
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(40);
					 ModelMap map1=new ModelMap();			
					 map1.put("userId", userId);			 
					 map1.put("boardId", boardID);
					 hubReq.setRequestParam(map);
					 String strBoarddetail1=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail1!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
						{
											
							 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
							 String owner=hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy();
							 if(owner.equalsIgnoreCase(userId.toString()) || Util.checkisCoOwner(userId.toString(), hubResponse1.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList())){
								 model=new ModelAndView("redirect:/board?bid="+boardID);
								 System.out.println("redirect:board?bid="+boardID);
							 }else{
								 System.out.println("not equal");
							 }
							 
						}
					 }
					 
					//*************************** Getting Board info  ***************************************
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(40);
					 ModelMap boardmap=new ModelMap();			
					 boardmap.put("userId", userId);			 
					 boardmap.put("boardId", vid);
					 hubReq1.setRequestParam(boardmap);
					 String viewBoardDetails=cricketSocialRestTemplateService.userRegistration(hubReq1);					
					 if(viewBoardDetails!=null){
						 HubResponse hubResponse1= gson.fromJson(viewBoardDetails, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
							 model.addObject("ViewBoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));								 
							
						}
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(42);
					 ModelMap map2=new ModelMap();
					 map2.put("boardId", boardID);
					 map2.put("startNode", 0);
					 map2.put("endNode", 10);
					 hubReq.setRequestParam(map2);
					 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
					 if(strBoardFeedList!=null )
					 {
						 HubResponse feedlist= gson.fromJson(strBoardFeedList, HubResponse.class);
						 
						 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
						 {
							 //FeedsList
							model.addObject("FeedsList", feedlist.getResults().getBoardFeedResponse().getFeedList());
						 }
					 }else{
						 System.out.println("Board feeds not excuted...........");
					 }
					 
					//*******************************  for getting user boards   ******************************
						
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					
					 hubReq= new HubRequest();
					 hubReq.setMsgType(76);
					 ModelMap map4=new ModelMap();
					 map4.put("boardId",boardID);
					 map4.put("userId", userId);						
					 hubReq.setRequestParam(map4);
					 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
					 boolean buddyFan=false;
					 if(buddyFandeatil!=null)
					 {
						 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
						 if(buddyFanResponse!=null)
						 {
							 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
							 {
								 buddyFan=true;
							 }
						 }
						 
					 }
					// buddyFan=true;
					 System.out.println("board : "+buddyFan);
					 model.addObject("BoardFanReq", buddyFan);
					 
					 //*******************************************************   Around you details	 *************************************************
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(77);
					 BoardSearchRequest searchReq= new BoardSearchRequest();
					 String userlocation=(String) session.getAttribute("USRLocation");

					 System.out.println("userlocation"+userlocation);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					 }
					
					 
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("Matches");
					 hubReq.setRequestParam(searchReq);
				    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
					
					 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
					 {
						 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(22);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
							 System.out.println("user location setttt");
						}else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							 System.out.println("user not getted ------------- default 1");
						}
					 }else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 2");
					 }
					
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("League");
					 hubReq.setRequestParam(searchReq);
				    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strboardlist);
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
					 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
					
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 searchReq.setCategory("Team");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strTeamlist);
					 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
					 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
					 
					 if(strTeamResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 hubReq.setMsgType(23);
					 searchReq.setCategory("");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strbuddyresponse);
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
					 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
					 if(buddyResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
					 }
					 
					 request.setAttribute("BoardId", boardID);
					 hubReq.setMsgType(79);
					 searchReq.setCategory("Merchants");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
					 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					
					 /*HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(buddyDetails, HubResponse.class);
					 if(buddyResponse!=null)
					 {
						 if(buddyResponse.getRequestStatus()!=null && buddyResponse.getRequestStatus().endsWith("4"))
						 {
							 friend=true;
						 }
					 }*/
					 System.out.println("view board if;----> "+vid);
					 boolean boardToBoard=false;
					 HubResponse checkBoardFanToBoard= csRestTemplateService.checkBoadFanToBaoad(boardID, vid);
					 if(buddyResponse!=null)
					 {
						 if(checkBoardFanToBoard.getRequestStatus()!=null && checkBoardFanToBoard.getRequestStatus().endsWith("4"))
						 {
							 boardToBoard=true;
						 }
					 }
					 model.addObject("BoardFanToBoard", boardToBoard);
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
				 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			
		
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}
@RequestMapping(value="/{boardName}/boardPitchfromuser/{boardID}/byBoard/{vid}", method=RequestMethod.GET)
public ModelAndView boardPitchfromuser(HttpServletRequest request, @PathVariable String boardName, @PathVariable String boardID, @PathVariable String vid)
{
	
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	final String context = request.getContextPath();
	
	try{
		if(session!=null && session.getAttribute("USRID")!=null)
		{

			UUID userId=(UUID) session.getAttribute("USRID");
			
			hubReq=new HubRequest();
			 hubReq.setMsgType(40);
			 ModelMap map=new ModelMap();			
			 map.put("userId", userId);			 
			 map.put("boardId", boardID);
			 hubReq.setRequestParam(map);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse!=null && hubResponse.getResults().getBoardStatusDetail()!=null && hubResponse.getResults().getBoardStatusDetail().size()>0)
				{
					
					
					model= new ModelAndView("BoardPublicProfile");
					 
					 
					 model.addObject("BoradPublicInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 model.addObject("LeaguManagement","No");
					
					
					
					
					 model.addObject("BoradPublicInfo", hubResponse.getResults().getBoardStatusDetail().get(0));
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(40);
					 ModelMap map1=new ModelMap();			
					 map1.put("userId", userId);			 
					 map1.put("boardId", boardID);
					 hubReq.setRequestParam(map);
					 String strBoarddetail1=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail1!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
						{
											
							 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
							 String owner=hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy();
							 System.out.println("output ---- > "+Util.checkisCoOwner(userId.toString(),hubResponse1.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList()));
							 if(owner.equalsIgnoreCase(userId.toString()) || Util.checkisCoOwner(userId.toString(),hubResponse1.getResults().getBoardStatusDetail().get(0).getBoardCoOwnerList())){
								 model=new ModelAndView("redirect:/board?bid="+boardID);
								 System.out.println("redirect:board?bid="+boardID);
							 }else{
								 System.out.println("not equal");
							 }
						}
					 }
					 hubReq=new HubRequest();
					 hubReq.setMsgType(42);
					 ModelMap map2=new ModelMap();
					 map2.put("boardId", boardID);
					 map2.put("startNode", 0);
					 map2.put("endNode", 10);
					 hubReq.setRequestParam(map2);
					 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
					 if(strBoardFeedList!=null )
					 {
						 HubResponse feedlist= gson.fromJson(strBoardFeedList, HubResponse.class);
						 
						 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
						 {
							 //FeedsList
							model.addObject("FeedsList", feedlist.getResults().getBoardFeedResponse().getFeedList());
						 }
					 }else{
						 System.out.println("Board feeds not excuted...........");
					 }
					 
					//*******************************  for getting user boards   ******************************
						
					 hubReq=new HubRequest(41);
					 hubReq.setMsgType(41);
					 ModelMap map3=new ModelMap();
					 map3.put("userId", userId);
					 map3.put("startNode", 0);
					 map3.put("endNode", 200);
					  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= gson.fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
					 }
					 
					
					 hubReq= new HubRequest();
					 hubReq.setMsgType(76);
					 ModelMap map4=new ModelMap();
					 map4.put("boardId",boardID);
					 map4.put("userId", userId);						
					 hubReq.setRequestParam(map4);
					 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
					 boolean buddyFan=false;
					 if(buddyFandeatil!=null)
					 {
						 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
						 if(buddyFanResponse!=null)
						 {
							 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
							 {
								 buddyFan=true;
							 }
						 }
						 
					 }
					// buddyFan=true;
					 System.out.println("board : "+buddyFan);
					 model.addObject("BoardFanReq", buddyFan);
					 
					 //*******************************************************   Around you details	 *************************************************
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(77);
					 BoardSearchRequest searchReq= new BoardSearchRequest();
					 String userlocation=(String) session.getAttribute("USRLocation");

					 System.out.println("userlocation"+userlocation);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
					 }
					
					 
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("Matches");
					 hubReq.setRequestParam(searchReq);
				    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
					
					 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
					 {
						 model.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
					 }
					 
					 
					 hubReq=new HubRequest();
					 hubReq.setMsgType(22);
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
							 System.out.println("user location setttt");
						}else{
							 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
							 System.out.println("user not getted ------------- default 1");
						}
					 }else{
						 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
						 System.out.println("user not getted ------------- default 2");
					 }
					
					 searchReq.setStartNode("0");
					 searchReq.setEndNode("4");
					 searchReq.setCategory("League");
					 hubReq.setRequestParam(searchReq);
				    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strboardlist);
					 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
					 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
					
					 if(strsearchResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 searchReq.setCategory("Team");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strTeamlist);
					 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
					 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
					 
					 if(strTeamResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
						 model.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					 
					 hubReq.setMsgType(23);
					 searchReq.setCategory("");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 System.out.println("board result : "+strbuddyresponse);
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
					 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
					 if(buddyResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
					 }
					 
					 request.setAttribute("BoardId", boardID);
					 hubReq.setMsgType(79);
					 searchReq.setCategory("Merchants");
					 //searchReq.setLatlang("17.3700,78.4800");
					 if(userlocation!=null)
					 {
						if(userlocation.length()>3)
						{
							 searchReq.setLatlang(userlocation);
						}else{
							 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
						}
					 }else{
						 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
					 }
					 hubReq.setRequestParam(searchReq);
					 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
					 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
					 {
						 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
						 model.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getBoardProfileList());
					 }
					
					 
				}else{
					 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
				 
				 
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			
		
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;

	
	}


@RequestMapping(value="/userEvent/date/{date}", method=RequestMethod.GET)
public ModelAndView userEventDate(HttpServletRequest request, @PathVariable String date)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			//model= new ModelAndView("UserEventuList2");
			model= new ModelAndView("UserEventuListNew");
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			 
			 /*{
				 "msgType":123,
				 "requestParam": {

				 }
				 }
				 */
			 
			 hubReq=new HubRequest();
			 //hubReq.setMsgType(123);
			 hubReq.setMsgType(150);
			 ModelMap eventmap=new ModelMap();
			// eventmap.put("createdBy", "30bbcfeb-0043-48fd-8632-ecde0e28205f");
			// eventmap.put("createdBy", userId);
			 eventmap.put("userId", userId);
			 eventmap.put("loggedUserId", userId);
			 eventmap.put("matchDate", date);
			 //	eventmap.put("userId", "833fbe1c-a83c-4870-a2e4-7613977a9008");
			  hubReq.setRequestParam(eventmap);
			 String streventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(streventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getEventListing()!=null)
				 {
					 //model.addObject("EventList", hubResponse2.getResults().getEventList());
					 model.addObject("EventList", hubResponse2.getResults().getEventListing().get(0));
					 System.out.println("3333333333333333"+hubResponse2.getResults().getEventListing().get(0).getUpcomingeventObj());
				 }
				 
			 }
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}

@RequestMapping(value="/userEvent/buddy/{uname}/{uid}", method=RequestMethod.GET)
public ModelAndView userEventDatepublic(HttpServletRequest request, @PathVariable String uname, @PathVariable String uid)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
			//model= new ModelAndView("UserEventuList2");
			//model= new ModelAndView("UserEventuListPublic");
			model= new ModelAndView("UserEventListpublic2");
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			/* hubReq=new HubRequest();
			 hubReq.setMsgType(150);
			 ModelMap eventmap=new ModelMap();
			 eventmap.put("userId", uid);
			 eventmap.put("loggedUserId", userId);
			  hubReq.setRequestParam(eventmap);
			 String streventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(streventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getEventListing()!=null)
				 {
					 model.addObject("EventList", hubResponse2.getResults().getEventListing().get(0));
					 System.out.println("3333333333333333"+hubResponse2.getResults().getEventListing().get(0).getUpcomingeventObj());
				 }
				 
			 }
			 */
			 
			         ModelMap neweventmap=new ModelMap();				
					 neweventmap.put("userId", uid);
					 neweventmap.put("loggedUserId", userId);
					 neweventmap.put("startNode", 0);
					 neweventmap.put("endNode", 20);
					 hubReq= new HubRequest();
					 hubReq.setMsgType(222);
					 hubReq.setRequestParam(neweventmap);
					 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
					 if(strneweventlist!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
						 {
							 model.addObject("MyEvents", hubResponse2.getResults().getCreatedEventList());
						 }
					 }
					 		 
			 
			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}


@RequestMapping(value="/rosterInfomation", method=RequestMethod.GET)
public @ResponseBody ModelAndView rosterInfomation(HttpServletRequest request,@RequestParam String rosterId,@RequestParam String bId) throws CSException
{
	HttpSession session=request.getSession(true);
	ModelAndView model=null;
	UUID userId=(UUID) session.getAttribute("USRID");
	if(session != null && userId!=null){
		
			 hubReq=new HubRequest();
			 //hubReq.setMsgType(48);
			 hubReq.setMsgType(188);// roster details based uisng cassandra
			 ModelMap modelMap=new ModelMap();
			 modelMap.put("rosterId",rosterId );
			 modelMap.put("startNode",0 );
			 modelMap.put("endNode",100 );
			 
			 hubReq.setRequestParam(modelMap);

			 String roasterResponseByIdString=cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseByIdString, HubResponse.class);
			
			 if(hubResponse !=null){
				 
				 model=new ModelAndView("roaster");
				 ResponseType results1=hubResponse.getResults();
				 if(results1 != null){
					RoasterResponseById roasterResponseById=results1.getRosterInfo();
					request.setAttribute("RoasterResponseById", roasterResponseById);
					model.addObject("RoasterMemberList", roasterResponseById);
				 }
				 
				 
				 
				// Print details
				 
                 hubReq=new HubRequest();
				 
				 hubReq.setMsgType(267);
				 ModelMap rosterMapprint=new ModelMap();
				 rosterMapprint.put("rosterId",rosterId);
				 
				 hubReq.setRequestParam(rosterMapprint);

				 String roasterResponseprint=cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(roasterResponseprint!=null){
					 HubResponse rosterhubResponse= GsonConverters.getGsonObject().fromJson(roasterResponseprint, HubResponse.class);
						
					 if(rosterhubResponse !=null && rosterhubResponse.getResults()!=null && rosterhubResponse.getResults().getRosterPrintDetails()!=null){
						 
							Roaster rosterprint=rosterhubResponse.getResults().getRosterPrintDetails();
							
							model.addObject("Rosterprint", rosterprint);
							model.addObject("RosterCreatedDate", rosterprint.getRosterCreatedDate());
							
							Date date=new Date();
							SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
							model.addObject("PrintDate", sdf.format(date));
					 }
						
				 }
				 
				 
				 
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(40);
				 ModelMap map=new ModelMap();			
				 map.put("userId", userId);			 
				 map.put("boardId",bId );
				 hubReq.setRequestParam(map);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					}
				 }	
				
				 hubReq=new HubRequest();
				// hubReq.setMsgType(63);
				 hubReq.setMsgType(187);// roster list based on boardid using uisng cassandra
				 ModelMap modelMap1=new ModelMap();
				 modelMap1.put("boardId", bId);
				 hubReq.setRequestParam(modelMap1);
		
				 String rosterListRsponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse resp= GsonConverters.getGsonObject().fromJson(rosterListRsponse, HubResponse.class);
				 
				 
				 if(resp !=null && resp.getRequestStatus().equals("0")){
					 
					 ResponseType results=resp.getResults();
					 
					 System.out.println("results"+results.getRosterList().size());
					 
					 if(results != null ){
						 
						 List<Roaster> roasters=results.getRosterList();
						 request.setAttribute("Roasters", roasters);
						 
					 }
				 
				 }
				 hubReq=new HubRequest();
				 hubReq.setMsgType(99);
				 ModelMap modelMap5=new ModelMap();
				 //modelMap5.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");		
				 modelMap5.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap5);
				 String bowler=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse bowlingPerformance= GsonConverters.getGsonObject().fromJson(bowler, HubResponse.class);
				 if(bowlingPerformance!=null && bowlingPerformance.getResults()!=null)
				 {
					 model.addObject("BowlingPerformance", bowlingPerformance.getResults().getBowlingPerformance());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(98);
				 ModelMap modelMap6=new ModelMap();
				 //modelMap6.put("rosterId", "44885d97-f349-4c93-8c96-3924035d267f");
				 modelMap6.put("rosterId", rosterId);
				 hubReq.setRequestParam(modelMap6);
				 String batting=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse battingPerformance= GsonConverters.getGsonObject().fromJson(batting, HubResponse.class);
				 if(battingPerformance!=null && battingPerformance.getResults()!=null)
				 {
					 model.addObject("BattingPerformance", battingPerformance.getResults().getBattingPerformance());
				 }
				 
				 
				 hubReq=new HubRequest();
					hubReq.setMsgType(97);
					 ModelMap map2=new ModelMap();			
					 map2.put("rosterId", rosterId);			 
					 map2.put("boardId", bId);
					 map2.put("attachmentType", "video");
					 hubReq.setRequestParam(map2);
					 String strBoarddetail2=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoarddetail2!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoarddetail2, HubResponse.class);
						if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
						{
							model.addObject("RoasterVideosList", hubResponse2.getResults().getRosterAttachment());
							System.out.println("RoasterVideosList------>hubResponse2.getResults().getRosterAttachment()----> "+hubResponse2.getResults().getRosterAttachment().size());
							
						}
					 }	
					 
					 hubReq=new HubRequest();
						hubReq.setMsgType(96);
						 ModelMap map4=new ModelMap();			
						 map4.put("rosterId", rosterId);			 
						 map4.put("boardId", bId);
						 map4.put("attachmentType", "image");
						 hubReq.setRequestParam(map4);
						 String rosterPotosList=cricketSocialRestTemplateService.userRegistration(hubReq);
						
						 if(strBoarddetail2!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(rosterPotosList, HubResponse.class);
							if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getRosterAttachment()!=null )
							{
								model.addObject("RoasterImageList", hubResponse2.getResults().getRosterAttachment());
								System.out.println("RoasterImageList-----> hubResponse2.getResults().getRosterAttachment()---> "+hubResponse2.getResults().getRosterAttachment().size());
								
							}
						 }	
						 
						 ModelMap neweventmap=new ModelMap();
						 neweventmap.put("userId", bId);
						 neweventmap.put("loggedUserId", userId);
						 neweventmap.put("startNode", 0);
						 neweventmap.put("endNode", 20);
						 hubReq= new HubRequest();
						 hubReq.setMsgType(222);
						 hubReq.setRequestParam(neweventmap);
						 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
						 if(strneweventlist!=null)
						 {
							 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
							 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
							 {
								 model.addObject("UserUpComingEvent", hubResponse2.getResults().getCreatedEventList().getUpcomingCreatedEventList());
								 model.addObject("UserCompleteEvent", hubResponse2.getResults().getCreatedEventList().getCompletedCreatedEventList());	
							 }
						 }
				 
				 
			/*	 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap2=new ModelMap();
				 modelMap2.put("userId", userId);
				 modelMap2.put("statusId", "24");				
				 hubReq.setRequestParam(modelMap2);
				 String userEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventResponse= GsonConverters.getGsonObject().fromJson(userEvent, HubResponse.class);
				 if(eventResponse!=null && eventResponse.getResults()!=null)
				 {
				
					 model.addObject("UserUpComingEvent", eventResponse.getResults().getEventDetails());
				 }
				 
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap3=new ModelMap();
				 modelMap3.put("userId", userId);
				 modelMap3.put("statusId", "23");				
				 hubReq.setRequestParam(modelMap3);
				 String usercompleteEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse eventCompleteResponse= GsonConverters.getGsonObject().fromJson(usercompleteEvent, HubResponse.class);
				 if(eventCompleteResponse!=null && eventCompleteResponse.getResults()!=null)
				 {
					 model.addObject("UserCompleteEvent", eventCompleteResponse.getResults().getEventDetails());
				 }
				 */
				 hubReq=new HubRequest();
				 hubReq.setMsgType(70);
				 ModelMap modelMap4=new ModelMap();
				 modelMap4.put("userId", userId);
				 modelMap4.put("statusId", "22");				
				 hubReq.setRequestParam(modelMap4);
				 String usercancelEvent=cricketSocialRestTemplateService.userRegistration(hubReq);
				 HubResponse usercancelEventResponse= GsonConverters.getGsonObject().fromJson(usercancelEvent, HubResponse.class);
				 if(usercancelEventResponse!=null && usercancelEventResponse.getResults()!=null)
				 {
					 model.addObject("UserCancelEvent", usercancelEventResponse.getResults().getEventDetails());
				 }
				 
				 
				 
					//********************************************  Get board Details  ************************************************	  
				 hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
						 if(hubResponse2!=null && hubResponse2.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
						 }else{
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
					 }else{
						 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
				 
			 }else {
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service is not available due to some problems");

			 }
		}else{
			 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

		}
	return model;
	
}

/*@RequestMapping(value="", method=RequestMethod.POST)
{
	
}*/


@RequestMapping(value="/MyCricketBook", method=RequestMethod.GET)
public ModelAndView myCricketBook(HttpServletRequest request)throws CSException
{
	ModelAndView model=null;
	HttpSession session=request.getSession(true);		
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId = (UUID) session.getAttribute("USRID");			
		model= new ModelAndView("MyCricketBook");
			hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);		
			UserProfile userProfile= new UserProfile();
			userProfile.setUserId(userId);
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result ); 
			 LoginResponse profile = null;
			 if(result!=null)
			 {
				   profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
				  if(profile!=null && profile.getResults()!=null)
				  {
					  model.addObject("UserInfo", profile.getResults().getItemsFound()[0]);
				  }
			 }
			 
			
			 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
			 if(userProfile.getUserId()!=null)
			 {
				 String userIdString = userProfile.getUserId().toString();
				 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
				 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
				 playerInfo.setPlayer1(roldinfo);
			 }
			 model.addObject("SelectedPlayersInfo", playerInfo);
			 
	
		
			List<UserRole> userRole = profile.getResults().getItemsFound()[0].getUserRoleMap();
			
			hubReq=new HubRequest();
			hubReq.setMsgType(145);		
			ModelMap map = new ModelMap();
			map.put("uid", userId);
			map.put("startNode", 0);
			map.put("endNode", 10);
			hubReq.setRequestParam(map);
			String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
			if(playerMatches!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
				if(response!=null && response.getResults()!=null)
				{
					model.addObject("UserMatchInfo", response.getResults().getSearchResponse());
				}
			}
			
			
				
					hubReq= new HubRequest();
					hubReq.setMsgType(155);
					//hubReq.setMsgType(205);
					ModelMap battingmap = new ModelMap();
					battingmap.put("uid", userId);
					//battingmap.put("uid", "4f9bb907-b6ca-4b58-985c-9a82e14fc52f");
					
					battingmap.put("startNode", 0);
					battingmap.put("endNode", 25);
					hubReq.setRequestParam(battingmap);
					String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					if(strBattingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("battingPerformanceList", response.getResults().getUserBattingPerformanceList());
							model.addObject("strbattingPerformanceList", GsonConverters.getGsonObject().toJson(response.getResults().getUserBattingPerformanceList()));
							if(response.getResults().getUserBattingPerformanceList() != null){
								model.addObject("battingPerformanceListSize",response.getResults().getUserBattingPerformanceList().size());
								List<String> batlist=new ArrayList<String>();
							for(UserBattingPerformanceDTO k : response.getResults().getUserBattingPerformanceList())
							{
								batlist.add(k.getMatchId());
							}
								hubReq=new HubRequest();
								 hubReq.setMsgType(21);		
								 ModelMap map2=new ModelMap();			
								 map2.put("matchIdList", batlist);			 
								 hubReq.setRequestParam(map2);
								 String resultScore=cricketSocialRestTemplateService.userRegistration1(hubReq);
								 
								 if(resultScore!=null){
									 HubResponse response2 = GsonConverters.getGsonObject().fromJson(resultScore, HubResponse.class);
									 
									 if(response2!=null && response2.getResults()!=null){
										 
										 
										 model.addObject("BattingMatchesScoreList", response2.getResults().getScoreCardList());
									 }
								 }
							}else{
								model.addObject("battingPerformanceListSize",0);
							}
						}
					}
					
					
					
					hubReq= new HubRequest();
					hubReq.setMsgType(147);
				//	hubReq.setMsgType(206);
					ModelMap bowlingmap = new ModelMap();
					bowlingmap.put("uid", userId);
					bowlingmap.put("startNode", 0);
					bowlingmap.put("endNode", 15);
					hubReq.setRequestParam(bowlingmap);
					String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				
					if(strBowlingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("bowlingPerformanceList", response.getResults().getUserBowlingPerformanceList());
							if(response.getResults().getUserBowlingPerformanceList() != null){
								model.addObject("bowlingPerformanceListSize",response.getResults().getUserBowlingPerformanceList().size());
							}else{
								model.addObject("bowlingPerformanceListSize",0);
							}
						}
					}
					
					hubReq= new HubRequest();
					//hubReq.setMsgType(148);
					hubReq.setMsgType(207);
					ModelMap achievements = new ModelMap();
					achievements.put("uid", userId);
				//	achievements.put("startNode", 0);
				//	achievements.put("endNode", 10);
					hubReq.setRequestParam(achievements);
					String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strAchievementsResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("achievementsList", response.getResults().getUseronedaymatchsachivements());
							if(response.getResults().getUseronedaymatchsachivements() != null){
								model.addObject("achievementsListSize",response.getResults().getUseronedaymatchsachivements().size());
							}else{
								model.addObject("achievementsListSize",0);
							}
						}
					}
					
					
					hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("uid", userId);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							
						}
					}
					
					
					
				/*}else{
					model.addObject("battingPerformanceListSize",0);
					model.addObject("bowlingPerformanceListSize",0);
					model.addObject("achievementsListSize",0);
				}*/
				
			//}
			 
			 
			 
				
				
				
				
				hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
				
				
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;
}

@RequestMapping(value="/boardEvent/{bid}/date/{date}", method=RequestMethod.GET)
public ModelAndView boardEventByDate(HttpServletRequest request,@PathVariable String bid, @PathVariable String date)
{

	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			@SuppressWarnings("unused")
			final String context = request.getContextPath();
		//	model= new ModelAndView("UserEventuList2");
			model= new ModelAndView("boardEventList");
		//	model= new ModelAndView("boardEventPublic");
			//boardEventPublic.jsp
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }
				 
			 }
			 
			 /*{
				 "msgType":123,
				 "requestParam": {

				 }
				 }
				 */
			 
			 hubReq=new HubRequest();
			 //hubReq.setMsgType(123);
			 hubReq.setMsgType(150);
			 ModelMap eventmap=new ModelMap();
			// eventmap.put("createdBy", "30bbcfeb-0043-48fd-8632-ecde0e28205f");
			// eventmap.put("createdBy", userId);
			 eventmap.put("userId", bid);
			// eventmap.put("userId", "53281105-6a13-47c6-b7ea-e37aaf4ddd75");
			 eventmap.put("matchDate", date);
			  hubReq.setRequestParam(eventmap);
			 String streventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(streventlist!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(streventlist, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getEventListing()!=null)
				 {
					 //model.addObject("EventList", hubResponse2.getResults().getEventList());
					 model.addObject("EventList", hubResponse2.getResults().getEventListing().get(0));
					 System.out.println("3333333333333333"+hubResponse2.getResults().getEventListing().get(0).getUpcomingeventObj());
				 }
				 
			 }
			 
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", userId);			 
			 map11.put("boardId", bid);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));					 						
							
				}
			 }	

			 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}

@RequestMapping(value="/getMatchDetailsInfo", method=RequestMethod.POST)
public @ResponseBody List<ScoreCard>  getMatchDetailsInfo(@RequestBody MatchIdListInfo matchIdListInfo)
{
	List<ScoreCard> finalResponse=null;
	System.out.println("----------------------------------------------- input param------------------------------------------------ "+matchIdListInfo.getMatchIdList());
//List<String> myList = new ArrayList<String>(Arrays.asList(matchIdListInfo.getMatchIdList()));

	try{

		 hubReq=new HubRequest();
		 hubReq.setMsgType(21);		
		 ModelMap map=new ModelMap();			
		 map.put("matchIdList", matchIdListInfo.getMatchIdList());			 
		 hubReq.setRequestParam(matchIdListInfo);
		 String result=cricketSocialRestTemplateService.userRegistration1(hubReq);
		 
		 if(result!=null){
			 HubResponse response = GsonConverters.getGsonObject().fromJson(result, HubResponse.class);
			 
			 if(response!=null && response.getResults()!=null){
				 
				 finalResponse=response.getResults().getScoreCardList();
			 }
		 }
		 
	}catch(Exception e)
	{
		
	}
	return finalResponse;
}
@RequestMapping(value="/BuddyCricketBook/{buddyid}", method=RequestMethod.GET)
public ModelAndView buddyCricketBook(HttpServletRequest request, @PathVariable UUID buddyid)throws CSException
{
	ModelAndView model=null;
	HttpSession session=request.getSession(true);		
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId = (UUID) session.getAttribute("USRID");			
		model= new ModelAndView("MyCricketBookpublic");
			hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);		
			UserProfile userProfile= new UserProfile();
			//userProfile.setUserId(userId);
			 userProfile.setUserId(buddyid);			
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result ); 
			 LoginResponse profile = null;
			 if(result!=null)
			 {
				   profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
				  if(profile!=null && profile.getResults()!=null)
				  {
					  model.addObject("UserInfo", profile.getResults().getItemsFound()[0]);
				  }
			 }
			 
			
			 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
			 if(userProfile.getUserId()!=null)
			 {
				 String userIdString = userProfile.getUserId().toString();
				 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
				 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
				 playerInfo.setPlayer1(roldinfo);
			 }
			 model.addObject("SelectedPlayersInfo", playerInfo);
			 
	
		
			List<UserRole> userRole = profile.getResults().getItemsFound()[0].getUserRoleMap();
			
			hubReq=new HubRequest();
			hubReq.setMsgType(145);		
			ModelMap map = new ModelMap();
			//map.put("uid", userId);
			map.put("uid", buddyid);
			map.put("startNode", 0);
			map.put("endNode", 10);
			hubReq.setRequestParam(map);
			String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
			if(playerMatches!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
				if(response!=null && response.getResults()!=null)
				{
					model.addObject("UserMatchInfo", response.getResults().getSearchResponse());
				}
			}
			
			
				
					hubReq= new HubRequest();
					hubReq.setMsgType(155);
					//hubReq.setMsgType(205);
					ModelMap battingmap = new ModelMap();
					//battingmap.put("uid", userId);
					battingmap.put("uid", buddyid);
					//battingmap.put("uid", "4f9bb907-b6ca-4b58-985c-9a82e14fc52f");
					
					battingmap.put("startNode", 0);
					battingmap.put("endNode", 25);
					hubReq.setRequestParam(battingmap);
					String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					if(strBattingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("battingPerformanceList", response.getResults().getUserBattingPerformanceList());
							model.addObject("strbattingPerformanceList", GsonConverters.getGsonObject().toJson(response.getResults().getUserBattingPerformanceList()));
							if(response.getResults().getUserBattingPerformanceList() != null){
								model.addObject("battingPerformanceListSize",response.getResults().getUserBattingPerformanceList().size());
								List<String> batlist=new ArrayList<String>();
							for(UserBattingPerformanceDTO k : response.getResults().getUserBattingPerformanceList())
							{
								batlist.add(k.getMatchId());
							}
								hubReq=new HubRequest();
								 hubReq.setMsgType(21);		
								 ModelMap map2=new ModelMap();			
								 map2.put("matchIdList", batlist);			 
								 hubReq.setRequestParam(map2);
								 String resultScore=cricketSocialRestTemplateService.userRegistration1(hubReq);
								 
								 if(resultScore!=null){
									 HubResponse response2 = GsonConverters.getGsonObject().fromJson(resultScore, HubResponse.class);
									 
									 if(response2!=null && response2.getResults()!=null){
										 
										 
										 model.addObject("BattingMatchesScoreList", response2.getResults().getScoreCardList());
									 }
								 }
							}else{
								model.addObject("battingPerformanceListSize",0);
							}
						}
					}
					
					
					
					hubReq= new HubRequest();
					hubReq.setMsgType(147);
				//	hubReq.setMsgType(206);
					ModelMap bowlingmap = new ModelMap();
					//bowlingmap.put("uid", userId);
					bowlingmap.put("uid", buddyid);
					bowlingmap.put("startNode", 0);
					bowlingmap.put("endNode", 15);
					hubReq.setRequestParam(bowlingmap);
					String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				
					if(strBowlingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("bowlingPerformanceList", response.getResults().getUserBowlingPerformanceList());
							if(response.getResults().getUserBowlingPerformanceList() != null){
								model.addObject("bowlingPerformanceListSize",response.getResults().getUserBowlingPerformanceList().size());
							}else{
								model.addObject("bowlingPerformanceListSize",0);
							}
						}
					}
					
					hubReq= new HubRequest();
					//hubReq.setMsgType(148);
					hubReq.setMsgType(207);
					ModelMap achievements = new ModelMap();
					//achievements.put("uid", userId);
					achievements.put("uid", buddyid);
				//	achievements.put("startNode", 0);
				//	achievements.put("endNode", 10);
					hubReq.setRequestParam(achievements);
					String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strAchievementsResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("achievementsList", response.getResults().getUseronedaymatchsachivements());
							if(response.getResults().getUseronedaymatchsachivements() != null){
								model.addObject("achievementsListSize",response.getResults().getUseronedaymatchsachivements().size());
							}else{
								model.addObject("achievementsListSize",0);
							}
						}
					}
					
					
					hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					//yearsMap.put("uid", userId);
					yearsMap.put("uid", buddyid);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							
						}
					}
					
					
					
				/*}else{
					model.addObject("battingPerformanceListSize",0);
					model.addObject("bowlingPerformanceListSize",0);
					model.addObject("achievementsListSize",0);
				}*/
				
			//}
			 
			 
			 
				
				
				
				
				hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
				
				
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;
}

//*********************************************************************************************************************

@RequestMapping(value="/getUserNotification", method=RequestMethod.POST)
public @ResponseBody ResponseType getUserNotification(HttpServletRequest request){
	ResponseType response=null;
	try{
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest();
			hubReq.setMsgType(218);		
			ModelMap map = new ModelMap();
			map.put("userId", userId);
			hubReq.setRequestParam(map);
			String strnofication =cricketSocialRestTemplateService.userRegistration(hubReq);
			if(strnofication!=null){
				HubResponse notification=GsonConverters.getGsonObject().fromJson(strnofication, HubResponse.class);
				response=notification.getResults();
			}
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return response;
}
@RequestMapping(value="/getUserNotificationList", method=RequestMethod.POST)
public @ResponseBody List<EventNotificationDTO> getUserNotificationList(HttpServletRequest request){
	List<EventNotificationDTO> response=null;
	try{
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId=(UUID) session.getAttribute("USRID");
			hubReq=new HubRequest();
			hubReq.setMsgType(219);		
			ModelMap map = new ModelMap();
			map.put("userId", userId);
			//map.put("userId", "54bff4f9-4ecc-4b3c-847c-a86a8dbebbad");
			hubReq.setRequestParam(map);
			String strnofication =cricketSocialRestTemplateService.userRegistration(hubReq);
			if(strnofication!=null){
				HubResponse notification=GsonConverters.getGsonObject().fromJson(strnofication, HubResponse.class);
				if(notification!=null && notification.getResults()!=null&& notification.getResults().getEventnotificationList()!=null)
				{
					response=notification.getResults().getEventnotificationList();
				 // response= new ArrayList<EventNotificationDTO>();
					System.out.println("resu;lt ---------> "+response.size());
					/*for(EventNotificationDTO l : response)
					{
						System.out.println("away image url ----------> "+l.getTournamentScheduler().get(0).getAwayTeamInfo().getBoardImageURL());
					}*/
				}
			}
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return response;
}
@RequestMapping(value="/boardListFunction", method=RequestMethod.POST)
public @ResponseBody List<BoardProfile> getBoardList(HttpServletRequest request,@RequestBody BoardListFunction board)
{
	  List<BoardProfile> boardList=null;
	 try{
			HttpSession session = request.getSession(true);
			if(session != null && session.getAttribute("USRID") != null){
				UUID userId=(UUID) session.getAttribute("USRID");
				hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", board.getStartNode());
				 map3.put("endNode", board.getEndNode());
				  hubReq.setRequestParam(map3);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						boardList=hubResponse2.getResults().getBoardsList();
					 }
					 
				 }
			}
	 }catch(Exception e)
	 {
		 e.printStackTrace();
	 }
	return boardList;
}
@RequestMapping(value="/buddyAroundYouSearch", method=RequestMethod.POST)
public @ResponseBody List<UserProfile> buddyAroundYouSearch(HttpServletRequest request,@RequestBody BoardListFunction board) throws CSException
{
	 List<UserProfile> list=null;
	 HttpSession session= request.getSession(true);
	 hubReq=new HubRequest();
	 hubReq.setMsgType(23);
	 BoardSearchRequest searchReq= new BoardSearchRequest();
	
	 String userlocation=(String) session.getAttribute("USRLocation");
	 System.out.println("userlocation session.getAttribute()------------->"+userlocation);
	 if(userlocation!=null)
	 {
		if(userlocation.length()>3)
		{
			 searchReq.setLatlang(userlocation);
		}else{
			 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
		}
	 }else{
		 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
	 }
	 
	 searchReq.setStartNode(board.getStartNode());
	 searchReq.setEndNode(board.getEndNode());
	 searchReq.setCategory("Team");
	 hubReq.setRequestParam(searchReq);
	 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 System.out.println("board result : "+strbuddyresponse);
	 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
	 System.out.println("buddyResponse : "+buddyResponse.getResults().getSearchResponse());
	 if(buddyResponse.getResults().getSearchResponse()!=null)
	 {
		 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
		list=buddyResponse.getResults().getSearchResponse().getUserList();
	 }
	
	return list;
}

@RequestMapping(value="/teamAroundYouSearch", method=RequestMethod.POST)
public @ResponseBody List<BoardProfile> teamAroundYouSearch(HttpServletRequest request,@RequestBody BoardListFunction board) throws CSException
{
	List<BoardProfile> list=null;
	 HttpSession session= request.getSession(true);
	 hubReq=new HubRequest();
	 hubReq.setMsgType(22);
	 BoardSearchRequest searchReq= new BoardSearchRequest();
	 String userlocation=(String) session.getAttribute("USRLocation");
	 System.out.println("userlocation session.getAttribute()------------->"+userlocation);
	 if(userlocation!=null)
	 {
		if(userlocation.length()>3)
		{
			 searchReq.setLatlang(userlocation);
			 System.out.println("user location setttt");
		}else{
			 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 System.out.println("user not getted ------------- default 1");
		}
	 }else{
		 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
		 System.out.println("user not getted ------------- default 2");
	 }
	 searchReq.setStartNode(board.getStartNode());
	 searchReq.setEndNode(board.getEndNode());
	 searchReq.setCategory(board.getCategory());
	 hubReq.setRequestParam(searchReq);
	 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 System.out.println("board result : "+strTeamlist);
	 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
	 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
	 
	 if(strTeamResponse.getResults().getSearchResponse()!=null)
	 {
		 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
		 list=strTeamResponse.getResults().getSearchResponse().getBoardProfileList();
	 }
	
	return list;
}

@RequestMapping(value="/userFeedsSearch", method=RequestMethod.POST)
public @ResponseBody List<Feeds>  userFeedsSearch(HttpServletRequest request,@RequestBody BoardListFunction board) throws CSException
{
		 List<Feeds>  list=null;
		 hubReq=new HubRequest(8);
		 hubReq.setMsgType(8);
		 Feeds feed= new Feeds();
		 feed.setStartNode(board.getStartNode());
		 feed.setEndNode(board.getEndNode());
		 feed.setUserId(board.getUserID());
		 feed.setFeedHitUserId(board.getFeedHitUserId());
		 hubReq.setRequestParam(feed);
		 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse resp= GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
		 if(resp.getResults()!=null && resp.getResults().getFeedResponse()!=null){
			 list=resp.getResults().getFeedResponse().getFeedList(); 
		 }
	return list;
}

@RequestMapping(value="/boardFeedsSearch", method=RequestMethod.POST)
public @ResponseBody List<Feeds>  boardFeedsSearch(HttpServletRequest request,@RequestBody BoardListFunction board) throws CSException
{
		 List<Feeds>  list=null;
		 hubReq=new HubRequest();
		 hubReq.setMsgType(42);
		 ModelMap map2=new ModelMap();
		 map2.put("boardId", board.getBoardId());
		 map2.put("userId", board.getUserID());
		 map2.put("startNode", board.getStartNode());
		 map2.put("endNode", board.getEndNode());
		 map2.put("feedHitUserId", board.getFeedHitUserId());
		 hubReq.setRequestParam(map2);
		 String strBoardFeedList=cricketSocialRestTemplateService.userRegistration(hubReq);					
		 if(strBoardFeedList!=null )
		 {
			 HubResponse feedlist= GsonConverters.getGsonObject().fromJson(strBoardFeedList, HubResponse.class);
			 
			 if(feedlist!=null && feedlist.getResults().getBoardFeedResponse()!=null && feedlist.getResults().getBoardFeedResponse()!=null)
			 {
				 //FeedsList
				list=feedlist.getResults().getBoardFeedResponse().getFeedList();
			 }
		 }else{
			 System.out.println("Board feeds not excuted...........");
		 }
		 
	return list;
}
@RequestMapping(value="/userPublicFeedsSearch", method=RequestMethod.POST)
public @ResponseBody List<Feeds>  userpublicFeedsSearch(HttpServletRequest request,@RequestBody BoardListFunction board) throws CSException
{
		 List<Feeds>  list=null;
		 hubReq=new HubRequest();
		 hubReq.setMsgType(189);
		 Feeds feed= new Feeds();
		 feed.setStartNode(board.getStartNode());
		 feed.setEndNode(board.getEndNode());
		 feed.setUserId(board.getUserID());
		 feed.setFeedHitUserId(board.getFeedHitUserId());
		 hubReq.setRequestParam(feed);
		 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
		 HubResponse resp= GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
		 if(resp.getResults()!=null && resp.getResults().getFeedResponse()!=null){
			 list=resp.getResults().getFeedResponse().getFeedList(); 
		 }
	return list;
}

@RequestMapping(value="/userFanOfListPagination", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse userFanOfListPagination(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(57);	
	// boardFanRequest.setStartNode("0");
	// boardFanRequest.setEndNode("10");	 
	 boardFanRequest.setUserId(userId.toString());
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}



@RequestMapping(value="/userFansListPagination", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse userFansListPagination(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	
	HttpSession session=request.getSession(true);
	UUID userId= (UUID) session.getAttribute("USRID");
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(56);	
	 //boardFanRequest.setStartNode("0");
	 //boardFanRequest.setEndNode("10");	 
	 //boardFanRequest.setUserId(userId.toString());
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}

@RequestMapping(value="/getMyBuddiesAjaxPagination", method=RequestMethod.POST)
@ResponseBody
public  List<UserProfile>  getMyBuddiesAjaxPagination(@RequestBody BoardFanRequest user,HttpServletRequest request) throws CSException{
	HttpSession session=request.getSession(true);
	UUID userId=(UUID) session.getAttribute("USRID");
	hubReq=new HubRequest(32);
	 hubReq.setMsgType(32);
	 ModelMap map=new ModelMap();
	 map.put("userId", user.getUserId());
	 map.put("startNode", user.getStartNode());
	 map.put("endNode", user.getEndNode());
	 hubReq.setRequestParam(map);
	 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
	GsonBuilder builder = new GsonBuilder();
    Gson gson = builder.create();
    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
    SearchResults searchResults=response1.getResults();
    SearchResponse searchResponse1=searchResults.getSearchResponse();
    List<UserProfile> myBuddies=new ArrayList<UserProfile>();
    if(searchResponse1.getUserList() != null){
    	myBuddies=searchResponse1.getUserList();
    }
    System.out.println("user details ---------> "+myBuddies);
	return myBuddies;
}

@RequestMapping(value="/getMyBuddyRequestsAjaxPagination", method=RequestMethod.POST)
@ResponseBody
public  List<UserProfile>  getMyBuddyRequestsAjaxPagination(@RequestBody BoardFanRequest user,HttpServletRequest request) throws CSException{
	
	HttpSession session=request.getSession(true);

	hubReq=new HubRequest(34);
	 hubReq.setMsgType(34);
	 UUID userId=(UUID) session.getAttribute("USRID");
	 ModelMap map1=new ModelMap();
	 map1.put("userId", user.getUserId());
	 map1.put("startNode", user.getStartNode());
	 map1.put("endNode", user.getEndNode());
	 hubReq.setRequestParam(map1);
	 
	 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
    SearchMainResponse response2=gson.fromJson(invitaionResponse, SearchMainResponse.class);
	
    SearchResults searchResults1=response2.getResults();
    SearchResponse searchResponse1=searchResults1.getSearchResponse();
    List<UserProfile> invitationUsers=new ArrayList<UserProfile>();
    if(searchResponse1.getUserList() != null){
    	invitationUsers=searchResponse1.getUserList();
    }
    	
	System.out.println("res-----------> "+invitationUsers);
	return invitationUsers;
}


@RequestMapping(value="/boardFansListPagination", method=RequestMethod.POST)
public @ResponseBody BoardAttrbutesResponse boardFansListPagination(@RequestBody BoardFanRequest boardFanRequest) throws CSException
{
	BoardAttrbutesResponse boardAttrbutesResponse=null;
	System.out.println("board id : "+boardFanRequest.getBoardId());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(46);	
	 boardFanRequest.setStartNode(boardFanRequest.getStartNode());
	 boardFanRequest.setEndNode(boardFanRequest.getEndNode());	 
	 hubReq.setRequestParam(boardFanRequest);	
	 String strBoardFanlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardFanlist!=null)
	 {
		 HubResponse boardFanList=GsonConverters.getGsonObject().fromJson(strBoardFanlist, HubResponse.class);
		 
		 if(boardFanList!=null && boardFanList.getResults()!=null && boardFanList.getResults().getFanDetails()!=null)
		 {
			 boardAttrbutesResponse=boardFanList.getResults().getFanDetails();
		 }
	 }
	 return boardAttrbutesResponse;
}

@RequestMapping(value="/userEventsPagination", method=RequestMethod.POST)
public @ResponseBody Event userEventsPagination(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	
	Event event=null;
	System.out.println("login user---> "+boardFanRequest.getUserId());
	HttpSession session=request.getSession(true);
	String loginUserid=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		loginUserid=userId+"";
	}else{
		loginUserid=boardFanRequest.getUserId();
	}

	ModelMap neweventmap=new ModelMap();
	 neweventmap.put("userId", boardFanRequest.getUserId());
	 neweventmap.put("loggedUserId", loginUserid);
	 neweventmap.put("startNode", boardFanRequest.getStartNode());
	 neweventmap.put("endNode", boardFanRequest.getEndNode());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(222);
	 hubReq.setRequestParam(neweventmap);
	 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strneweventlist!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getCreatedEventList()!=null)
		 {
			event=hubResponse2.getResults().getCreatedEventList();
		 }
	 }
	 return event;
}


@RequestMapping(value="/topBatsManPagination", method=RequestMethod.POST)
public @ResponseBody List<TournamentDTO> topBatsManPagination(@RequestBody CenturiesSerach search,HttpServletRequest request) throws CSException
{
	System.out.println("start number ----> "+search.getStartNode()+"/t end number ---> "+search.getEndNode()+"  "+search.getBoardId());
	List<TournamentDTO> result=null;
	 hubReq = new HubRequest();
	 hubReq.setMsgType(182);
	
	 hubReq.setRequestParam(search);
	 
	 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
		if(strtopBatsman!=null)
		{
			 HubResponse topBatsmanResponse= GsonConverters.getGsonObject().fromJson(strtopBatsman, HubResponse.class);
			 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
			 {
				 result=topBatsmanResponse.getResults().getTopBatsmanList();
			 }
		}
	 
	
	return result;
}

@RequestMapping(value="/topBowlerPagination", method=RequestMethod.POST)
public @ResponseBody List<TournamentDTO> topBowlerPagination(@RequestBody CenturiesSerach search,HttpServletRequest request) throws CSException
{
	System.out.println("start number ----> "+search.getStartNode()+"/t end number ---> "+search.getEndNode()+"  "+search.getBoardId());
	
	List<TournamentDTO> result=null;
	hubReq = new HubRequest();
	 hubReq.setMsgType(183);	
	 hubReq.setRequestParam(search);
	 
	 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
		if(strtopBatsman!=null)
		{
			 HubResponse topBatsmanResponse= GsonConverters.getGsonObject().fromJson(strtopBatsman, HubResponse.class);
			 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
			 {
				result= topBatsmanResponse.getResults().getTopBowlersList();
			 }
		}
	return result;
}
@RequestMapping(value="/cancelledEventPagination", method=RequestMethod.POST)
public @ResponseBody List<EventMatchMap> cancelledEventPagination(@RequestBody BoardFanRequest event,HttpServletRequest request) throws CSException
{
	System.out.println("start number ----> "+event.getStartNode()+"/t end number ---> "+event.getEndNode()+"  userId"+event.getUserId());
	/*
	 {
    "msgType": 226,
    "properties": {},
    "requestParam": {
        "userId":"1242ac1a-d60a-4926-8d78-d7138924af65",
        "loggedUserId":"679c0940-b1da-4297-a969-4d0be8018b1b",
        "startNode":0,
        "endNode":3
    }
}
	 * */
	List<EventMatchMap> eventlist=null;
	HttpSession session=request.getSession(true);
	String loginUserid=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		loginUserid=userId+"";
	}

	
	ModelMap neweventmap=new ModelMap();
	 neweventmap.put("userId", event.getUserId());
//	 neweventmap.put("userId", "1242ac1a-d60a-4926-8d78-d7138924af65");
	 neweventmap.put("loggedUserId", loginUserid);
	 neweventmap.put("startNode", event.getStartNode());
	 neweventmap.put("endNode", event.getEndNode());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(226);
	 hubReq.setRequestParam(neweventmap);
	 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strneweventlist!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getBuddyCancelledMatchList()!=null)
		 {
			 eventlist=hubResponse2.getResults().getBuddyCancelledMatchList();
		 }
	 }
	
	
	return eventlist;
}

@RequestMapping(value="/boardCancelledEventPagination", method=RequestMethod.POST)
public @ResponseBody BoardCancelledMatchList boardCancelledEventPagination(@RequestBody BoardFanRequest event,HttpServletRequest request) throws CSException
{
	System.out.println("start number ----> "+event.getStartNode()+"/t end number ---> "+event.getEndNode()+"  userId"+event.getUserId());
	/*
	 {
    "msgType": 226,
    "properties": {},
    "requestParam": {
        "userId":"1242ac1a-d60a-4926-8d78-d7138924af65",
        "loggedUserId":"679c0940-b1da-4297-a969-4d0be8018b1b",
        "startNode":0,
        "endNode":3
    }
}
	 * */
	BoardCancelledMatchList eventlist=null;
	HttpSession session=request.getSession(true);
	String loginUserid=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		loginUserid=userId+"";
	}

	
	ModelMap neweventmap=new ModelMap();
	 neweventmap.put("userId", event.getBoardId());
	// neweventmap.put("userId", "af16dc90-ac54-4ff4-a1e3-9462237ec91b");
	 neweventmap.put("loggedUserId", loginUserid);
	 neweventmap.put("startNode", event.getStartNode());
	 neweventmap.put("endNode", event.getEndNode());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(225);
	 hubReq.setRequestParam(neweventmap);
	 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strneweventlist!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getBoardCancelledMatchList()!=null)
		 {
			 eventlist=hubResponse2.getResults().getBoardCancelledMatchList();
		 }
	 }
	
	
	return eventlist;
}
@RequestMapping(value="/boardMatchEventPagination", method=RequestMethod.POST)
public @ResponseBody BoardUpcomingMatchList boardMatchEventPagination(@RequestBody BoardFanRequest event,HttpServletRequest request) throws CSException
{
	System.out.println("start number ----> "+event.getStartNode()+"/t end number ---> "+event.getEndNode()+"  userId"+event.getUserId());
	
	BoardUpcomingMatchList eventlist=null;
	HttpSession session=request.getSession(true);
	String loginUserid=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		loginUserid=userId+"";
	}

	
	ModelMap neweventmap=new ModelMap();
	 neweventmap.put("userId", event.getBoardId());
	// neweventmap.put("userId", "1df0af5c-551d-4e57-8780-ed0922802cee");
	 neweventmap.put("loggedUserId", loginUserid);
	 neweventmap.put("startNode", event.getStartNode());
	 neweventmap.put("endNode", event.getEndNode());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(227);
	 hubReq.setRequestParam(neweventmap);
	 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strneweventlist!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getBoardUpcomingMatchList()!=null)
		 {
			 eventlist=hubResponse2.getResults().getBoardUpcomingMatchList();
		 }
	 }
	
	
	return eventlist;
}

@RequestMapping(value="/buddyMatchEventPagination", method=RequestMethod.POST)
public @ResponseBody BoardUpcomingMatchList buddyMatchEventPagination(@RequestBody BoardFanRequest event,HttpServletRequest request) throws CSException
{
	System.out.println("start number ----> "+event.getStartNode()+"/t end number ---> "+event.getEndNode()+"  userId"+event.getUserId());
	
	BoardUpcomingMatchList eventlist=null;
	HttpSession session=request.getSession(true);
	String loginUserid=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		loginUserid=userId+"";
	}

	
	ModelMap neweventmap=new ModelMap();
	 neweventmap.put("userId", event.getUserId());
	// neweventmap.put("userId", "a170c4ec-18d0-4619-9275-2e6b7499aea9");
	 neweventmap.put("loggedUserId", loginUserid);
	 neweventmap.put("startNode", event.getStartNode());
	 neweventmap.put("endNode", event.getEndNode());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(229);
	 hubReq.setRequestParam(neweventmap);
	 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strneweventlist!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getUpcomingBuddyMatchList()!=null)
		 {
			 eventlist=hubResponse2.getResults().getUpcomingBuddyMatchList();
		 }
	 }
	
	
	return eventlist;
}

@RequestMapping(value="/buddyInvitationPagination", method=RequestMethod.POST)
public @ResponseBody BuddyEventInvitationList buddyInvitationPagination(@RequestBody BoardFanRequest boardFanRequest,HttpServletRequest request) throws CSException
{
	
	BuddyEventInvitationList event=null;
	System.out.println("login user---> "+boardFanRequest.getUserId());
	HttpSession session=request.getSession(true);
	String loginUserid=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId=(UUID) session.getAttribute("USRID");
		loginUserid=userId+"";
	}else{
		loginUserid=boardFanRequest.getUserId();
	}

	ModelMap neweventmap=new ModelMap();
	 neweventmap.put("userId", boardFanRequest.getUserId());
	// neweventmap.put("userId", "038041f2-0a63-4219-901a-a1d8cb4df3ab");
	 neweventmap.put("loggedUserId", loginUserid);
	 neweventmap.put("startNode", boardFanRequest.getStartNode());
	 neweventmap.put("endNode", boardFanRequest.getEndNode());
	 hubReq= new HubRequest();
	 hubReq.setMsgType(231);
	 hubReq.setRequestParam(neweventmap);
	 String strneweventlist=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strneweventlist!=null)
	 {
		 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strneweventlist, HubResponse.class);
		 if(hubResponse2!=null && hubResponse2.getResults()!=null && hubResponse2.getResults().getGetBuddyEventInvitationList()!=null)
		 {
			event=hubResponse2.getResults().getGetBuddyEventInvitationList();
		 }
	 }
	 return event;
}


@RequestMapping(value="/rosterBuddySearch", method=RequestMethod.POST)
public @ResponseBody SearchResponse rosterBuddySearch( HttpServletRequest request,@RequestBody String name)
{
	SearchResponse response=null;
	System.out.println("roster key value------- : "+name);
	try{
		HttpSession session = request.getSession(true);
		 hubReq=new HubRequest();
		 hubReq.setMsgType(235);
		// hubReq.setMsgType(21);
		 UserProfile user= new UserProfile();
		 UUID id=(UUID) session.getAttribute("USRID");
		 user.setUserId(id);
		 user.setSearchType("Buddy");
		 user.setSearchQuery(name);
		 user.setStartNode("0");
		 user.setEndNode("50");
		 hubReq.setRequestParam(user);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		    GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		   HubResponse hubres =gson.fromJson(result, HubResponse.class);
		   if(hubres.getResults()!=null) {
			   response=hubres.getResults().getSearchResponse();
		   }
		   
		   
		  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	   
	return response;
}

@RequestMapping(value="/halfCenturyPage", method=RequestMethod.POST)
public @ResponseBody List<TournamentDTO> halfCentrePage( HttpServletRequest request,@RequestBody CenturiesSerach serach)throws CSException {
	
	List<TournamentDTO> result=null;
	HubRequest hubReq=new HubRequest();
    hubReq.setMsgType(131);
    
	 /*CenturiesSerach serach= new CenturiesSerach();
	 serach.setAgainstTeamId("");
	 serach.setBoardId(bid);
	 serach.setEndNode(10);
	 serach.setStartNode(0);
	 serach.setTournamentId("");
	 serach.setHomeTeamId("");	*/
	
     hubReq.setRequestParam(serach);
	 String strCentury=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strCentury!=null)
	 {
		 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strCentury, HubResponse.class);
		if(hubResponse1!=null && hubResponse1.getResults().getHalfCenturyList()!=null)
		{
			result=hubResponse1.getResults().getHalfCenturyList();
			System.out.println("list size ------> "+hubResponse1.getResults().getHalfCenturyList());
		}else{
			result=new ArrayList<TournamentDTO>();
		}
	 }else{
		    result=new ArrayList<TournamentDTO>();
	 }
	 
	return result;
}
//******************************************************* end **************************************************************
//######################################################  Ramya    ##########################################################################################

@RequestMapping(value="/showScoreCard/matchId/{matchId}", method = RequestMethod.GET)
public ModelAndView showScoreCardOfPlayer(HttpServletRequest req,@PathVariable String matchId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("ScoreCardForPlayer");
	
		
				hubReq=new HubRequest(13);
				 hubReq.setMsgType(13);		
				UserProfile userProfile= new UserProfile();
				userProfile.setUserId(userId);
				 hubReq.setRequestParam(userProfile);
				 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("controller result -------------------> "+result ); 
				 if(result!=null)
				 {
					  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
					  if(profile!=null && profile.getResults()!=null)
					  {
						  mav.addObject("UserInfo", profile.getResults().getItemsFound()[0]);
					  }
				 }
				 
				 
				 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
				 if(userProfile.getUserId()!=null)
				 {
					 String userIdString = userProfile.getUserId().toString();
					 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
					 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
					 playerInfo.setPlayer1(roldinfo);
				 }
				 mav.addObject("SelectedPlayersInfo", playerInfo);
				 
					hubReq=new HubRequest();
					hubReq.setMsgType(145);		
					ModelMap map = new ModelMap();
					map.put("uid", userId);
					map.put("startNode", 0);
					map.put("endNode", 10);
					hubReq.setRequestParam(map);
					String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
					if(playerMatches!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
						if(response!=null && response.getResults()!=null)
						{
							mav.addObject("UserMatchInfo", response.getResults().getSearchResponse());
						}
					}
					
			
		//*************************** Getting Board info  ***************************************
		
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(13);
			 ModelMap map3 = new ModelMap();
			 map3.put("matchId", matchId);
			 hubReq.setRequestParam(map3);
			 
			 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(returnResponse != null){
				 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
				 if(res != null && res.getResults() != null){
					//mav.addObject("scoreCardList", res.getResults());
					 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
						mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
					mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
					mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
					mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
					mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
					mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFollowOfWickets());
					mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFollowOfWickets());
					
					
					if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
						mav.addObject("firstInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBattingPlayer() == null){
						mav.addObject("SecondInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
					}
					if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
						mav.addObject("firstInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
						mav.addObject("SecondInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
					}
					
					
					
					
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }*/
			 
			 

				hubReq= new HubRequest();
			 hubReq.setMsgType(243);
			 ModelMap scoremap=new ModelMap();
			 scoremap.put("matchId", matchId);		
			  hubReq.setRequestParam(scoremap);

				 String strscoremap=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strscoremap!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strscoremap, HubResponse.class);
					 if(hubResponse!=null)
					 {
						 System.out.println("hubResponse.getRequestStatus() ---> "+hubResponse.getRequestStatus());
						 if(hubResponse.getRequestStatus().equalsIgnoreCase("4")){
							System.out.println("manual enter"); 
							
							
							 hubReq = new HubRequest();
							 hubReq.setMsgType(242);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									
									
									String manOfTheMatch = "";
									if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
										for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
									
											if(i == 0){
												manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}else{
												manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}
										}
									}
									System.out.println("----------player of the match ----------"+manOfTheMatch);
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							
							
						 }else{
							 System.out.println("scoring app");
							 
							 hubReq = new HubRequest();
							 hubReq.setMsgType(13);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									
									String manOfTheMatch = "";
									if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
										for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
									
											if(i == 0){
												manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}else{
												manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}
										}
									}
									System.out.println("----------player of the match ----------"+manOfTheMatch);
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							 
							 
						 }
					 }
				 }
			 
			 
			 
			 // score match samarry 
			 
		/*	 hubReq = new HubRequest();
			 hubReq.setMsgType(11);
			 ModelMap matchMap = new ModelMap();
			 matchMap.put("tournamentSchedulerId", matchId);
			 matchMap.put("innings", "1");
			 hubReq.setRequestParam(matchMap);
			 
			 String summaryRes = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(summaryRes != null){
				 PlayerSummaryResponse playerRes = GsonConverters.getGsonObject().fromJson(summaryRes, PlayerSummaryResponse.class);
				 if(playerRes != null && playerRes.getResults() != null){
					 mav.addObject("overAllSummary", playerRes.getResults().getItemFound());
					 if(playerRes.getResults().getItemFound() != null){
						
						 mav.addObject("battingInfo", playerRes.getResults().getItemFound().getBattingInfo());			
						 mav.addObject("bowlingInfo",  playerRes.getResults().getItemFound().getBowlingInfo());				 
						 mav.addObject("runnerInfo",  playerRes.getResults().getItemFound().getRunnerInfo());	
						 
						 if(playerRes.getResults().getInningsSCore() != null){
							 
							mav.addObject("SecondInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getSecondInnings().getMap());
							mav.addObject("FirstInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getFirstInnings().getMap());
							 
						 }
						
						 
						 
					 }
					 
					
				 }
				 
			 }*/
			 
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 

			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			
			 
		}else{
			 mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/paginationBattingPerformance",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> paginationBattingPerformance(@RequestBody GameSchedule game,HttpServletRequest req){
	List<UserBattingPerformanceDTO> battingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			hubReq.setMsgType(155);
			ModelMap battingmap = new ModelMap();
			if(game.getUserId() == null){
			battingmap.put("uid", userId);
			}else
			{
				battingmap.put("uid", game.getUserId());
			}
			battingmap.put("startNode", game.getStartNode());
			battingmap.put("endNode", game.getEndNode());
			battingmap.put("filterByYear",game.getFilterByYear());
			hubReq.setRequestParam(battingmap);
			String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(strBattingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					 battingList = response.getResults().getUserBattingPerformanceList();
					
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return battingList;
}


@RequestMapping(value="/paginationBowlingPerformance",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> paginationBowlingPerformance(@RequestBody GameSchedule game,HttpServletRequest req){
	List<UserBattingPerformanceDTO> bowlingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(147);
			ModelMap bowlingmap = new ModelMap();
			bowlingmap.put("uid", game.getUserId());
			bowlingmap.put("startNode", game.getStartNode());
			bowlingmap.put("endNode", game.getEndNode());
			bowlingmap.put("flag", game.getFlag());
			bowlingmap.put("filterByYear",game.getFilterByYear());
			hubReq.setRequestParam(bowlingmap);
			String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
	
			if(strBowlingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					bowlingList = response.getResults().getUserBowlingPerformanceList();
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return bowlingList;
}

@RequestMapping(value="/paginationMatchAchievements",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> paginationMatchAchievements(@RequestBody GameSchedule game,HttpServletRequest req){
	List<UserBattingPerformanceDTO> achievementList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(148);
			ModelMap achievements = new ModelMap();
			achievements.put("uid", game.getUserId());
			achievements.put("startNode", game.getStartNode());
			achievements.put("endNode", game.getEndNode());
			achievements.put("filterByYear",game.getFilterByYear());
			hubReq.setRequestParam(achievements);
			String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			
			
			if(strAchievementsResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					achievementList = response.getResults().getUseronedaymatchsachivements();
				}
			}
			
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return achievementList;
}

@RequestMapping(value="/yearWiseBatting", method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> yearWiseBatting(@RequestBody UserBattingPerformanceDTO userBat, HttpServletRequest req){
	List<UserBattingPerformanceDTO> battingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			hubReq.setMsgType(155);
			ModelMap battingmap = new ModelMap();
			battingmap.put("uid", userId);
			battingmap.put("startNode", 0);
			battingmap.put("endNode", 10);
			battingmap.put("filterByYear", userBat.getFilterByYear());
			hubReq.setRequestParam(battingmap);
			String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(strBattingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					 battingList = response.getResults().getUserBattingPerformanceList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return battingList;

}

@RequestMapping(value="/yearWiseBowling",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> yearWiseBowling(@RequestBody UserBattingPerformanceDTO userBat,HttpServletRequest req){
	List<UserBattingPerformanceDTO> bowlingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(147);
			ModelMap bowlingmap = new ModelMap();
			bowlingmap.put("uid", userId);
			bowlingmap.put("startNode", 0);
			bowlingmap.put("endNode", 10);
			bowlingmap.put("filterByYear", userBat.getFilterByYear());
			bowlingmap.put("flag", "forMyScore");
			hubReq.setRequestParam(bowlingmap);
			String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
	
			if(strBowlingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					bowlingList = response.getResults().getUserBowlingPerformanceList();
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return bowlingList;
}


	@RequestMapping(value = "/yearWiseAchievements", method = RequestMethod.POST)
	public @ResponseBody List<UserBattingPerformanceDTO> yearWiseAchievements(
			@RequestBody UserBattingPerformanceDTO userAch,
			HttpServletRequest req) {
		List<UserBattingPerformanceDTO> achievementList = null;
		try {
			HttpSession session = req.getSession(true);
			if (session != null && session.getAttribute("USRID") != null) {
				UUID userId = (UUID) session.getAttribute("USRID");

				hubReq = new HubRequest();
				hubReq.setMsgType(148);
				ModelMap achievementmap = new ModelMap();
				achievementmap.put("uid", userId);
				achievementmap.put("startNode", 0);
				achievementmap.put("endNode", 500);
				achievementmap.put("filterByYear", userAch.getFilterByYear());
				hubReq.setRequestParam(achievementmap);
				String strAchievementResponse = cricketSocialRestTemplateService
						.userRegistration(hubReq);

				if (strAchievementResponse != null) {
					HubResponse response = GsonConverters
							.getGsonObject()
							.fromJson(strAchievementResponse, HubResponse.class);
					if (response != null && response.getResults() != null
							&& response.getResults() != null) {
						achievementList = response.getResults()
								.getUseronedaymatchsachivements();
					}
				}

			} else {

			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return achievementList;
	}



@RequestMapping(value="/yearWiseAchievementScorer",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> yearWiseAchievementScorer(@RequestBody UserBattingPerformanceDTO userAch,HttpServletRequest req){
	List<UserBattingPerformanceDTO> achievementList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(148);
			ModelMap achievementmap = new ModelMap();
			achievementmap.put("uid", userAch.getPlayerId());
			achievementmap.put("startNode", 0);
			achievementmap.put("endNode", 500);
			achievementmap.put("filterByYear", userAch.getFilterByYear());
			hubReq.setRequestParam(achievementmap);
			String strAchievementResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
	
			if(strAchievementResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					achievementList = response.getResults().getUseronedaymatchsachivements();
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return achievementList;
}


@RequestMapping(value="/EnterScore/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView enterScore(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("EnterScore");
		//	mav = new ModelAndView("enterscore2");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 hubReq = new HubRequest(161);
					hubReq.setMsgType(161);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}
					

					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					

					hubReq = new HubRequest();
					hubReq.setMsgType(213);
					ModelMap dismissalMap = new ModelMap();
					hubReq.setRequestParam(dismissalMap);
					String dismissalResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(dismissalResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(dismissalResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getDismissalTypeList() != null){
							mav.addObject("dismissalTypeList", hubRes.getResults().getDismissalTypeList());
							
						}
					}
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
			
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}
@RequestMapping(value="/EnterScoreSelectedMatch/boardId/{boardId}/{tournamentId}/{tournamentSchedulerId}/{homeTeamId}/{awayTeamId}/{matchDate}/{leagueCreatedBy}", method = RequestMethod.GET)
public ModelAndView enterScoreSelectedMatch(HttpServletRequest req, @PathVariable String boardId,@PathVariable String tournamentId,@PathVariable String tournamentSchedulerId, @PathVariable String homeTeamId,@PathVariable String awayTeamId,@PathVariable String matchDate,@PathVariable String leagueCreatedBy){
	ModelAndView mav = null;
	try{
		
		System.out.println("id----->><><>"+boardId+"<><>"+tournamentId+"<><>"+tournamentSchedulerId+"<><>"+homeTeamId+"<><><"+awayTeamId+"<><><"+matchDate+"<><>leagueCreatedBy"+leagueCreatedBy);
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("EnterScore");
		//	mav = new ModelAndView("enterscore2");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 hubReq = new HubRequest(161);
					hubReq.setMsgType(161);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}
					

					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					

					hubReq = new HubRequest();
					hubReq.setMsgType(213);
					ModelMap dismissalMap = new ModelMap();
					hubReq.setRequestParam(dismissalMap);
					String dismissalResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(dismissalResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(dismissalResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getDismissalTypeList() != null){
							mav.addObject("dismissalTypeList", hubRes.getResults().getDismissalTypeList());
							
						}
					}
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
			
				// response[i].homeTeamId+","+response[i].awayTeamId+","+response[i].tournamentSchedulerId+","+response[i].dateString;
				 mav.addObject("selectedTournamentId",tournamentId);
				 mav.addObject("selectedTeam", homeTeamId+","+awayTeamId+","+tournamentSchedulerId+","+matchDate);
				 mav.addObject("homeTeamId", homeTeamId);
				 mav.addObject("awayTeamId", awayTeamId);
				 
			//*************************************** Get Roaster Team Details ******************************//
				 HubRequest hubReq2=new HubRequest();	 
				 hubReq2.setMsgType(31);
				 ModelMap map12=new ModelMap();			
				 map12.put("leagueCreatedBy", leagueCreatedBy);			 
				 map12.put("tournamentSchedulerId", tournamentSchedulerId);
				 map12.put("boardId", homeTeamId);
		
				 hubReq2.setRequestParam(map12);
				 String homeTeamRosterDetails=cricketSocialRestTemplateService.userRegistration1(hubReq2);	
				 if(homeTeamRosterDetails != null){
					 HubResponse hubResponse= gson.fromJson(homeTeamRosterDetails, HubResponse.class);
					 System.out.println("roster Details---"+hubResponse.getResults().getRosterDetails().size());
					 if(hubResponse.getResults().getRosterDetails().size() > 0){
						 JSONArray homeList = new JSONArray(hubResponse.getResults().getRosterDetails().get(0).getRosterUserMapList());
						 System.out.println("----------------------"+homeList);
					 mav.addObject("homeTeamRosterList", homeList);
					 }
				 }
				 
				 HubRequest hubReq3=new HubRequest();	 
				 hubReq3.setMsgType(31);
				 ModelMap map13=new ModelMap();			
				 map13.put("leagueCreatedBy", leagueCreatedBy);			 
				 map13.put("tournamentSchedulerId", tournamentSchedulerId);
				 map13.put("boardId", awayTeamId);
		
				 hubReq3.setRequestParam(map13);
				 String awayTeamRosterDetails=cricketSocialRestTemplateService.userRegistration1(hubReq3);	
				 if(awayTeamRosterDetails != null){
					 HubResponse hubResponse= gson.fromJson(awayTeamRosterDetails, HubResponse.class);
					 System.out.println("roster Details---12121"+hubResponse.getResults().getRosterDetails().size());
					 if(hubResponse.getResults().getRosterDetails().size() > 0){
						 JSONArray awayList = new JSONArray(hubResponse.getResults().getRosterDetails().get(0).getRosterUserMapList());	 
					 mav.addObject("awayTeamRosterList",awayList );
					 }
				 }
				 
				 
				 
				 mav.addObject("tournamentSchedulerid", tournamentSchedulerId);
				 
				
				 // get Umpire and Scrorer details
				 HubRequest hubReq4=new HubRequest();	 
				 hubReq4.setMsgType(250);
				 ModelMap map14=new ModelMap();			
				 map14.put("tournamentSchedulerId", tournamentSchedulerId);
		
				 hubReq4.setRequestParam(map14);
				 String umpireAndScorerDetails=cricketSocialRestTemplateService.userRegistration(hubReq4);
				 if(umpireAndScorerDetails != null){
					 HubResponse hubResponse = gson.fromJson(umpireAndScorerDetails, HubResponse.class);
					 mav.addObject("umpireAndScorerDetails", hubResponse.getResults().getUmpireAndScorerDetails());
					
					 if(hubResponse.getResults().getUmpireAndScorerDetails().getUmpireNamesList().size() > 0){
					 List<UmpireNameList> listOfUmpires = hubResponse.getResults().getUmpireAndScorerDetails().getUmpireNamesList();
					 List<UserSearchVO> umpireNameList = new ArrayList<UserSearchVO>();
					
					 for(int k=0; k<listOfUmpires.size(); k++){
						 String name = listOfUmpires.get(k).getUmpireName();
						 UserSearchVO user = new UserSearchVO();
						 user.setFullName(name);
						 user.setId(listOfUmpires.get(k).getUmpireId());
						 umpireNameList.add(user);
						 					
					 }
					 JSONArray arr1 = new JSONArray(umpireNameList);
					 mav.addObject("umpireNameList", arr1);
					 mav.addObject("winPoint",hubResponse.getResults().getUmpireAndScorerDetails().getWinPoints());
					 }else
					 {
						 JsonArray arr=new JsonArray();
						 mav.addObject("umpireNameList",arr);
						 mav.addObject("winPoint",hubResponse.getResults().getUmpireAndScorerDetails().getWinPoints());
					 }
					 
				 }
				 
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/EnterScoreSelectedMatchPublicProfile/boardId/{boardId}/{tournamentId}/{tournamentSchedulerId}/{homeTeamId}/{awayTeamId}/{matchDate}/{leagueCreatedBy}", method = RequestMethod.GET)
public ModelAndView enterScoreSelectedMatchPublicProfile(HttpServletRequest req, @PathVariable String boardId,@PathVariable String tournamentId,@PathVariable String tournamentSchedulerId, @PathVariable String homeTeamId,@PathVariable String awayTeamId,@PathVariable String matchDate,@PathVariable String leagueCreatedBy){
	ModelAndView mav = null;
	
	
try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("EnterScorePublicProfile");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 hubReq = new HubRequest(161);
					hubReq.setMsgType(161);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}
					

					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}	
					
					hubReq = new HubRequest();
					hubReq.setMsgType(213);
					ModelMap dismissalMap = new ModelMap();
					hubReq.setRequestParam(dismissalMap);
					String dismissalResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(dismissalResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(dismissalResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getDismissalTypeList() != null){
							mav.addObject("dismissalTypeList", hubRes.getResults().getDismissalTypeList());
							
						}
					}
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
				// response[i].homeTeamId+","+response[i].awayTeamId+","+response[i].tournamentSchedulerId+","+response[i].dateString;
				 mav.addObject("selectedTournamentId",tournamentId);
				 mav.addObject("selectedTeam", homeTeamId+","+awayTeamId+","+tournamentSchedulerId+","+matchDate);
				 mav.addObject("homeTeamId", homeTeamId);
				 mav.addObject("awayTeamId", awayTeamId);
				 
			//*************************************** Get Roaster Team Details ******************************//
				 HubRequest hubReq2=new HubRequest();	 
				 hubReq2.setMsgType(31);
				 ModelMap map12=new ModelMap();			
				 map12.put("leagueCreatedBy", leagueCreatedBy);			 
				 map12.put("tournamentSchedulerId", tournamentSchedulerId);
				 map12.put("boardId", homeTeamId);
		
				 hubReq2.setRequestParam(map12);
				 String homeTeamRosterDetails=cricketSocialRestTemplateService.userRegistration1(hubReq2);	
				 if(homeTeamRosterDetails != null){
					 HubResponse hubResponse= gson.fromJson(homeTeamRosterDetails, HubResponse.class);
					 System.out.println("roster Details---"+hubResponse.getResults().getRosterDetails().size());
					 if(hubResponse.getResults().getRosterDetails().size() > 0){
						 JSONArray homeList = new JSONArray(hubResponse.getResults().getRosterDetails().get(0).getRosterUserMapList());
						 System.out.println("----------------------"+homeList);
					 mav.addObject("homeTeamRosterList", homeList);
					 }
				 }
				 
				 HubRequest hubReq3=new HubRequest();	 
				 hubReq3.setMsgType(31);
				 ModelMap map13=new ModelMap();			
				 map13.put("leagueCreatedBy", leagueCreatedBy);			 
				 map13.put("tournamentSchedulerId", tournamentSchedulerId);
				 map13.put("boardId", awayTeamId);
		
				 hubReq3.setRequestParam(map13);
				 String awayTeamRosterDetails=cricketSocialRestTemplateService.userRegistration1(hubReq3);	
				 if(awayTeamRosterDetails != null){
					 HubResponse hubResponse= gson.fromJson(awayTeamRosterDetails, HubResponse.class);
					 System.out.println("roster Details---12121"+hubResponse.getResults().getRosterDetails().size());
					 if(hubResponse.getResults().getRosterDetails().size() > 0){
						 JSONArray awayList = new JSONArray(hubResponse.getResults().getRosterDetails().get(0).getRosterUserMapList());	 
					 mav.addObject("awayTeamRosterList",awayList );
					 }
				 }
				 
				 
				 
				 mav.addObject("tournamentSchedulerid", tournamentSchedulerId);
				 
				 
				 // get Umpire and Scrorer details
				 HubRequest hubReq4=new HubRequest();	 
				 hubReq4.setMsgType(250);
				 ModelMap map14=new ModelMap();			
				 map14.put("tournamentSchedulerId", tournamentSchedulerId);
		
				 hubReq4.setRequestParam(map14);
				 String umpireAndScorerDetails=cricketSocialRestTemplateService.userRegistration(hubReq4);
				 if(umpireAndScorerDetails != null){
					 HubResponse hubResponse = gson.fromJson(umpireAndScorerDetails, HubResponse.class);
					 mav.addObject("umpireAndScorerDetails", hubResponse.getResults().getUmpireAndScorerDetails());
					
					 if(hubResponse.getResults().getUmpireAndScorerDetails().getUmpireNamesList().size() > 0){
					 List<UmpireNameList> listOfUmpires = hubResponse.getResults().getUmpireAndScorerDetails().getUmpireNamesList();
					 List<UserSearchVO> umpireNameList = new ArrayList<UserSearchVO>();
					
					 for(int k=0; k<listOfUmpires.size(); k++){
						 String name = listOfUmpires.get(k).getUmpireName();
						 UserSearchVO user = new UserSearchVO();
						 user.setFullName(name);
						 user.setId(listOfUmpires.get(k).getUmpireId());
						 umpireNameList.add(user);
						 					
					 }
					 JSONArray arr1 = new JSONArray(umpireNameList);
					 mav.addObject("umpireNameList", arr1);
					 mav.addObject("winPoint",hubResponse.getResults().getUmpireAndScorerDetails().getWinPoints());
					 }
					 
				 }
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;	
	
}


@RequestMapping(value="/BoardAchievements/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView boardAchievements(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("BoardAchievements");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 hubReq = new HubRequest(173);
					hubReq.setMsgType(173);
					
					ModelMap matchesMap= new ModelMap();
					matchesMap.put("boardId", boardId);
					matchesMap.put("startNode", 0);
					matchesMap.put("endNode", 10);
					hubReq.setRequestParam(matchesMap);
					
					String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(response != null){
						HubResponse hubRes = gson.fromJson(response, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() != null){
							mav.addObject("boardAchieveMents", hubRes.getResults().getBoardAchievements());
							if(hubRes.getResults().getBoardAchievements() != null){
							mav.addObject("completedMatchesList", hubRes.getResults().getBoardAchievements().getCompletedMatchesList());
							if(hubRes.getResults().getBoardAchievements().getCompletedMatchesList() != null){
								mav.addObject("completedMatchesListSize", hubRes.getResults().getBoardAchievements().getCompletedMatchesList().size());
							}else{
								mav.addObject("completedMatchesListSize",0);
							}
							
							}
							
							}
					}
				 
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						// final String context = req.getContextPath();
						// MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						// mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
			
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/getScheduleHomeAwayName", method=RequestMethod.POST)
public @ResponseBody List<TournamentScheduler> getScheduleHomeAwayName(@RequestBody Tournament tournament, HttpServletRequest req){
	List<TournamentScheduler> scheduleList = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(163);
			ModelMap map = new ModelMap();
			map.put("tournamentId", tournament.getTournamentId());
			map.put("scorerId", session.getAttribute("USRID"));
			map.put("createdBy", tournament.getCreatedBy());
			map.put("tournamentSchedulerId", tournament.getTournamentSchedulerId());
			//map.put("tournamentId", "2e3f1f13-1817-4d23-8779-344761545722");
			//map.put("scorerId","61c42856-f7a3-4f57-a58c-4e828764dd2f");
			hubReq.setRequestParam(map);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class );
				 if(hubRes != null && hubRes.getResults() != null){
					 scheduleList = hubRes.getResults().getTournamentScheduleList();
				 }else{
					 
				 }
				 
			 }else{
				 
			 }
			
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return scheduleList;
}

@RequestMapping(value="/loadMoreBoardAchievementsData", method=RequestMethod.POST)
public @ResponseBody List<CompletedMatches> loadMoreBoardAchievementsData(@RequestBody GameSchedule game){
	List<CompletedMatches> completedMatches = null;
	
	try{
		
		hubReq = new HubRequest(173);
		hubReq.setMsgType(173);

		ModelMap matchesMap= new ModelMap();
		matchesMap.put("boardId", game.getBoardId());
		matchesMap.put("startNode", game.getStartNode());
		matchesMap.put("endNode", game.getEndNode());
		matchesMap.put("filterByYear", game.getFilterByYear());
		hubReq.setRequestParam(matchesMap);

		String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
			HubResponse hubRes = GsonConverters.getGsonObject().fromJson(response, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() != null){
				
				if(hubRes.getResults().getBoardAchievements() != null){
					completedMatches = hubRes.getResults().getBoardAchievements().getCompletedMatchesList();
				}
				
				}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return completedMatches;

}


@RequestMapping(value="/loadMoreDisputeManagement", method=RequestMethod.POST)
public @ResponseBody List<CompletedMatches> loadMoreDisputeManagement(@RequestBody GameSchedule dispute)
{
	List<CompletedMatches> completedmatches = null;
	try{
		hubReq=new HubRequest(146);
		hubReq.setMsgType(146);
		ModelMap map=new ModelMap();
		map.put("boardId", dispute.getBoardId());
		map.put("endNode", dispute.getEndNode());
		hubReq.setRequestParam(map);
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response !=null)
		{
			HubResponse res=GsonConverters.getGsonObject().fromJson(response, HubResponse.class);
			if(res != null && res.getResults() != null)
			{
				if(res.getResults().getGameSchedule() != null)
				{
					completedmatches=res.getResults().getGameSchedule().getCompletedMatchesList();
				}
			}
	}
		
	}catch(Exception ex)
	{
		ex.printStackTrace();
	}
		return completedmatches;
}


@RequestMapping(value="/yearWiseMatches", method=RequestMethod.POST)
public @ResponseBody List<CompletedMatches> yearWiseMatches(@RequestBody GameSchedule gameData){
	List<CompletedMatches> completedMatches = null;
	
	try{
		hubReq = new HubRequest(173);
		hubReq.setMsgType(173);

		ModelMap matchesMap= new ModelMap();
		matchesMap.put("boardId", gameData.getBoardId());
		matchesMap.put("startNode", 0);
		matchesMap.put("endNode", 10);
		matchesMap.put("filterByYear", gameData.getFilterByYear());
		hubReq.setRequestParam(matchesMap);

		String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
			HubResponse hubRes = GsonConverters.getGsonObject().fromJson(response, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() != null){
				
				if(hubRes.getResults().getBoardAchievements() != null){
					System.out.println("size1=========>"+hubRes.getResults().getBoardAchievements().getCompletedMatchesList().size());
					completedMatches = hubRes.getResults().getBoardAchievements().getCompletedMatchesList();
				}
				
				}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return completedMatches;

}

@RequestMapping(value="/ContactUs", method = RequestMethod.GET)
public ModelAndView contactUs( HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("ContactUs");
			mav.addObject("response", "false");
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
			
				
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/insertContact", method=RequestMethod.POST)
public ModelAndView  insertContact(HttpServletRequest req){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		
		if(session != null){
			
			String name = req.getParameter("Name");
			String email = req.getParameter("Email");
			String contact = req.getParameter("Contact");
			String message = req.getParameter("Message");
			
			hubReq = new HubRequest();
			hubReq.setMsgType(172);
			ModelMap contactMap = new ModelMap();
			contactMap.put("name", name);
			contactMap.put("email", email);
			contactMap.put("contactNumber", contact);
			contactMap.put("message", message);
			hubReq.setRequestParam(contactMap);
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(response != null){
				HubResponse res = GsonConverters.getGsonObject().fromJson(response, HubResponse.class);
				if(res != null && res.getResults() != null){
					String returnResponse = res.getResults().getCreateContactUs();
					if(returnResponse.equalsIgnoreCase("created successfully")){
						mav = new ModelAndView("ContactUs");
						mav.addObject("response", "true");
					}else{
						mav = new ModelAndView("ContactUs");
						mav.addObject("response", "false");
					}
					
				}else{
					
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/enterScoreInsert", method = RequestMethod.POST)
public @ResponseBody String enterScoreInsert(@RequestBody ScoreBean scorer, HttpServletRequest req){
	String returnResponse = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(165);
			Map<String, String> myMap = new HashMap<String, String>();
			
			String dateString = scorer.getGameDate();

			System.out.println("date string :"+dateString);
			
			String[] spliteDOB = dateString.split("/");
			
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			 String convertedDate= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(convertedDate);
			
			String ids = scorer.getUmpireId();
			if(ids!= null){
			List<String> umpireIds = Arrays.asList(ids.split(","));
			
			
			
			int count = 1;
			
			for(String i : umpireIds){
				
				myMap.put("umpire_id_"+count, i);
				
				String h="{";
				
				for (Map.Entry<String, String> entry : myMap.entrySet())
				{
				    System.out.println("------------------------"+entry.getKey() + "/" + entry.getValue());
				   
				    
				    
				    String key = entry.getKey();
				    
				    String value = entry.getValue();
				    
				    String key1="'"+key+"'";
				    
				    String value1="'"+value+"'";
				    
					if(h.endsWith("{"))
					{
						  h=h+key1+":"+value1;
					}else{
						  h=h+","+key1+":"+value1;
					}

				}
				
				h=h+"}";
				// System.out.println("hhhhhhhhh-----------------------"+h);
				//add += "\"umpired_id_"+count+"\":"+"\""+i+"\"";
				
				//add += "\"umpired_id_"+count+"\":"+"\""+i+"\"";
				
				//add += "umpired_id_"+count+":"+i;
				
				 count++;
				
				
			}
			
			
			}
		
			System.out.println("-----------------scrore-------"+scorer.getFirstInnings().getExtrasList().size());
			System.out.println("-----------------scrore-------"+scorer.getFirstInnings().getFallowOfWickets().size());
			
			ScoreBean bean = new ScoreBean();
			bean.setAwayTeamCoach(scorer.getAwayTeamCoach());
			bean.setHomeTeamCoach(scorer.getHomeTeamCoach());
			bean.setMatchId(scorer.getMatchId());
			bean.setPlayerOfTheMatch(scorer.getPlayerOfTheMatch());
			bean.setWinTeamOvers(scorer.getWinTeamOvers());
			bean.setWinTeamPoints(scorer.getWinTeamPoints());
			bean.setWinTeamRuns(scorer.getWinTeamRuns());
			bean.setWinTeamWickets(scorer.getWinTeamWickets());
			bean.setLoseTeamOvers(scorer.getLoseTeamOvers());
			bean.setLoseTeamRuns(scorer.getLoseTeamRuns());
			bean.setLoseTeamPoints(scorer.getLoseTeamPoints());
			bean.setLoseTeamWickets(scorer.getLoseTeamWickets());
			bean.setNoOfOvers(scorer.getNoOfOvers());
			bean.setStatus(scorer.getStatus());
			bean.setFirstInnings(scorer.getFirstInnings());
			bean.setSecondInnings(scorer.getSecondInnings());
			bean.setUmpireList(myMap);
			bean.setGameType(scorer.getGameType());
			bean.setHomeTeamId(scorer.getHomeTeamId());
			bean.setAwayTeamId(scorer.getAwayTeamId());
			bean.setResult(scorer.getResult());
			bean.setGameDate(convertedDate);
			bean.setSecondInningsTotalRuns(scorer.getSecondInningsTotalRuns());
			bean.setFirstInningsTotalRuns(scorer.getFirstInningsTotalRuns());
			bean.setFirstInningsTeamId(scorer.getFirstInningsTeamId());
			bean.setSecondInningsTeamId(scorer.getSecondInningsTeamId());
			hubReq.setRequestParam(bean);
			
			String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(response != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(response, HubResponse.class);
				if(hubRes != null &&  hubRes.getResults() != null){
					returnResponse  = hubRes.getResults().getEnterScoreStatus();
				}else{
					returnResponse = "failure";
				}
				
			}
			
		}else{
			
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return returnResponse;
	
}



@RequestMapping(value="/CreateSchedulePublicProfile/boardId/{boardId}",method= RequestMethod.GET)
public ModelAndView CreateSchedulePublicProfile(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		mav = new ModelAndView("CreateSchedulePublicProfile");
		mav.addObject("boardId", boardId);
        UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
		  
		  GsonBuilder builder = new GsonBuilder();
		  Gson gson = builder.create();
		  
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
	 hubReq = new HubRequest(92);
	 hubReq.setMsgType(92);
	 ModelMap map = new ModelMap();
	 map.put("createdBy", boardId);
	 hubReq.setRequestParam(map);
	 
	 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(response != null){
		 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
		 if(hubRes != null && hubRes.getRequestStatus() != null){
			 
			 if(hubRes.getResults().getTournamentDetails() != null && hubRes.getResults().getTournamentDetails() != null){
			
				 if(hubRes.getResults().getTournamentDetails().size() != 0){
				 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
			     mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
				 }else{
					  mav.addObject("umpireCheck", 0);
				 }
			 }
		 }else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
		 }
	 }
	 
	    hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);

		hubReq.setRequestParam(model);
		String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(groundList !=  null){
			HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}
		hubReq = new HubRequest(191);
		hubReq.setMsgType(191);
		
		ModelMap mod= new ModelMap();
		mod.put("createdBy", boardId);
		hubReq.setRequestParam(mod);
		String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(tournamentListOfTheBoard !=  null){
			HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
				mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}
		
		/* hubReq = new HubRequest(95);
			hubReq.setMsgType(95);
			ModelMap mod= new ModelMap();
			mod.put("boardId", boardId);
			hubReq.setRequestParam(mod);
			String teamList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(teamList !=  null){
				HubResponse  hubRes = gson.fromJson(teamList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("teamList", hubRes.getResults().getTournamentList());

					System.out.println("list size-- :"+hubRes.getResults().getTournamentList().size());
				}
		 
			}	*/
		List<UmpireNameList> umpireList = new ArrayList<UmpireNameList>();
			hubReq = new HubRequest(223);
			hubReq.setMsgType(223);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					//System.out.println("scorer list size :"+ hubRes.getResults().getTournamentSchedulerList().get(0).getScorerNamesList().size());
					/*if(hubRes.getResults().getTournamentsList().size() != 0)
					{
						List<TournamentScheduler> list = hubRes.getResults().getTournamentsList();
						
						if(list.size() != 0){
							
							for(int i =0 ; i < list.size(); i++){
								Date date = list.get(i).getGameDate();
								DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
								String dateFor = df.format(date);
								
								mav.addObject("date", dateFor);
								System.out.println("date:"+dateFor);
								
									System.out.println("i size "+i);
									System.out.println("size :"+list.size());
								mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList());
								System.out.println("umpire Name : "+hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList().get(0).getUmpireName());
								
								
							}
					//mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(0).getUmpireNamesList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				
						}
						}*/
				}
		 
			}	
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
			
	}else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
	}
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}
@RequestMapping(value="/CreateSchedulePublicProfileLanding/boardId/{boardId}",method= RequestMethod.GET)
public ModelAndView CreateSchedulePublicProfileLanding(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		mav = new ModelAndView("CreateSchedulePublicProfileLanding");
		mav.addObject("boardId", boardId);
        UUID userId = (UUID) session.getAttribute("USRID");
        GsonBuilder builder = new GsonBuilder();
		  Gson gson = builder.create();
        
        hubReq = new HubRequest(266);
		hubReq.setMsgType(266);
		ModelMap m5 = new ModelMap();
		m5.put("createdBy", boardId);
		
		hubReq.setRequestParam(m5);
		String tournamentListforLanding = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(tournamentListforLanding !=  null){
			HubResponse  hubRes = gson.fromJson(tournamentListforLanding, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("tournamentListLanding", hubRes.getResults().getRecentScheduleList());
				
			}
		}
        
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
		  
		 
		  
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
	 hubReq = new HubRequest(92);
	 hubReq.setMsgType(92);
	 ModelMap map = new ModelMap();
	 map.put("createdBy", boardId);
	 hubReq.setRequestParam(map);
	 
	 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(response != null){
		 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
		 if(hubRes != null && hubRes.getRequestStatus() != null){
			 
			 if(hubRes.getResults().getTournamentDetails() != null && hubRes.getResults().getTournamentDetails() != null){
			
				 if(hubRes.getResults().getTournamentDetails().size() != 0){
				 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
			     mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
				 }else{
					  mav.addObject("umpireCheck", 0);
				 }
			 }
		 }else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
		 }
	 }
	 
	    hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);

		hubReq.setRequestParam(model);
		String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(groundList !=  null){
			HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}
		hubReq = new HubRequest(191);
		hubReq.setMsgType(191);
		
		ModelMap mod= new ModelMap();
		mod.put("createdBy", boardId);
		hubReq.setRequestParam(mod);
		String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(tournamentListOfTheBoard !=  null){
			HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
				mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}
		
		List<UmpireNameList> umpireList = new ArrayList<UmpireNameList>();
			hubReq = new HubRequest(223);
			hubReq.setMsgType(223);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
				}
		 
			}	
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
			
	}else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
	}
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/AmendSchedulePublicProfile/boardId/{boardId}",method= RequestMethod.GET)
public ModelAndView AmendSchedulePublicProfile(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		mav = new ModelAndView("AmendSchedulePublicProfile");
		mav.addObject("boardId", boardId);
        UUID userId = (UUID) session.getAttribute("USRID");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map1=new ModelMap();
		 map1.put("userId", userId);
		 map1.put("startNode", 0);
		 map1.put("endNode", 200);
		  hubReq.setRequestParam(map1);
		  
		  GsonBuilder builder = new GsonBuilder();
		  Gson gson = builder.create();
		  
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
	 hubReq = new HubRequest(92);
	 hubReq.setMsgType(92);
	 ModelMap map = new ModelMap();
	 map.put("createdBy", boardId);
	 hubReq.setRequestParam(map);
	 
	 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(response != null){
		 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
		 if(hubRes != null && hubRes.getRequestStatus() != null){
			 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
			 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
		 }else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
		 }
	 }
	 
	    hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", boardId);

		hubReq.setRequestParam(model);
		String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(groundList !=  null){
			HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults() !=  null){
				mav.addObject("groundList", hubRes.getResults().getGroundList());
				//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
			}
	 
		}	 
		
		/* hubReq = new HubRequest(95);
			hubReq.setMsgType(95);
			ModelMap mod= new ModelMap();
			mod.put("boardId", boardId);
			hubReq.setRequestParam(mod);
			String teamList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(teamList !=  null){
				HubResponse  hubRes = gson.fromJson(teamList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("teamList", hubRes.getResults().getTournamentList());

					System.out.println("list size-- :"+hubRes.getResults().getTournamentList().size());
				}
		 
			}	*/
		List<UmpireNameList> umpireList = new ArrayList<UmpireNameList>();
			hubReq = new HubRequest(223);
			hubReq.setMsgType(223);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					//System.out.println("scorer list size :"+ hubRes.getResults().getTournamentSchedulerList().get(0).getScorerNamesList().size());
					/*if(hubRes.getResults().getTournamentsList().size() != 0)
					{
						List<TournamentScheduler> list = hubRes.getResults().getTournamentsList();
						
						if(list.size() != 0){
							
							for(int i =0 ; i < list.size(); i++){
								Date date = list.get(i).getGameDate();
								DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
								String dateFor = df.format(date);
								
								mav.addObject("date", dateFor);
								System.out.println("date:"+dateFor);
								
									System.out.println("i size "+i);
									System.out.println("size :"+list.size());
								mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList());
								System.out.println("umpire Name : "+hubRes.getResults().getTournamentsList().get(i).getUmpireNamesList().get(0).getUmpireName());
								
								
							}
					//mav.addObject("umpireNameList", hubRes.getResults().getTournamentsList().get(0).getUmpireNamesList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				
						}
						}*/
				}
		 
			}	
			
			
			hubReq = new HubRequest();
			hubReq.setMsgType(176);
			ModelMap gameTypeMap = new ModelMap();
			hubReq.setRequestParam(gameTypeMap);
			String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(gameResponse != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					mav.addObject("gameTypeList", hubRes.getResults().getGameList());
					
				}
			}
			
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoardId", boardId);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	

			
			
			
	}else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
	}
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/editSchedulerPublicProfile/boardId/{boardId}/tournamentSchedulerId/{tournamentSchedulerId}/tournamentId/{tournamentId}",method=RequestMethod.GET)
public ModelAndView editSchedulerPublicProfile(HttpServletRequest req, @PathVariable String boardId, @PathVariable String tournamentSchedulerId,@PathVariable String tournamentId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			 hubReq = new HubRequest();
			 hubReq.setMsgType(109);
			 ModelMap map = new ModelMap();
			 map.put("tournamentSchedulerId", tournamentSchedulerId);
			 hubReq.setRequestParam(map);
			 
			 GsonBuilder builder  = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				 if(hubRes != null && hubRes.getResults() != null){
					 mav = new ModelAndView("EditSchedulerPublicProfile");
					 mav.addObject("boardId", boardId);
					 mav.addObject("schedulerDetails", hubRes.getResults().getTournamentSchelduleDetails().get(0));
					 mav.addObject("tournamentSchedulerId",  hubRes.getResults().getTournamentSchelduleDetails().get(0).getTournamentSchedulerId());
					 mav.addObject("umpireList", hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 JSONArray arr = new JSONArray(hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 mav.addObject("umpireListForPrePopulate", arr);
					 
					 List<UmpireNameList> listOfUmpires = hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList();
					 List<String> umpireIdList = new ArrayList<String>();
					 
					 System.out.println("size :"+listOfUmpires.size());
					 for(int i=0; i< listOfUmpires.size(); i++){
						 String id = listOfUmpires.get(i).getUmpireId();
						 umpireIdList.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("previousUmpireIds", umpireIdList);
					 
					 List<UserSearchVO> umpireNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr1 = new JSONArray();
					 for(int k=0; k<listOfUmpires.size(); k++){
						 String name = listOfUmpires.get(k).getUmpireName();
						 UserSearchVO user = new UserSearchVO();
						 user.setFullName(name);
						 user.setId(listOfUmpires.get(k).getUmpireId());
						 umpireNameList.add(user);
						 arr1 = new JSONArray(umpireNameList);
					 }
					 
					 mav.addObject("umpireNameList",arr1);
					 System.out.println("umpireNameList :"+arr1);

					 List<ScorerNameList> listOfScorers = hubRes.getResults().getTournamentSchelduleDetails().get(0).getScorerNamesList();
					 List<String> scorerIdList = new ArrayList<String>();
					 for(int i=0; i< listOfScorers.size(); i++){
						 String id = listOfScorers.get(i).getScorerId();
						 scorerIdList.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("previousScorerId", scorerIdList);
					 
					 List<UserSearchVO> scorerNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr2 = new JSONArray();
					 for(int j=0; j < listOfScorers.size(); j++){
						 UserSearchVO userSearch = new  UserSearchVO();
						 userSearch.setId(listOfScorers.get(j).getScorerId());
						 userSearch.setFullName(listOfScorers.get(j).getScorerName());
						 scorerNameList.add(userSearch);
						 arr2 = new JSONArray(scorerNameList);
						
					 }
					 
					 mav.addObject("scorerNameList",arr2);
					 System.out.println("scorerNameList :"+arr2);
					 
					 System.out.println("scorerId List :"+scorerIdList);
					 System.out.println("umpireList :"+umpireIdList);
					 Date date = hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate();
						DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
						String dateFor = df.format(date);
						System.out.println("df "+date);
						mav.addObject("dateEdit", dateFor);
						
						/*DateFormat df1 = new SimpleDateFormat("hh:mma");
						String time = df1.format(date);
						System.out.println("df "+time);
						mav.addObject("timeEdit", time);*/
						
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("M/d/YYYY hh:mm a");
						simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate());
						System.out.println("simple date format :"+simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
						mav.addObject("eventTime", simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
				 
				 }
			 }
			 
			 hubReq = new HubRequest(85);
				hubReq.setMsgType(85);
				
				ModelMap model= new ModelMap();
				model.put("boardId", boardId);
				hubReq.setRequestParam(model);
				String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(groundList !=  null){
					HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("groundList", hubRes.getResults().getGroundList());
						//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
					}
			 
				}	 
	 
					
				
				
			/*	hubReq = new HubRequest(223);
				hubReq.setMsgType(223);
				ModelMap m = new ModelMap();
				m.put("createdBy",boardId);
				hubReq.setRequestParam(m);
				String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(tournamentList !=  null){
					HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
						
					}
			 
				}
				*/
					hubReq = new HubRequest();
					hubReq.setMsgType(113);
					ModelMap map1 = new ModelMap();
					System.out.println("tournamentId *******************: "+tournamentId);
					if(tournamentId != null){
					map1.put("tournamentId",tournamentId);
					hubReq.setRequestParam(map1);
					System.out.println("hub REq param : "+hubReq.getRequestParam());
					String torunamentDetails = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(torunamentDetails != null){
						HubResponse hubRes = gson.fromJson(torunamentDetails, HubResponse.class);
						if(hubRes != null && hubRes.getRequestStatus() != null){
							mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails());
							mav.addObject("tournamentName", hubRes.getResults().getTournamentDetails().get(0).getTournamentName());
							mav.addObject("teamList", hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean());
							mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
							mav.addObject("tournamentId", hubRes.getResults().getTournamentDetails().get(0).getTournamentId());
							System.out.println("teamlistSize : "+hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean().size());
						}
					}
					}
					else{
						
					}
					
					
					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					
					

					//*************************** Getting Board info  ***************************************
								 HubRequest hubReq1=new HubRequest();
								 hubReq1.setMsgType(40);
								 ModelMap map11=new ModelMap();			
								 map11.put("userId", session.getAttribute("USRID"));			 
								 map11.put("boardId", boardId);
								 hubReq1.setRequestParam(map11);
								 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
								 if(strBoarddetail!=null)
								 {
									 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
									if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
									{
										 mav.addObject("BoardId", boardId);
										 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
										 final String context = req.getContextPath();
										 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
										 mav.addObject("LeaugeMenuList", menuList);				
									}
								 }	
								 hubReq= new HubRequest();
								 hubReq.setMsgType(41);
								 ModelMap map2=new ModelMap();
								 map2.put("userId", session.getAttribute("USRID"));
								 map2.put("startNode", 0);
								 map2.put("endNode", 200);
								  hubReq.setRequestParam(map2);

									 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
									 if(strBoardList!=null)
									 {
										 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
										 if(hubResponse!=null && hubResponse.getResults()!=null)
										 {
											 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
										 }
									 }
								 
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/DisputeManagementPublicProfile/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView DisputeManagementPublicProfile(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("DisputeManagementPublicProfile");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);							
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(146);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("endNode", 0);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
					 mav.addObject("completedMatchesListSize", hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					}
					else{
						 mav.addObject("completedMatchesListSize",0);
					}
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}
@RequestMapping(value="/insertScheduleDetailsFromPublic",method=RequestMethod.POST)
public ModelAndView insertScheduleDetailsPublicProfile(HttpServletRequest req, @ModelAttribute Scheduler scheduler){
	String response =  null;
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			 String boardId = scheduler.getCreatedBy();
			
			String dateString = scheduler.getGameDateStr();

			System.out.println("date string :"+dateString);
			
			/*String strpmtime=scheduler.getGameTime().replaceAll("PM", " PM");
			String strAmTime=strpmtime.replaceAll("AM", " AM");
			System.out.println("time ----------------> "+strAmTime);*/
			String strpmtime=scheduler.getGameTime().replaceAll("PM", "PM");
			String strAmTime=strpmtime.replaceAll("AM", "AM");
			//System.out.println("time ----------------> "+strAmTime);
		    String time[] = strAmTime.split(":");
			String hourString=time[0].trim();
			String timeString=time[1].trim();
			//System.out.println("first value-"+hourString+" second value "+timeString+" length-"+hourString.length());
			if(hourString.length() == 1){
				hourString = "0"+hourString;
				timeString = hourString+":"+timeString;
			}else{
				timeString = hourString+":"+timeString;
			}
			
			//event.setEventDateAndTime(DateUtil.getDatabaseDateString2UTC(event.getStrDate()+" "+strAmTime));					
			
			String convertedDate = DateUtil.getUTCDate1(dateString+" "+timeString,req.getParameter("timeZone"));
			
			System.out.println("final date : "+convertedDate);
			
			
			/*String[] spliteDOB = dateString.split("/");
			
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			 String convertedDate= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(convertedDate);*/
			
			Map<String, String> myMap = new HashMap<String, String>();
		
			String idList = scheduler.getScorerId();
			List<ScorerBean> scorerIdList = new ArrayList<ScorerBean>();
			System.out.println("id list :"+idList);
			List<String> scorerIds;
			if(idList.isEmpty()){
				scorerIds=null;
			}else{
			
			if(idList!= null){
			   scorerIds = Arrays.asList(idList.split(","));
				for(int i = 0; i<scorerIds.size(); i++){
					String scorerId = scorerIds.get(i);
					ScorerBean updatedId = new ScorerBean();
					updatedId.setScorerId(scorerId);
					System.out.println("id: "+scorerId);
				 
					scorerIdList.add(updatedId);
				System.out.println(scorerIdList);
				}

			}
			}
			
			
			String portalidList=scheduler.getPortalscorerId();
			List<ScorerBean> portalscoreridlist=new ArrayList<ScorerBean>();
			List<String> portalscorerids;
			if(portalidList.isEmpty())
			{
				portalscorerids=null;
			}else{
				if(portalidList != null)
				{
					portalscorerids=Arrays.asList(portalidList.split(","));
					for(int i=0;i<portalscorerids.size();i++)
					{
						String portalscorerid=portalscorerids.get(i);
						ScorerBean updatedId=new ScorerBean();
						updatedId.setScorerId(portalscorerid);
						portalscoreridlist.add(updatedId);
					}
				}
			}
			
			String ids = scheduler.getUserId();
			if(ids!= null){
			List<String> umpireIds = Arrays.asList(ids.split(","));
			
			int count = 1;
			
			for(String i : umpireIds){
				if(i.isEmpty()){
					
					myMap.put("umpire_id_"+count, "null");
					
					}else{
				myMap.put("umpire_id_"+count, i);
				
				String h="{";
				
				for (Map.Entry<String, String> entry : myMap.entrySet())
				{
				    System.out.println("------------------------"+entry.getKey() + "/" + entry.getValue());
				   
				    
				    
				    String key = entry.getKey();
				    
				    String value = entry.getValue();
				    
				    String key1="'"+key+"'";
				    
				    String value1="'"+value+"'";
				    
					if(h.endsWith("{"))
					{
						  h=h+key1+":"+value1;
					}else{
						  h=h+","+key1+":"+value1;
					}

				}
				
				h=h+"}";
			
				
				 count++;
					}
				
			}
			
			
			}
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			
			/*String strpmtime=scheduler.getGameTime().replaceAll("PM", " PM");
			String strAmTime=strpmtime.replaceAll("AM", " AM");
			System.out.println("time ----------------> "+strAmTime);*/
			
			hubReq = new HubRequest();
			hubReq.setMsgType(102);
			
           
			ModelMap map = new ModelMap();
			map.put("awayTeamId", scheduler.getAwayTeamId());
			map.put("homeTeamId", scheduler.getHomeTeamId());
			map.put("gameDateStr",convertedDate);
			map.put("groundId", scheduler.getGroundId());
			map.put("tournamentId", scheduler.getTournamentId());
			map.put("createdBy", scheduler.getCreatedBy());
			map.put("modifiedBy", scheduler.getCreatedBy());
			map.put("umpireList", myMap);
			map.put("status", "Upcoming");
			map.put("scorerNamesList", scorerIdList);
			if(portalscoreridlist !=null)
			{
				map.put("portalScorerList", portalscoreridlist);
			}
			map.put("gameId", scheduler.getGameId());
			map.put("gameTime", strAmTime);
			
			
			hubReq.setRequestParam(map);
			
			String schedulerResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(schedulerResponse != null){
				HubResponse hubRes = gson.fromJson(schedulerResponse, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null){
					
					mav = new ModelAndView("ScheduleListPublicProfile");
					mav.addObject("boardId", boardId);
					
						 hubReq = new HubRequest(104);
							hubReq.setMsgType(104);
							ModelMap m = new ModelMap();
							m.put("createdBy", boardId);
							m.put("previousNextFlag", "current");
							
							hubReq.setRequestParam(m);
							String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
							if(tournamentList !=  null){
								HubResponse  hubResponse = gson.fromJson(tournamentList, HubResponse.class);
								if(hubResponse !=  null && hubResponse.getResults() !=  null){
									mav.addObject("tournamentList", hubResponse.getResults().getTournamentSchedulerList());
									
									mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
									mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
									
									String endDate = hubResponse.getResults().getEndDateStr();

									String startDate = hubResponse.getResults().getStartDateStr();
									String[] spliteDOB1 = startDate.split("-");
									
									 String monthInEditProfile1 = spliteDOB1[0];
									 String dayInEditProfile1 = spliteDOB1[1];
									 String yearInEditProfile1 = spliteDOB1[2];
									
									 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
									
									
										mav.addObject("startDateSet", startDateSet);
									
									
									String[] spliteDOB123 = endDate.split("-");
									
									 String monthInEditProfile2 = spliteDOB123[0];
									 String dayInEditProfile2 = spliteDOB123[1];
									 String yearInEditProfile2 = spliteDOB123[2];
									 
									
									 String endDateSet= dayInEditProfile2+'/'+yearInEditProfile2+'/'+monthInEditProfile2;
									
									 mav.addObject("endDateSet", endDateSet);
									
									 
									 //mav=new ModelAndView("redirect:/ScheduleListPubProfWithEdit/boardId/"+boardId);
									 mav=new ModelAndView("redirect:/CreateSchedulePublicProfileLanding/boardId/"+boardId);
									 return mav;
									 
					
								}
				}
			}
			}
			//mav = new ModelAndView("CreateSchedule");
			//
	        UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
		
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				
				 
				/* hubReq = new HubRequest(85);
					hubReq.setMsgType(85);
					
					ModelMap model= new ModelMap();
					model.put("boardId", boardId);
					hubReq.setRequestParam(model);
					String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(groundList !=  null){
						HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null){
							mav.addObject("groundList", hubRes.getResults().getGroundList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}	 
					
					hubReq = new HubRequest(161);
					hubReq.setMsgType(161);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}
					
					
					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					*/
					
					//*************************** Getting Board info  ***************************************
					 HubRequest hubReq1=new HubRequest();
					 hubReq1.setMsgType(40);
					 ModelMap map11=new ModelMap();			
					 map11.put("userId", session.getAttribute("USRID"));			 
					 map11.put("boardId", boardId);
					 hubReq1.setRequestParam(map11);
					 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
					 if(strBoarddetail!=null)
					 {
						 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
						if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
						{
							 mav.addObject("BoardId", boardId);
							 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
							 final String context = req.getContextPath();
							 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
							 mav.addObject("LeaugeMenuList", menuList);				
						}
					 }	

					 /*hubReq = new HubRequest(92);
					 hubReq.setMsgType(92);
					 ModelMap map12 = new ModelMap();
					 map12.put("createdBy", boardId);
					 hubReq.setRequestParam(map12);
					 
					 String strresponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					 if(strresponse != null){
						 HubResponse hubRes = gson.fromJson(strresponse, HubResponse.class);
						 if(hubRes != null && hubRes.getRequestStatus() != null){
							 mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails().get(0));
							 mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
						 }else{
							 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Service Not Available");
						 }
					 }
					
						 
						hubReq = new HubRequest(223);
						hubReq.setMsgType(223);
						ModelMap m = new ModelMap();
						m.put("createdBy",boardId);
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
			
							}
						}*/
				
		}else{
			 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/BoardAchievementsPublicProfile/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView boardAchievementsPublicProfile(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("BoardAchievementsPublicProfile");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 hubReq = new HubRequest(173);
					hubReq.setMsgType(173);
					
					ModelMap matchesMap= new ModelMap();
					matchesMap.put("boardId", boardId);
					matchesMap.put("startNode", 0);
					matchesMap.put("endNode", 10);
					hubReq.setRequestParam(matchesMap);
					
					String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(response != null){
						HubResponse hubRes = gson.fromJson(response, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() != null){
							mav.addObject("boardAchieveMents", hubRes.getResults().getBoardAchievements());
							if(hubRes.getResults().getBoardAchievements() != null){
							mav.addObject("completedMatchesList", hubRes.getResults().getBoardAchievements().getCompletedMatchesList());
							if(hubRes.getResults().getBoardAchievements().getCompletedMatchesList() != null){
								mav.addObject("completedMatchesListSize", hubRes.getResults().getBoardAchievements().getCompletedMatchesList().size());
							}else{
								mav.addObject("completedMatchesListSize",0);
							}
							
							}
							
							}
					}
				 
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
			
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/EnterScorePublicProfile/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView EnterScorePublicProfile(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("EnterScorePublicProfile");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 hubReq = new HubRequest(161);
					hubReq.setMsgType(161);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}
					

					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}	
					
					hubReq = new HubRequest();
					hubReq.setMsgType(213);
					ModelMap dismissalMap = new ModelMap();
					hubReq.setRequestParam(dismissalMap);
					String dismissalResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(dismissalResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(dismissalResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getDismissalTypeList() != null){
							mav.addObject("dismissalTypeList", hubRes.getResults().getDismissalTypeList());
							
						}
					}
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
			
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}



@RequestMapping(value="/showScoreCardForInProgress/boardId/{boardId}/matchId/{matchId}", method = RequestMethod.GET)
public ModelAndView showScoreCardForInProgress(HttpServletRequest req, @PathVariable String boardId,@PathVariable String matchId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("ScoreCardInProgress");
		mav.addObject("boardId", boardId);
		
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 UUID ownerid=null;
		 UUID coownerid=null;
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));	
				 ownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				 String coownerresponse=hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId();
				 if(!(coownerresponse.equals(""))){
				 coownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId());
			}
				
			}
		 }
		 if((userId.equals(ownerid)) || userId.equals(coownerid))
		 {
			 session.removeAttribute("ScoreCardSession");
			 session.removeAttribute("ScoreCardBoardId");
			 session.removeAttribute("ScoreCardSessionMatchId");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(13);
			 ModelMap map3 = new ModelMap();
			 map3.put("matchId", matchId);
			 hubReq.setRequestParam(map3);
			 
			 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(returnResponse != null){
				 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
				 if(res != null && res.getResults() != null){
					mav.addObject("scoreCardList", res.getResults().getMatchResult());
					 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
						mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
						mav.addObject("DNBList", Util.listToStringConvertion(res.getResults().getFirstInnings().getDoNotBatList()));
						System.out.println("--- DNBList  -------------------------------- "+res.getResults().getFirstInnings().getDoNotBatList());
					mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
					mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
					mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
					mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
					mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
					mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
					

                    mav.addObject("firstInningsPowerPlayDetails", res.getResults().getFirstInnings().getCommentary().getPowerPlay());
				    mav.addObject("firstInningsCommentryDetails", res.getResults().getFirstInnings().getCommentary().getCommentary());
					mav.addObject("secondInningsPowerPlayDetails", res.getResults().getSecondInnings().getCommentary().getPowerPlay());
				    mav.addObject("secondInningsCommentryDetails", res.getResults().getSecondInnings().getCommentary().getCommentary());
				    if(res.getResults().getFirstInnings().getCommentary().getCommentary() != null){				
				    if(res.getResults().getFirstInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getFirstInnings().getCommentary().getPowerPlay().size() > 0){
										mav.addObject("FirstInningsCommentary","Yes");
				    				} 
				    }
				    if(res.getResults().getSecondInnings().getCommentary().getCommentary() != null){
					    if(res.getResults().getSecondInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getSecondInnings().getCommentary().getPowerPlay().size() > 0){
					    	 mav.addObject("SecondInningsCommentary", "Yes");
					    }
					 }
				    if(res.getResults().getMatchResult() == null ){
				    	mav.addObject("scoreCardListSize", 0);
				    }else{
				    	mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
				    }

					if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
						mav.addObject("firstInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBattingPlayer() == null){
						mav.addObject("SecondInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
					}
					if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
						mav.addObject("firstInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
						mav.addObject("SecondInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
					}
					
					
					
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			 
			 
			 /*hubReq = new HubRequest();
			 hubReq.setMsgType(11);
			 ModelMap matchMap = new ModelMap();
			 matchMap.put("tournamentSchedulerId", matchId);
			 matchMap.put("innings", "1");
			 hubReq.setRequestParam(matchMap);
			 
			 String summaryRes = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(summaryRes != null){
				 PlayerSummaryResponse playerRes = GsonConverters.getGsonObject().fromJson(summaryRes, PlayerSummaryResponse.class);
				 if(playerRes != null && playerRes.getResults() != null){
					 mav.addObject("overAllSummary", playerRes.getResults().getItemFound());
					 if(playerRes.getResults().getItemFound() != null){
						
						 mav.addObject("battingInfo", playerRes.getResults().getItemFound().getBattingInfo());			
						 mav.addObject("bowlingInfo",  playerRes.getResults().getItemFound().getBowlingInfo());				 
						 mav.addObject("runnerInfo",  playerRes.getResults().getItemFound().getRunnerInfo());	
						 
						 if(playerRes.getResults().getInningsSCore() != null){
							 
							mav.addObject("SecondInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getSecondInnings().getMap());
							mav.addObject("FirstInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getFirstInnings().getMap());
							 
						 }
						
						 
						 
					 }
					 
					
				 }
				 
			 }*/
			 
			 
			 
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 req.setAttribute("BoardId", boardId);
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
		
		 }else{
			 mav=new ModelAndView("redirect:/showScoreCardForInProgressPublicProfile/boardId/"+boardId+"/matchId/"+matchId);
		 }
			 
		}else{
			/* mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");*/
			session.setAttribute("ScoreCardSession","InprogressCard");
			session.setAttribute("ScoreCardBoardId", boardId);
			session.setAttribute("ScoreCardSessionMatchId", matchId);
			mav=new ModelAndView("redirect:/showScoreCardSessionOut/boardId/"+boardId+"/matchId/"+matchId);
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/showScoreCardPublicProfile/boardId/{boardId}/matchId/{matchId}", method = RequestMethod.GET)
public ModelAndView showScoreCardPublicProfile(HttpServletRequest req, @PathVariable String boardId,@PathVariable String matchId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("ScoreCardPublicProfile");
		mav.addObject("boardId", boardId);
		
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 UUID ownerid=null;
		 UUID coownerid=null;
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));	
				 ownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				 String coownerresponse=hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId();
				 if(!(coownerresponse.equals(""))){
				  coownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId());
			}
				
			}
		 }
		 if(!(userId.equals(ownerid)) || !(userId.equals(coownerid)))
		 {
			 session.removeAttribute("ScoreCardSession");
			 session.removeAttribute("ScoreCardBoardId");
			 session.removeAttribute("ScoreCardSessionMatchId");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(13);
			 ModelMap map3 = new ModelMap();
			 map3.put("matchId", matchId);
			 hubReq.setRequestParam(map3);
			 
			 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(returnResponse != null){
				 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
				 if(res != null && res.getResults() != null){
					//mav.addObject("scoreCardList", res.getResults());
					 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
						mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
					mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
					mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
					mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
					mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
					mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFollowOfWickets());
					mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFollowOfWickets());
					
					if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
						mav.addObject("firstInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBattingPlayer() == null){
						mav.addObject("SecondInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
					}
					if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
						mav.addObject("firstInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
						mav.addObject("SecondInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
					}
					
					
					
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }*/
			 

				hubReq= new HubRequest();
			 hubReq.setMsgType(243);
			 ModelMap scoremap=new ModelMap();
			 scoremap.put("matchId", matchId);		
			  hubReq.setRequestParam(scoremap);

				 String strscoremap=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strscoremap!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strscoremap, HubResponse.class);
					 if(hubResponse!=null)
					 {
						 System.out.println("hubResponse.getRequestStatus() ---> "+hubResponse.getRequestStatus());
						 if(hubResponse.getRequestStatus().equalsIgnoreCase("4")){
							System.out.println("manual enter"); 
							
							
							
							 hubReq = new HubRequest();
							 hubReq.setMsgType(242);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
								//	mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
								//	mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									mav.addObject("webPortalScoreCard", "Yes");
                                    mav.addObject("fallOfWicketsFirstInningsWebPortal", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInningsWebPortal", res.getResults().getSecondInnings().getFallOfWickets());
									String manOfTheMatch = "";
									if(res.getResults().getMatchResult().getManOfTheMatch() != null){
									if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
										for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
									
											if(i == 0){
												manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}else{
												manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}
										}
									}
									}
									System.out.println("----------player of the match ----------"+manOfTheMatch);
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							
							
						 }else{
							 System.out.println("scoring app");
							 
							 hubReq = new HubRequest();
							 hubReq.setMsgType(13);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									mav.addObject("firstInningsPowerPlayDetails", res.getResults().getFirstInnings().getCommentary().getPowerPlay());
									mav.addObject("firstInningsCommentryDetails", res.getResults().getFirstInnings().getCommentary().getCommentary());
									mav.addObject("secondInningsPowerPlayDetails", res.getResults().getSecondInnings().getCommentary().getPowerPlay());
									mav.addObject("secondInningsCommentryDetails", res.getResults().getSecondInnings().getCommentary().getCommentary());
									//mav.addObject("fallOfWicketsFirstInningsWebPortal", res.getResults().getFirstInnings().getFallOfWickets());
									//mav.addObject("fallOfWicketsSecondInningsWebPortal", res.getResults().getSecondInnings().getFallOfWickets());
								
									 if(res.getResults().getFirstInnings().getCommentary().getCommentary() != null){
										 if(res.getResults().getFirstInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getFirstInnings().getCommentary().getPowerPlay().size() > 0){
												mav.addObject("FirstInningsCommentary","Yes");
											} 
									 }
									 if(res.getResults().getSecondInnings().getCommentary().getCommentary() != null){	 
						              if(res.getResults().getSecondInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getSecondInnings().getCommentary().getPowerPlay().size() > 0){
						                    	mav.addObject("SecondInningsCommentary", "Yes");
						                     }
									 }
									String manOfTheMatch = "";
									
									
									if(res.getResults().getMatchResult().getManOfTheMatch() != null){
									
									if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
										for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
									
											if(i == 0){
												manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}else{
												manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}
										}
									}
									}
									System.out.println("----------player of the match ----------"+manOfTheMatch);
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							 
							 
						 }
					 }
				 }
			 
			 
			 
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(11);
			 ModelMap matchMap = new ModelMap();
			 matchMap.put("tournamentSchedulerId", matchId);
			 matchMap.put("innings", "1");
			 hubReq.setRequestParam(matchMap);
			 
			 String summaryRes = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(summaryRes != null){
				 PlayerSummaryResponse playerRes = GsonConverters.getGsonObject().fromJson(summaryRes, PlayerSummaryResponse.class);
				 if(playerRes != null && playerRes.getResults() != null){
					 mav.addObject("overAllSummary", playerRes.getResults().getItemFound());
					 if(playerRes.getResults().getItemFound() != null){
						
						 mav.addObject("battingInfo", playerRes.getResults().getItemFound().getBattingInfo());			
						 mav.addObject("bowlingInfo",  playerRes.getResults().getItemFound().getBowlingInfo());				 
						 mav.addObject("runnerInfo",  playerRes.getResults().getItemFound().getRunnerInfo());	
						 
						 if(playerRes.getResults().getInningsSCore() != null){
							 
							mav.addObject("SecondInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getSecondInnings().getMap());
							mav.addObject("FirstInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getFirstInnings().getMap());
							 
						 }
						
						 
						 
					 }
					 
					
				 }
				 
			 }*/
			 
			 
			 
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 req.setAttribute("BoardId", boardId);
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			
		 }else{mav=new ModelAndView("redirect:/showScoreCard/boardId/"+boardId+"/matchId/"+matchId);} 
		}else{
			/* mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");*/
			session.setAttribute("ScoreCardSession","CompletedCard");
			session.setAttribute("ScoreCardBoardId", boardId);
			session.setAttribute("ScoreCardSessionMatchId", matchId);
			mav=new ModelAndView("redirect:/showScoreCardSessionOut/boardId/"+boardId+"/matchId/"+matchId);
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/CancelTournament/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView cancelTournament(@PathVariable String boardId, HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			mav =  new ModelAndView("CancelTournament");
			mav.addObject("boardId", boardId);
			
			hubReq = new HubRequest(161);
			hubReq.setMsgType(161);
			
			ModelMap mod= new ModelMap();
			mod.put("createdBy", boardId);
			hubReq.setRequestParam(mod);
			String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentListOfTheBoard !=  null){
				HubResponse  hubRes = GsonConverters.getGsonObject().fromJson(tournamentListOfTheBoard, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
					mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				}
		 
			}
			
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			
			
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
	
		}
		else{
			 mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

//JITHIN CHANGED MAV TO SAME PAGE
@RequestMapping(value="/leagueTopBatsmanList", method=RequestMethod.POST)
public ModelAndView leagueTopBatsmanList(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				
				search.setAgainstTeamId(search.getHomeTeamId());
				//model= new ModelAndView("TopBatsman");
				model= new ModelAndView("TopBatsman");
				model.addObject("boardId", search.getBoardId());
				
				
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				
				 hubReq = new HubRequest();
				 hubReq.setMsgType(182);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= GsonConverters.getGsonObject().fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
						 {
							 model.addObject("TopBatsmanResponse", topBatsmanResponse.getResults().getTopBatsmanList());
							 search.setAgainstTeamId("");
							 search.setAgainTeamName("");
							 model.addObject("TopBatsManSearch", search);
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				

				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

//JITHIN CHANGED MAV TO SAME PAGE

@RequestMapping(value="/leagueTopBowlerList", method=RequestMethod.POST)
public ModelAndView leagueTopBowlerList(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				//model= new ModelAndView("TopBowler");
				search.setAgainstTeamId(search.getHomeTeamId());
				model= new ModelAndView("TopBowler");
				model.addObject("boardId", search.getBoardId());
				
				
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				 hubReq = new HubRequest();
				 hubReq.setMsgType(183);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= GsonConverters.getGsonObject().fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
						 {
							 model.addObject("TopBowlerResponse", topBatsmanResponse.getResults().getTopBowlersList());
							search.setAgainstTeamId("");
							search.setAgainTeamName("");
							 model.addObject("TopBowlerSearch", search);
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				

				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/leagueTopFiveWicketsList", method=RequestMethod.POST)
public ModelAndView leagueTopFiveWicketsList(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("fiveWicket");
				model.addObject("boardId", search.getBoardId());
				
				
				
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				 hubReq = new HubRequest();
				 hubReq.setMsgType(184);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 
				 String strfiveWicket=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strfiveWicket!=null)
					{
						 HubResponse fiveWicketResponse= GsonConverters.getGsonObject().fromJson(strfiveWicket, HubResponse.class);
						 if(fiveWicketResponse!=null && fiveWicketResponse.getResults()!=null && fiveWicketResponse.getResults().getFiveWicketsPlayerList()!=null)
						 {
							 model.addObject("fiveWicketResponse", fiveWicketResponse.getResults().getFiveWicketsPlayerList());
							 model.addObject("FiveWicketSearch", search);
						 }else{
							 
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				

				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}


@RequestMapping(value="/inviteBoardPage/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView inviteBoardPage(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			mav = new ModelAndView("InviteToBoard");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", session.getAttribute("USRID"));			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					
				}
			 }
		//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", session.getAttribute("USRID"));
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 req.setAttribute("BoardId", boardId);
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 
			
		}
		else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/inviteBuddyToBoardByMail", method=RequestMethod.POST)
@ResponseBody
public  Map<String,String> inviteBuddyToBoardByMail(HttpServletRequest request,@RequestBody SendInviteByMail sendInviteByMail) throws CSException{
    Map<String,String> emailResponse = null;
	
	try{
	HttpSession session=request.getSession(true);

	UUID userId=(UUID) session.getAttribute("USRID");
	String email=(String) session.getAttribute("USREMAIL");
	sendInviteByMail.setUserId(userId+"");
	sendInviteByMail.setEmailAddress(email);
	hubReq=new HubRequest(199);
	 hubReq.setMsgType(199);
	 
	hubReq.setRequestParam(sendInviteByMail);
	
	String response=cricketSocialRestTemplateService.userRegistration(hubReq);
	GsonBuilder builder = new GsonBuilder();
    Gson gson = builder.create();
    //ForgotPasswordResponse forgotPasswordResponse=gson.fromJson(response, ForgotPasswordResponse.class);
    
    MailInvitaionResponse response1=gson.fromJson(response, MailInvitaionResponse.class);
    
    emailResponse=response1.getResults();
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return emailResponse;
}

@RequestMapping(value="/GameSchedulePublicProfile/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView gameSchedulePublicProfile(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("GameSchedulePublicProfile");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		/* HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }
		 */
		
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);							
				
			}
		 }
		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }

			 //*********************************************************** Boad Fan check  ******************************************************
					 hubReq= new HubRequest();
					 hubReq.setMsgType(76);
					 ModelMap fanmap4=new ModelMap();
					 fanmap4.put("boardId",boardId);
					 fanmap4.put("userId", userId);						
					 hubReq.setRequestParam(fanmap4);
					 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
					 boolean buddyFan=false;
					 if(buddyFandeatil!=null)
					 {
						 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
						 if(buddyFanResponse!=null)
						 {
							 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
							 {
								 buddyFan=true;
							 }
						 }
						 
					 }
					// buddyFan=true;
					 System.out.println("board : "+buddyFan);
					 mav.addObject("BoardFanReq", buddyFan);
					 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(133);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("previousNextFlag","current");
			 map3.put("endNode", 10);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 
					 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
						mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						
						String endDate = hubResponse.getResults().getEndDateStr();

						String startDate = hubResponse.getResults().getStartDateStr();
						String[] spliteDOB1 = startDate.split("-");
						
						 String monthInEditProfile1 = spliteDOB1[0];
						 String dayInEditProfile1 = spliteDOB1[1];
						 String yearInEditProfile1 = spliteDOB1[2];
						
						 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
						
						
							mav.addObject("startDateSet", startDateSet);
						
						
						String[] spliteDOB = endDate.split("-");
						
						 String monthInEditProfile = spliteDOB[0];
						 String dayInEditProfile = spliteDOB[1];
						 String yearInEditProfile = spliteDOB[2];
						 
						
						 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
						
						 mav.addObject("endDateSet", endDateSet);
					 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
					 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
					 //System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					 //System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());

					 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
					 
					 if(hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 }else{
						 mav.addObject("upcomingMatchesListSize", 0);
					 }
					 if(hubResponse.getResults().getGameSchedule().getCompletedMatchesList() != null){
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						 mav.addObject("completedMatchesListSize",0);
					 }
					 
					 
					 if(hubResponse.getResults().getGameSchedule().getInprogressMatchesList() != null){
					 mav.addObject("inprogressMatchesListSize",hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size() ); 
				 }else{
					 mav.addObject("inprogressMatchesListSize",0);
				 }
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}
					 
@RequestMapping(value="/showScoreCardForInProgressPublicProfile/boardId/{boardId}/matchId/{matchId}", method = RequestMethod.GET)
public ModelAndView showScoreCardForInProgressPublicProfile(HttpServletRequest req, @PathVariable String boardId,@PathVariable String matchId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("ScoreCardForInProgressPublicProfile");
		mav.addObject("boardId", boardId);
		
		//*************************** Getting Board info  ***************************************
		/* HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
				
			}
		 }*/
		 
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 UUID ownerid=null;
		 UUID coownerid=null;
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 ownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				 String coownerresponse=hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId();
				 if(!(coownerresponse.equals(""))){
				  coownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCoOwnerId());
			}
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);							
				
			}
		 }
		 if(!(userId.equals(ownerid))  || !(userId.equals(coownerid)))
		 {
			 session.removeAttribute("ScoreCardSession");
			 session.removeAttribute("ScoreCardBoardId");
			 session.removeAttribute("ScoreCardSessionMatchId");
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(13);
			 ModelMap map3 = new ModelMap();
			 map3.put("matchId", matchId);
			 hubReq.setRequestParam(map3);
			 
			 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(returnResponse != null){
				 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
				 if(res != null && res.getResults() != null){
					//mav.addObject("scoreCardList", res.getResults());
					 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
						mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
					mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
					mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
					mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
					mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
					mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFollowOfWickets());
					mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFollowOfWickets());
					
					
					if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
						mav.addObject("firstInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBattingPlayer() == null){
						mav.addObject("SecondInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
					}
					if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
						mav.addObject("firstInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
						mav.addObject("SecondInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
					}
					
					
					
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }*/
			 

				hubReq= new HubRequest();
			 hubReq.setMsgType(243);
			 ModelMap scoremap=new ModelMap();
			 scoremap.put("matchId", matchId);		
			  hubReq.setRequestParam(scoremap);

				 String strscoremap=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strscoremap!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strscoremap, HubResponse.class);
					 if(hubResponse!=null)
					 {
						 System.out.println("hubResponse.getRequestStatus() ---> "+hubResponse.getRequestStatus());
						 if(hubResponse.getRequestStatus().equalsIgnoreCase("4")){
							System.out.println("manual enter"); 
							
							
							 hubReq = new HubRequest();
							 hubReq.setMsgType(242);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									
									mav.addObject("firstInningsPowerPlayDetails", res.getResults().getFirstInnings().getCommentary().getPowerPlay());
									mav.addObject("firstInningsCommentryDetails", res.getResults().getFirstInnings().getCommentary().getCommentary());
									mav.addObject("secondInningsPowerPlayDetails", res.getResults().getSecondInnings().getCommentary().getPowerPlay());
									mav.addObject("secondInningsCommentryDetails", res.getResults().getSecondInnings().getCommentary().getCommentary());
									
									   if(res.getResults().getFirstInnings().getCommentary() != null){
									   if(res.getResults().getFirstInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getFirstInnings().getCommentary().getPowerPlay().size() > 0){
											mav.addObject("FirstInningsCommentary","Yes");
										} 
									   }
					    
						if(res.getResults().getSecondInnings().getCommentary() != null){			   
					      if(res.getResults().getSecondInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getSecondInnings().getCommentary().getPowerPlay().size() > 0){
					    	 mav.addObject("SecondInningsCommentary", "Yes");
					      }
						}
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							
							
						 }else{
							 System.out.println("scoring app");
							 
							 hubReq = new HubRequest();
							 hubReq.setMsgType(13);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									
									mav.addObject("firstInningsPowerPlayDetails", res.getResults().getFirstInnings().getCommentary().getPowerPlay());
									mav.addObject("firstInningsCommentryDetails", res.getResults().getFirstInnings().getCommentary().getCommentary());
									mav.addObject("secondInningsPowerPlayDetails", res.getResults().getSecondInnings().getCommentary().getPowerPlay());
									mav.addObject("secondInningsCommentryDetails", res.getResults().getSecondInnings().getCommentary().getCommentary());
									
									   if(res.getResults().getFirstInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getFirstInnings().getCommentary().getPowerPlay().size() > 0){
											mav.addObject("FirstInningsCommentary","Yes");
										} 
					    
					    /*if(res.getResults().getSecondInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getSecondInnings().getCommentary().getPowerPlay().size() > 0){
					    	 mav.addObject("SecondInningsCommentary", "Yes");
					    }*/
									   if(res.getResults().getMatchResult() == null ){
											mav.addObject("scoreCardListSize", 0);
										}else{
											mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
										}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							 
							 
						 }
					 }
				 }
			 
			 
			 
			 
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(11);
			 ModelMap matchMap = new ModelMap();
			 matchMap.put("tournamentSchedulerId", matchId);
			 matchMap.put("innings", "1");
			 hubReq.setRequestParam(matchMap);
			 
			 String summaryRes = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(summaryRes != null){
				 PlayerSummaryResponse playerRes = GsonConverters.getGsonObject().fromJson(summaryRes, PlayerSummaryResponse.class);
				 if(playerRes != null && playerRes.getResults() != null){
					 mav.addObject("overAllSummary", playerRes.getResults().getItemFound());
					 if(playerRes.getResults().getItemFound() != null){
						
						 mav.addObject("battingInfo", playerRes.getResults().getItemFound().getBattingInfo());			
						 mav.addObject("bowlingInfo",  playerRes.getResults().getItemFound().getBowlingInfo());				 
						 mav.addObject("runnerInfo",  playerRes.getResults().getItemFound().getRunnerInfo());	
						 
						 if(playerRes.getResults().getInningsSCore() != null){
							 
							mav.addObject("SecondInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getSecondInnings().getMap());
							mav.addObject("FirstInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getFirstInnings().getMap());
							 
						 }
						
						 
						 
					 }
					 
					
				 }
				 
			 }
			 
			 */
			 
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 req.setAttribute("BoardId", boardId);
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			
		 }else{
			 mav=new ModelAndView("redirect:/showScoreCardForInProgress/boardId/"+boardId+"/matchId/"+matchId);
		 } 
		}else{
			/* mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");*/
			session.setAttribute("ScoreCardSession","InprogressCard");
			session.setAttribute("ScoreCardBoardId", boardId);
			session.setAttribute("ScoreCardSessionMatchId", matchId);
			mav=new ModelAndView("redirect:/showScoreCardSessionOut/boardId/"+boardId+"/matchId/"+matchId);
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/filterScheduleFunctionPublicProfie", method = RequestMethod.POST)
public ModelAndView filterScheduleFunctionPublicProfile(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("GameSchedulePublicProfile");
		mav.addObject("boardId", gs.getBoardId());
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", gs.getBoardId());
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoardId", gs.getBoardId());
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);							
				
			}
		 }
		 
		 
		
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		
			 String tournamentId = req.getParameter("tournamentHiddenId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			 
			 System.out.println("tournamentId :"+tournamentId+" fromDate :"+fromDate+" ToDate :"+toDate);
			 
			 String fromDateString = null;
			 
			 if(fromDate != null && fromDate != ""){
			 String[] spliteDOB = fromDate.split("/");
				
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(fromDateString);
			 }
			 
			 
			 String toDateString = null;
			 if(toDate != null && toDate != ""){
			 String[] spliteDOB1 = toDate.split("/");
				
			 String monthInEditProfile1 = spliteDOB1[0];
			 String dayInEditProfile1 = spliteDOB1[1];
			 String yearInEditProfile1 = spliteDOB1[2];
			 
			
			 toDateString = yearInEditProfile1+'-'+monthInEditProfile1+'-'+dayInEditProfile1;
			 System.out.println(toDateString);
			 }
			 if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId == null || tournamentId == ""){
				System.out.println("inside if");
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 //map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 
						 // System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }else if(tournamentId != null && tournamentId != "" && fromDateString == null || fromDateString == "" && toDateString == null || toDateString == ""){
				 
				 System.out.println("inside else if");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 
						 // System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				 
			 }else if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId != null && tournamentId != ""){
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					//	 System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }
			 else{
				 
				 System.out.println("inside else");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults() != null){
						 mav.addObject("dateString", hubResponse.getResults().getEndDateStr());
							mav.addObject("startDate", hubResponse.getResults().getStartDateStr());
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						 mav.addObject("inCompletedMatches", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList());
						 mav.addObject("inprogressMatchesList", hubResponse.getResults().getGameSchedule().getInprogressMatchesList());
						 
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 mav.addObject("inprogressMatchesListSize", hubResponse.getResults().getGameSchedule().getInprogressMatchesList().size());
					 if(hubResponse.getResults().getGameSchedule().getIncompleteMatchesList() != null){
							mav.addObject("inCompletedMatchesListSize", hubResponse.getResults().getGameSchedule().getIncompleteMatchesList().size());
						}else{
							mav.addObject("inCompletedMatchesListSize", 0);
						}
					 
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				
			 } 
			 
			 
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

			
@RequestMapping(value="/fivewicketsPublicProfile/{bid}", method=RequestMethod.GET)
public ModelAndView fivewicketsPublicProfile(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			final String context = request.getContextPath();
			model= new ModelAndView("fiveWicketPublicProfile");
			model.addObject("publicBoardId", bid);
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
					}
				 }
					 
				 
				/*HubRequest fiveWicket= new HubRequest();
				fiveWicket.setMsgType(114);
				 ModelMap mapfiveWicket=new ModelMap();	
				 mapfiveWicket.put("createdBy", bid);
				fiveWicket.setRequestParam(mapfiveWicket);
				String strfiveWicket=cricketSocialRestTemplateService.userRegistration(fiveWicket);
				if(fiveWicket!=null)
				{
					 HubResponse fiveWicketResponse= gson.fromJson(strfiveWicket, HubResponse.class);
					 if(fiveWicketResponse!=null && fiveWicketResponse.getResults()!=null && fiveWicketResponse.getResults().getFiveWicketsPlayerList()!=null)
					 {
						 model.addObject("fiveWicketResponse", fiveWicketResponse.getResults().getFiveWicketsPlayerList());
					 }else{
						 
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
			

				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",bid);
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
					
						 
						 hubReq= new HubRequest();
							hubReq.setMsgType(170);
							ModelMap yearsMap = new ModelMap();
							yearsMap.put("boardId", bid);
							yearsMap.put("startNode", 0);
							yearsMap.put("endNode", 10);
							hubReq.setRequestParam(yearsMap);
							String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
							String yearVal = null;
							
							
							if(strYears!=null)
							{
								HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
								if(response!=null && response.getResults()!=null && response.getResults() != null)
								{
									model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
									if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
										model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
										model.addObject("defaultload", "yes");
										yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
									}else{
										model.addObject("yearListSize",0);
									}
								}
							}
						 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(184);
				 ModelMap map = new ModelMap();
				 map.put("boardId", bid);
				 map.put("tournamentId","");
				 map.put("homeTeamId", "");
				 map.put("againstTeamId", "");
				 map.put("filterByYear", yearVal);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 hubReq.setRequestParam(map);
				 
				 String strfiveWicket=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strfiveWicket!=null)
					{
						 HubResponse fiveWicketResponse= gson.fromJson(strfiveWicket, HubResponse.class);
						 if(fiveWicketResponse!=null && fiveWicketResponse.getResults()!=null && fiveWicketResponse.getResults().getFiveWicketsPlayerList()!=null)
						 {
							 model.addObject("fiveWicketResponse", fiveWicketResponse.getResults().getFiveWicketsPlayerList());
						 }else{
							 
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/leagueTopFiveWicketsListPublicProfile", method=RequestMethod.POST)
public ModelAndView leagueTopFiveWicketsListPublicProfile(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				model= new ModelAndView("fiveWicketPublicProfile");
				model.addObject("publicBoardId", search.getBoardId());
				
				
				
				
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				
				
				 hubReq = new HubRequest();
				 hubReq.setMsgType(184);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 
				 String strfiveWicket=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strfiveWicket!=null)
					{
						 HubResponse fiveWicketResponse= GsonConverters.getGsonObject().fromJson(strfiveWicket, HubResponse.class);
						 if(fiveWicketResponse!=null && fiveWicketResponse.getResults()!=null && fiveWicketResponse.getResults().getFiveWicketsPlayerList()!=null)
						 {
							 model.addObject("fiveWicketResponse", fiveWicketResponse.getResults().getFiveWicketsPlayerList());
							 model.addObject("FiveWicketSearch",search);
						 }else{
							 
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				

				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						final String context = request.getContextPath();
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/topbatsmanPublicProfile/{bid}", method=RequestMethod.GET)
public ModelAndView topbatsmanPublicProfile(@PathVariable String bid , HttpServletRequest request)
{

	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			final String context = request.getContextPath();
			model= new ModelAndView("TopBatsmanPublicProfile");
			model.addObject("publicboardId", bid);
			
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);					
						
					}
				 }
				 /*{
					 "msgType":107,
					 "requestParam": {

					  "createdBy":"25434436-6e27-4fbb-b311-d2419e230165"
					  
					  
					 }
					 }*/			 
				 
				/*HubRequest topBatsman= new HubRequest();
				topBatsman.setMsgType(115);
				 ModelMap maptopBatsman=new ModelMap();	
				 maptopBatsman.put("boardId", bid);
				 topBatsman.setRequestParam(maptopBatsman);
				String strtopBatsman=cricketSocialRestTemplateService.userRegistration(topBatsman);
				if(strtopBatsman!=null)
				{
					 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
					 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
					 {
						 model.addObject("TopBatsmanResponse", topBatsmanResponse.getResults().getTopBatsmanList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
			 
				 hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("boardId", bid);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					String yearVal = null;
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
								model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								model.addObject("defaultload", "yes");
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								model.addObject("yearListSize",0);
							}
						}
					}
				 
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(182);
				 ModelMap map = new ModelMap();
				 map.put("boardId", bid);
				 map.put("tournamentId","");
				 map.put("homeTeamId", "");
				 map.put("againstTeamId", "");
				 map.put("filterByYear", yearVal);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 hubReq.setRequestParam(map);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
						 {
							 model.addObject("TopBatsmanResponse", topBatsmanResponse.getResults().getTopBatsmanList());
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				 

					 //*********************************************************** Boad Fan check  ******************************************************
							 hubReq= new HubRequest();
							 hubReq.setMsgType(76);
							 ModelMap fanmap4=new ModelMap();
							 fanmap4.put("boardId",bid);
							 fanmap4.put("userId", userId);						
							 hubReq.setRequestParam(fanmap4);
							 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
							 boolean buddyFan=false;
							 if(buddyFandeatil!=null)
							 {
								 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
								 if(buddyFanResponse!=null)
								 {
									 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
									 {
										 buddyFan=true;
									 }
								 }
								 
							 }
							// buddyFan=true;
							 System.out.println("board : "+buddyFan);
							 model.addObject("BoardFanReq", buddyFan);
							 
							 
							
				 
				 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;

}

//JITHIN CHANGED MAV TO SAME PAGE
@RequestMapping(value="/leagueTopBatsmanListPublicProfile", method=RequestMethod.POST)
public ModelAndView leagueTopBatsmanListPublicProfile(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				//model= new ModelAndView("TopBatsmanPublicProfile");
				model= new ModelAndView("TopBatsmanPublicProfile");
				model.addObject("publicboardId", search.getBoardId());
				
				search.setAgainstTeamId(search.getHomeTeamId());
				
				
				
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				 hubReq = new HubRequest();
				 hubReq.setMsgType(182);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= GsonConverters.getGsonObject().fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBatsmanList()!=null)
						 {
							 model.addObject("TopBatsmanResponse", topBatsmanResponse.getResults().getTopBatsmanList());
							 model.addObject("TopBatsManSearch", search);
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				

				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						final String context = request.getContextPath();
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/topbowlerPublicProfile/{bid}", method=RequestMethod.GET)
public ModelAndView topbowlerPublicProfile(@PathVariable String bid , HttpServletRequest request)
{

	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
			final String context = request.getContextPath();
			model= new ModelAndView("TopBowlerPublicProfile");
			model.addObject("publicboardId", bid);
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 System.out.println("cpmt----------> "+context);
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), userId+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
					
						
					}
				 }
				 /*{
					 "msgType":107,
					 "requestParam": {

					  "createdBy":"25434436-6e27-4fbb-b311-d2419e230165"
					  
					  
					 }
					 }*/			 
				 
				/*HubRequest topBatsman= new HubRequest();
				topBatsman.setMsgType(116);
				 ModelMap maptopBatsman=new ModelMap();	
				 maptopBatsman.put("boardId", bid);
				 topBatsman.setRequestParam(maptopBatsman);
				String strtopBatsman=cricketSocialRestTemplateService.userRegistration(topBatsman);
				if(strtopBatsman!=null)
				{
					 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
					 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
					 {
						 model.addObject("TopBowlerResponse", topBatsmanResponse.getResults().getTopBowlersList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
				 
				
				 hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("boardId", bid);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					String yearVal = null;
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
								model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								model.addObject("defaultload", "yes");
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								model.addObject("yearListSize",0);
							}
						}
					}
				 
				 
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(183);
				 ModelMap map = new ModelMap();
				 map.put("boardId", bid);
				 map.put("tournamentId","");
				 map.put("homeTeamId", "");
				 map.put("againstTeamId", "");
				 map.put("filterByYear", yearVal);
				 map.put("startNode", 0);
				 map.put("endNode", 500);
				 hubReq.setRequestParam(map);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= gson.fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
						 {
							 model.addObject("TopBowlerResponse", topBatsmanResponse.getResults().getTopBowlersList());
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				 

					 
					 //*********************************************************** Boad Fan check  ******************************************************
							 hubReq= new HubRequest();
							 hubReq.setMsgType(76);
							 ModelMap fanmap4=new ModelMap();
							 fanmap4.put("boardId",bid);
							 fanmap4.put("userId", userId);						
							 hubReq.setRequestParam(fanmap4);
							 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
							 boolean buddyFan=false;
							 if(buddyFandeatil!=null)
							 {
								 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
								 if(buddyFanResponse!=null)
								 {
									 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
									 {
										 buddyFan=true;
									 }
								 }
								 
							 }
							// buddyFan=true;
							 System.out.println("board : "+buddyFan);
							 model.addObject("BoardFanReq", buddyFan);
							 
							 
					
					
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;

}


//JITHIN CHANGED MAV TO SAME PAGE
@RequestMapping(value="/leagueTopBowlerListPublicProfile", method=RequestMethod.POST)
public ModelAndView leagueTopBowlerListPublicProfile(CenturiesSerach search , HttpServletRequest request)
{
	ModelAndView model= null;
	try{
			HttpSession session = request.getSession(true);	
			if(session!=null && session.getAttribute("USRID")!=null)
			{
				UUID  userId = (UUID) session.getAttribute("USRID");
				//model= new ModelAndView("TopBowlerPublicProfile");
				search.setAgainstTeamId(search.getHomeTeamId());
				model= new ModelAndView("TopBowlerPublicProfile");
				model.addObject("publicboardId", search.getBoardId());
				
				
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", search.getBoardId());
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							model.addObject("yearListSize",0);
						}
					}
				}
				
				
				
				
				
				 hubReq = new HubRequest();
				 hubReq.setMsgType(183);
				 search.setStartNode(0);
				 search.setEndNode(500);
				 hubReq.setRequestParam(search);
				 
				 String strtopBatsman=cricketSocialRestTemplateService.userRegistration(hubReq);
					if(strtopBatsman!=null)
					{
						 HubResponse topBatsmanResponse= GsonConverters.getGsonObject().fromJson(strtopBatsman, HubResponse.class);
						 if(topBatsmanResponse!=null && topBatsmanResponse.getResults()!=null && topBatsmanResponse.getResults().getTopBowlersList()!=null)
						 {
							 model.addObject("TopBowlerResponse", topBatsmanResponse.getResults().getTopBowlersList());
							 search.setAgainstTeamId("");
								search.setAgainTeamName("");
							 model.addObject("TopBowlerSearch", search);
						 }
					}else{
						model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					}
				 
				

				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", search.getBoardId());
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						final String context = request.getContextPath();
						model.addObject("BoardId", search.getBoardId());
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	

						
					}
				 }
			//********************************** Getting User Board List  *******************************************************	 
				 hubReq=new HubRequest(41);
				 hubReq.setMsgType(41);
				 ModelMap map3=new ModelMap();
				 map3.put("userId", userId);
				 map3.put("startNode", 0);
				 map3.put("endNode", 200);
				  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }else{
						// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
					 
				 }
				 
			
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}


@RequestMapping(value="/topUmpirePublicProfile/{bid}", method=RequestMethod.GET)
public ModelAndView topUmpirePublicProfile(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
			final String context = request.getContextPath();
			model= new ModelAndView("TopUmpiresPublicProfile");
			UUID userId = (UUID) session.getAttribute("USRID");
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
					
						
					}
				 }
				 		 
				 
				HubRequest topUmpire= new HubRequest();
				topUmpire.setMsgType(117);
				 ModelMap maptopUmpire=new ModelMap();	
				 maptopUmpire.put("boardId", bid);
				 topUmpire.setRequestParam(maptopUmpire);
				String strtopUmpire=cricketSocialRestTemplateService.userRegistration(topUmpire);
				if(strtopUmpire!=null)
				{
					 HubResponse topUmpireResponse= gson.fromJson(strtopUmpire, HubResponse.class);
					 if(topUmpireResponse!=null && topUmpireResponse.getResults()!=null && topUmpireResponse.getResults().getTopUmpireList()!=null)
					 {
						 model.addObject("TopUmpireResponse", topUmpireResponse.getResults().getTopUmpireList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
			 

				 
				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",bid);
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
						 
				
				
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}

@RequestMapping(value="/teamdetailsPublicProfile/{bid}", method=RequestMethod.GET)
public ModelAndView teamdetailsPublicProfile(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
			final String context = request.getContextPath();
			model= new ModelAndView("TeamDetailsPublicProfile");
			UUID userId = (UUID) session.getAttribute("USRID");
			
			//********************************** Getting User Board List  *******************************************************	 
			
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
				
						
					}
				 }
				 
				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",bid);
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
						 
				HubRequest teamdetails= new HubRequest();
				teamdetails.setMsgType(119);
				 ModelMap mapteamdetails=new ModelMap();	
				 mapteamdetails.put("boardId", bid);
				 mapteamdetails.put("startNode", 0);
				 mapteamdetails.put("endNode", 500);
				 teamdetails.setRequestParam(mapteamdetails);
				String strteamdetails=cricketSocialRestTemplateService.userRegistration(teamdetails);
				if(strteamdetails!=null)
				{
					 HubResponse teamdetailsResponse= gson.fromJson(strteamdetails, HubResponse.class);
					 if(teamdetailsResponse!=null && teamdetailsResponse.getResults()!=null && teamdetailsResponse.getResults().getTeamDetailsList()!=null)
					 {
						 model.addObject("TeamdetailsResponse", teamdetailsResponse.getResults().getTeamDetailsList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}



@RequestMapping(value="/teamcontactspublic/boardId/{bid}", method=RequestMethod.GET)
public ModelAndView teamcontactspublic(@PathVariable String bid, HttpServletRequest request)
{


	ModelAndView model= null;
	try{
		HttpSession session=request.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
			final String context = request.getContextPath();
			model= new ModelAndView("Teamcontactspublicprofile");
			UUID userId = (UUID) session.getAttribute("USRID");
			
			//********************************** Getting User Board List  *******************************************************	 
			
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map1=new ModelMap();			
				 map1.put("userId", userId);			 
				 map1.put("boardId", bid);
				 hubReq1.setRequestParam(map1);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoarddetail!=null){
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
						
						model.addObject("BoardId", bid);
						 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 model.addObject("LeaugeMenuList", menuList);	
				
						
					}
				 }
				 
				 
				 Date date=new Date();
					SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy");
					model.addObject("PrintDate", sdf.format(date));
				 
				 
				 //*********************************************************** Boad Fan check  ******************************************************
						 hubReq= new HubRequest();
						 hubReq.setMsgType(76);
						 ModelMap fanmap4=new ModelMap();
						 fanmap4.put("boardId",bid);
						 fanmap4.put("userId", userId);						
						 hubReq.setRequestParam(fanmap4);
						 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
						 boolean buddyFan=false;
						 if(buddyFandeatil!=null)
						 {
							 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
							 if(buddyFanResponse!=null)
							 {
								 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
								 {
									 buddyFan=true;
								 }
							 }
							 
						 }
						// buddyFan=true;
						 System.out.println("board : "+buddyFan);
						 model.addObject("BoardFanReq", buddyFan);
						 
						 
				/*HubRequest teamdetails= new HubRequest();
				teamdetails.setMsgType(119);
				 ModelMap mapteamdetails=new ModelMap();	
				 mapteamdetails.put("boardId", bid);
				 mapteamdetails.put("startNode", 0);
				 mapteamdetails.put("endNode", 500);
				 teamdetails.setRequestParam(mapteamdetails);
				String strteamdetails=cricketSocialRestTemplateService.userRegistration(teamdetails);
				if(strteamdetails!=null)
				{
					 HubResponse teamdetailsResponse= gson.fromJson(strteamdetails, HubResponse.class);
					 if(teamdetailsResponse!=null && teamdetailsResponse.getResults()!=null && teamdetailsResponse.getResults().getTeamDetailsList()!=null)
					 {
						 model.addObject("TeamdetailsResponse", teamdetailsResponse.getResults().getTeamDetailsList());
					 }
				}else{
					model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				}*/
						 
						 HubRequest teamcontacts=new HubRequest(268);
						 teamcontacts.setMsgType(268);
						 ModelMap map=new ModelMap();
						 map.put("boardId", bid);
						 teamcontacts.setRequestParam(map);
						 String teamcontactresponse=cricketSocialRestTemplateService.userRegistration(teamcontacts);
						 if(teamcontactresponse != null)
						 {
							 HubResponse contactresponse=gson.fromJson(teamcontactresponse, HubResponse.class);
							 if(contactresponse!=null && contactresponse.getResults()!=null && contactresponse.getResults().getTeamContactDetailList()!=null)
							 {
								 model.addObject("Teamcontactslist", contactresponse.getResults().getTeamContactDetailList());
							 }
						 }else
						 {
							 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
						 }
						 
			 
		}else{
			model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;


}



@RequestMapping(value="/MyScorePublicProfile/{uid}", method=RequestMethod.GET)
public ModelAndView myScorePublicProfile(HttpServletRequest request,@PathVariable String uid)throws CSException
{
	ModelAndView model=null;
	HttpSession session=request.getSession(true);		
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		UUID userId = (UUID) session.getAttribute("USRID");			
		model= new ModelAndView("MyScorePublicProfile");
		
			hubReq=new HubRequest(13);
			 hubReq.setMsgType(13);		
			UserProfile userProfile= new UserProfile();
			UUID userIdUUID = UUID.fromString(uid);
			
			userProfile.setUserId(userIdUUID);
			model.addObject("publicUserId", userIdUUID);
			 hubReq.setRequestParam(userProfile);
			 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("controller result -------------------> "+result ); 
			 LoginResponse profile = null;
			 if(result!=null)
			 {
				   profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
				  if(profile!=null && profile.getResults()!=null)
				  {
					  model.addObject("UserInfo", profile.getResults().getItemsFound()[0]);
				  }
			 }
			 
			
			 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
			 if(userProfile.getUserId()!=null)
			 {
				 String userIdString = userProfile.getUserId().toString();
				 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
				 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
				 playerInfo.setPlayer1(roldinfo);
			 }
			 model.addObject("SelectedPlayersInfo", playerInfo);
			 
	
			 /*hubReq=new HubRequest(14);
			 hubReq.setMsgType(14);
			 hubReq.setRequestParam("");
			 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("Get the role details  -------------------> "+result2 );
		 
			 
			// UserProfileRoleResponse role=gsonobj.fromJson(result2, UserProfileRoleResponse.class);
			  HubResponse role=GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
			  System.out.println("role sysout----------"+role);
			  
			 if(role.getResults()!=null)
			 {
				 model.addObject("RoleList", role.getResults().getRolesAndSubRoles().getRole());
				
				 model.addObject("SubCAT1", role.getResults().getRolesAndSubRoles().getSubroleLevelOne());
				 
									 
				 
				 model.addObject("SubCAT2",role.getResults().getRolesAndSubRoles().getSubroleLevelTwo());
				 
				
				 model.addObject("SubCAT3",role.getResults().getRolesAndSubRoles().getSubroleLevelThree());
				
					 
				 model.addObject("SubCAT4",role.getResults().getRolesAndSubRoles().getSubroleLevelFour());
			 }*/
			 
		
			List<UserRole> userRole = profile.getResults().getItemsFound()[0].getUserRoleMap();
			
			hubReq=new HubRequest();
			hubReq.setMsgType(145);		
			ModelMap map = new ModelMap();
			map.put("uid", userIdUUID);
			map.put("startNode", 0);
			map.put("endNode", 10);
			hubReq.setRequestParam(map);
			String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
			if(playerMatches!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
				if(response!=null && response.getResults()!=null)
				{
					model.addObject("UserMatchInfo", response.getResults().getSearchResponse());
				}
			}
			
			//for(int i=0 ; i< userRole.size(); i++){
				//String userRoleName = userRole.get(i).getRole();
				
				
				//if(userRoleName.equalsIgnoreCase("Player")){
			
			

			hubReq= new HubRequest();
			hubReq.setMsgType(170);
			ModelMap yearsMap = new ModelMap();
			yearsMap.put("uid", userIdUUID);
			yearsMap.put("startNode", 0);
			yearsMap.put("endNode", 10);
			hubReq.setRequestParam(yearsMap);
			String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
			String yearVal = null;
			
			
			if(strYears!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
					//yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);*/
					if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
						model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
						yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
					}else{
						model.addObject("yearListSize",0);
					}
				}
			}
			
			
			
				
					hubReq= new HubRequest();
					hubReq.setMsgType(155);
					ModelMap battingmap = new ModelMap();
					battingmap.put("uid", userIdUUID);
					battingmap.put("startNode", 0);
					battingmap.put("endNode", 10);
					battingmap.put("filterByYear",yearVal);
					hubReq.setRequestParam(battingmap);
					String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					if(strBattingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("battingPerformanceList", response.getResults().getUserBattingPerformanceList());
							if(response.getResults().getUserBattingPerformanceList() != null){
								model.addObject("battingPerformanceListSize",response.getResults().getUserBattingPerformanceList().size());
							}else{
								model.addObject("battingPerformanceListSize",0);
							}
						}
					}
					
					hubReq= new HubRequest();
					hubReq.setMsgType(147);
					ModelMap bowlingmap = new ModelMap();
					bowlingmap.put("uid", userIdUUID);
					bowlingmap.put("startNode", 0);
					bowlingmap.put("endNode", 10);
					bowlingmap.put("flag", "forMyScore");
					bowlingmap.put("filterByYear",yearVal);
					hubReq.setRequestParam(bowlingmap);
					String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				
					if(strBowlingResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("bowlingPerformanceList", response.getResults().getUserBowlingPerformanceList());
							if(response.getResults().getUserBowlingPerformanceList() != null){
								model.addObject("bowlingPerformanceListSize",response.getResults().getUserBowlingPerformanceList().size());
								System.out.println("The bowlingPerformanceListSize :"+response.getResults().getUserBowlingPerformanceList().size());
							}else{
								model.addObject("bowlingPerformanceListSize",0);
							}
						}
					}
					
					hubReq= new HubRequest();
					hubReq.setMsgType(148);
					ModelMap achievements = new ModelMap();
					achievements.put("uid", userIdUUID);
					achievements.put("startNode", 0);
					achievements.put("endNode", 500);
					achievements.put("filterByYear",yearVal);
					hubReq.setRequestParam(achievements);
					String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strAchievementsResponse!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("achievementsList", response.getResults().getUseronedaymatchsachivements());
							if(response.getResults().getUseronedaymatchsachivements() != null){
								model.addObject("achievementsListSize",response.getResults().getUseronedaymatchsachivements().size());
							}else{
								model.addObject("achievementsListSize",0);
							}
						}
					}
					
					/*
					hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("uid", userIdUUID);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							
						}
					}*/
					
					
					
				/*}else{
					model.addObject("battingPerformanceListSize",0);
					model.addObject("bowlingPerformanceListSize",0);
					model.addObject("achievementsListSize",0);
				}*/
				
			//}
			 
			 
			 
				
				
				
				
				hubReq= new HubRequest();
				 hubReq.setMsgType(41);
				 ModelMap map2=new ModelMap();
				 map2.put("userId", userId);
				 map2.put("startNode", 0);
				 map2.put("endNode", 200);
				  hubReq.setRequestParam(map2);

					 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
					 if(strBoardList!=null)
					 {
						 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
						 if(hubResponse!=null && hubResponse.getResults()!=null)
						 {
							 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
						 }
					 }
				
				
	}else{
		model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	return model;
}

@RequestMapping(value="/showScoreCardPlayerPublicView/matchId/{matchId}/uid/{uid}", method = RequestMethod.GET)
public ModelAndView showScoreCardOfPlayerPublicProfile(HttpServletRequest req,@PathVariable String matchId,@PathVariable String uid) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("ScoreCardForPlayerPublicProfile");
	
		
				hubReq=new HubRequest(13);
				 hubReq.setMsgType(13);		
				UserProfile userProfile= new UserProfile();
				
				UUID userUUID = UUID.fromString(uid);
				
				userProfile.setUserId(userUUID);
				mav.addObject("publicUserId", userUUID);
				
				 hubReq.setRequestParam(userProfile);
				 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
				 System.out.println("controller result -------------------> "+result ); 
				 if(result!=null)
				 {
					  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
					  if(profile!=null && profile.getResults()!=null)
					  {
						  mav.addObject("UserInfo", profile.getResults().getItemsFound()[0]);
					  }
				 }
				 
				 
				 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
				 if(userProfile.getUserId()!=null)
				 {
					 String userIdString = userProfile.getUserId().toString();
					 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
					 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
					 playerInfo.setPlayer1(roldinfo);
				 }
				 mav.addObject("SelectedPlayersInfo", playerInfo);
				 
					hubReq=new HubRequest();
					hubReq.setMsgType(145);		
					ModelMap map = new ModelMap();
					map.put("uid", userUUID);
					map.put("startNode", 0);
					map.put("endNode", 10);
					hubReq.setRequestParam(map);
					String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
					if(playerMatches!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
						if(response!=null && response.getResults()!=null)
						{
							mav.addObject("UserMatchInfo", response.getResults().getSearchResponse());
						}
					}
					
			
		//*************************** Getting Board info  ***************************************
		
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 

				hubReq= new HubRequest();
			 hubReq.setMsgType(243);
			 ModelMap scoremap=new ModelMap();
			 scoremap.put("matchId", matchId);		
			  hubReq.setRequestParam(scoremap);

				 String strscoremap=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strscoremap!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strscoremap, HubResponse.class);
					 if(hubResponse!=null)
					 {
						 System.out.println("hubResponse.getRequestStatus() ---> "+hubResponse.getRequestStatus());
						 if(hubResponse.getRequestStatus().equalsIgnoreCase("4")){
							System.out.println("manual enter"); 
							
							
							 hubReq = new HubRequest();
							 hubReq.setMsgType(242);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInningsWebPortal", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInningsWebPortal", res.getResults().getSecondInnings().getFallOfWickets());
									
									String manOfTheMatch = "";
									if(res.getResults().getMatchResult().getManOfTheMatch() !=null){
									if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
										for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
									
											if(i == 0){
												manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}else{
												manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}
										}
									}}
									System.out.println("----------player of the match ----------"+manOfTheMatch);
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							
							
						 }else{
							 System.out.println("scoring app");
							 
							 hubReq = new HubRequest();
							 hubReq.setMsgType(13);
							 ModelMap map3 = new ModelMap();
							 map3.put("matchId", matchId);
							// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
							 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
							 hubReq.setRequestParam(map3);
							  
							 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
							 
							 if(returnResponse != null){
								 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
								 if(res != null && res.getResults() != null){
									mav.addObject("scoreCardList", res.getResults().getMatchResult());
									 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
										mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
									mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
									mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
									mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
									mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
									mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
									mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
									
									
									String manOfTheMatch = "";
									if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
										for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
									
											if(i == 0){
												manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}else{
												manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
											}
										}
									}
									System.out.println("----------player of the match ----------"+manOfTheMatch);
									if(manOfTheMatch != ""){
									mav.addObject("PlayerOfTheMatch", manOfTheMatch);
									}
									
									if(res.getResults().getMatchResult() == null ){
										mav.addObject("scoreCardListSize", 0);
									}else{
										mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
									}

									if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
										mav.addObject("firstInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBattingPlayer() == null){
										mav.addObject("SecondInningsBattingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
									}
									if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
										mav.addObject("firstInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
									}
									if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
										mav.addObject("SecondInningsBowlingPlayerSize", 0);
									}else{
										mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
									}
									
								 }else{
									System.out.println("null condition"); 
								 }
							 }
							 else{
								 
							 }
							 
							 
						 }
					 }
				 }
			 
			 
			 
			 
			 /*
			 hubReq = new HubRequest();
			 hubReq.setMsgType(13);
			 ModelMap map3 = new ModelMap();
			 map3.put("matchId", matchId);
			 hubReq.setRequestParam(map3);
			 
			 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(returnResponse != null){
				 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
				 if(res != null && res.getResults() != null){
					//mav.addObject("scoreCardList", res.getResults());
					 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
						mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
					mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
					mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
					mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
					mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
					mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFollowOfWickets());
					mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFollowOfWickets());
					
					
					if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
						mav.addObject("firstInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBattingPlayer() == null){
						mav.addObject("SecondInningsBattingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
					}
					if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
						mav.addObject("firstInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
					}
					if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
						mav.addObject("SecondInningsBowlingPlayerSize", 0);
					}else{
						mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
					}
					
					
					
					
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			 */
			/* hubReq = new HubRequest();
			 hubReq.setMsgType(11);
			 ModelMap matchMap = new ModelMap();
			 matchMap.put("tournamentSchedulerId", matchId);
			 matchMap.put("innings", "1");
			 hubReq.setRequestParam(matchMap);
			 
			 String summaryRes = cricketSocialRestTemplateService.userRegistration1(hubReq);
			 
			 if(summaryRes != null){
				 PlayerSummaryResponse playerRes = GsonConverters.getGsonObject().fromJson(summaryRes, PlayerSummaryResponse.class);
				 if(playerRes != null && playerRes.getResults() != null){
					 mav.addObject("overAllSummary", playerRes.getResults().getItemFound());
					 if(playerRes.getResults().getItemFound() != null){
						
						 mav.addObject("battingInfo", playerRes.getResults().getItemFound().getBattingInfo());			
						 mav.addObject("bowlingInfo",  playerRes.getResults().getItemFound().getBowlingInfo());				 
						 mav.addObject("runnerInfo",  playerRes.getResults().getItemFound().getRunnerInfo());	
						 
						 if(playerRes.getResults().getInningsSCore() != null){
							 
							mav.addObject("SecondInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getSecondInnings().getMap());
							mav.addObject("FirstInningsTeamInfo", playerRes.getResults().getInningsSCore().getMap().getFirstInnings().getMap());
							 
						 }
						
						 
						 
					 }
					 
					
				 }
				 
			 }
			 */
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 

			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			
			 
		}else{
			 mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
		}
		 
		 
	 
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/Boardscore/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView boardScore(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("BoardScore");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("boardId", boardId);
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				String yearVal = null;
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						mav.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
							mav.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
							yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
						}else{
							mav.addObject("yearListSize",0);
						}
					}
				}
				 
				 
				 
				 	hubReq = new HubRequest(173);
					hubReq.setMsgType(173);
					
					ModelMap matchesMap= new ModelMap();
					matchesMap.put("boardId", boardId);
					matchesMap.put("startNode", 0);
					matchesMap.put("endNode", 10);
					matchesMap.put("filterByYear", yearVal);
					hubReq.setRequestParam(matchesMap);
					
					String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(response != null){
						HubResponse hubRes = gson.fromJson(response, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() != null){
							mav.addObject("boardAchieveMents", hubRes.getResults().getBoardAchievements());
							if(hubRes.getResults().getBoardAchievements() != null){
							mav.addObject("completedMatchesList", hubRes.getResults().getBoardAchievements().getCompletedMatchesList());
							if(hubRes.getResults().getBoardAchievements().getCompletedMatchesList() != null){
								mav.addObject("completedMatchesListSize", hubRes.getResults().getBoardAchievements().getCompletedMatchesList().size());
							}else{
								mav.addObject("completedMatchesListSize",0);
							}
							
							}
							
							}
					}
				 
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			
			
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/BoardscorePublicProfile/{boardId}", method = RequestMethod.GET)
public ModelAndView boardScorePublicProfile(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("BoardScorePublicProfile");
			mav.addObject("boardId", boardId);
		
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				 	hubReq= new HubRequest();
					hubReq.setMsgType(170);
					ModelMap yearsMap = new ModelMap();
					yearsMap.put("boardId", boardId);
					yearsMap.put("startNode", 0);
					yearsMap.put("endNode", 10);
					hubReq.setRequestParam(yearsMap);
					String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
					String yearVal = null;
					
					
					if(strYears!=null)
					{
						HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
						if(response!=null && response.getResults()!=null && response.getResults() != null)
						{
							mav.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
							/*if(response.getResults().getCreateUmpire().getYearslist() != null){
								mav.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								mav.addObject("yearListSize",0);
							}*/
							if(response.getResults().getCreateUmpire().getYearslist().size() != 0){
								mav.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
								yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
							}else{
								mav.addObject("yearListSize",0);
							}
						}
					}
				 
				 
				 
				 
				 
				 	hubReq = new HubRequest(173);
					hubReq.setMsgType(173);
					
					ModelMap matchesMap= new ModelMap();
					matchesMap.put("boardId", boardId);
					matchesMap.put("startNode", 0);
					matchesMap.put("endNode", 10);
					matchesMap.put("filterByYear", yearVal);
					hubReq.setRequestParam(matchesMap);
					
					String response  = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(response != null){
						HubResponse hubRes = gson.fromJson(response, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() != null){
							mav.addObject("boardAchieveMents", hubRes.getResults().getBoardAchievements());
							if(hubRes.getResults().getBoardAchievements() != null){
							mav.addObject("completedMatchesList", hubRes.getResults().getBoardAchievements().getCompletedMatchesList());
							if(hubRes.getResults().getBoardAchievements().getCompletedMatchesList() != null){
								mav.addObject("completedMatchesListSize", hubRes.getResults().getBoardAchievements().getCompletedMatchesList().size());
							}else{
								mav.addObject("completedMatchesListSize",0);
							}
							
							}
							
							}
					}
				 
				 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
				 hubReq= new HubRequest();
				 hubReq.setMsgType(76);
				 ModelMap map4=new ModelMap();
				 map4.put("boardId",boardId);
				 map4.put("userId", userId);						
				 hubReq.setRequestParam(map4);
				 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean buddyFan=false;
				 if(buddyFandeatil!=null)
				 {
					 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
					 if(buddyFanResponse!=null)
					 {
						 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
						 {
							 buddyFan=true;
						 }
					 }
					 
				 }
				// buddyFan=true;
				 System.out.println("board : "+buddyFan);
				 mav.addObject("BoardFanReq", buddyFan);
			
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}




@RequestMapping(value="/inviteToMergeAccount/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView inviteToMergeAccount(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			mav = new ModelAndView("InviteToMergerAccount");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", session.getAttribute("USRID"));			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					
				}
			 }
		//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", session.getAttribute("USRID"));
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
			//*******************************************************   Around you details	 *************************************************
			 hubReq=new HubRequest();
			 hubReq.setMsgType(77);
			 BoardSearchRequest searchReq= new BoardSearchRequest();
			 String userlocation=(String) session.getAttribute("USRLocation");

			 System.out.println("userlocation"+userlocation);
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMatchesAroundYouLatLongValue);
			 }
			
			 
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("Matches");
			 hubReq.setRequestParam(searchReq);
		    String matchesArroundYouList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse strMatchesArrounfYouResponse= GsonConverters.getGsonObject().fromJson(matchesArroundYouList, HubResponse.class); 
			
			 if(strMatchesArrounfYouResponse.getResults().getSearchResponse()!=null)
			 {
				 mav.addObject("MatchesArroundYou", strMatchesArrounfYouResponse.getResults().getSearchResponse().getTournamentScheduler());
			 }
			 
			 
			 hubReq=new HubRequest();
			 hubReq.setMsgType(22);
			 //session.setAttribute("USRLocation", userProfile.getLatLang());
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
					 System.out.println("user location setttt");
				}else{
					 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
					 System.out.println("user not getted ------------- default 1");
				}
			 }else{
				 searchReq.setLatlang(defaultLeagueBoardAroundYouLatLongValue);
				 System.out.println("user not getted ------------- default 2");
			 }
			
			 searchReq.setStartNode("0");
			 searchReq.setEndNode("4");
			 searchReq.setCategory("League");
			 hubReq.setRequestParam(searchReq);
		    String strboardlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strboardlist);
			 HubResponse strsearchResponse= GsonConverters.getGsonObject().fromJson(strboardlist, HubResponse.class); 
			 System.out.println("logitude : "+strsearchResponse.getResults().getSearchResponse());
			
			 if(strsearchResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("board list :---------->" +strsearchResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("BRDAroundYou", strsearchResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 searchReq.setCategory("Team");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultTeamBoardAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strTeamlist=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strTeamlist);
			 HubResponse strTeamResponse= GsonConverters.getGsonObject().fromJson(strTeamlist, HubResponse.class); 
			 System.out.println("logitude : "+strTeamResponse.getResults().getSearchResponse());
			 
			 if(strTeamResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("TEam list :---------->" +strTeamResponse.getResults().getSearchResponse().getBoardProfileList().size());
				 mav.addObject("TEAMAroundYou", strTeamResponse.getResults().getSearchResponse().getBoardProfileList());
			 }
			 
			 hubReq.setMsgType(23);
			 searchReq.setCategory("");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultBuddyAroundYouLatlongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strbuddyresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 System.out.println("board result : "+strbuddyresponse);
			 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(strbuddyresponse, HubResponse.class); 
			 System.out.println("userid : "+strTeamResponse.getResults().getSearchResponse());
			 if(buddyResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +buddyResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("BuddyAroundYou", buddyResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 req.setAttribute("BoardId", boardId);
			 hubReq.setMsgType(79);
			 searchReq.setCategory("Merchants");
			 //searchReq.setLatlang("17.3700,78.4800");
			 if(userlocation!=null)
			 {
				if(userlocation.length()>3)
				{
					 searchReq.setLatlang(userlocation);
				}else{
					 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
				}
			 }else{
				 searchReq.setLatlang(defaultMerchantAroundYouLatLongValue);
			 }
			 hubReq.setRequestParam(searchReq);
			 String strMerchandiseAroundYouresponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			 HubResponse merchandiseAroundYouResponse= GsonConverters.getGsonObject().fromJson(strMerchandiseAroundYouresponse, HubResponse.class); 
			 if(merchandiseAroundYouResponse.getResults().getSearchResponse()!=null)
			 {
				 System.out.println("user : list :---------->" +merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList().size());
				 mav.addObject("Merchants", merchandiseAroundYouResponse.getResults().getSearchResponse().getUserList());
			 }
			 
			 
			
		}
		else{
			mav=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/inviteBuddyToMergeAccountByMail", method=RequestMethod.POST)
@ResponseBody
public  Map<String,String> inviteBuddyToMergeAccountByMail(HttpServletRequest request,@RequestBody SendInviteByMail sendInviteByMail) throws CSException{
    Map<String,String> emailResponse = null;
	
	try{
	HttpSession session=request.getSession(true);

	UUID userId=(UUID) session.getAttribute("USRID");
	String email=(String) session.getAttribute("USREMAIL");
	//sendInviteByMail.setUserId(userId+"");
	sendInviteByMail.setEmailAddress(email);
	hubReq=new HubRequest(193);
	 hubReq.setMsgType(193);
	 
	hubReq.setRequestParam(sendInviteByMail);
	
	String response=cricketSocialRestTemplateService.userRegistration(hubReq);
	GsonBuilder builder = new GsonBuilder();
    Gson gson = builder.create();
    //ForgotPasswordResponse forgotPasswordResponse=gson.fromJson(response, ForgotPasswordResponse.class);
    
    MailInvitaionResponse response1=gson.fromJson(response, MailInvitaionResponse.class);
    
    emailResponse=response1.getResults();
	
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return emailResponse;
}

@RequestMapping(value="/mergeLogin/{bid}",method=RequestMethod.GET)
public ModelAndView mergeLogin(HttpServletRequest request,@PathVariable String bid)
{
	ModelAndView model=null;
	try{
		String loginvalidation=(String) request.getParameter("loginvalidation");
		 //session.setAttribute("USRID", profile.getUserId());
		System.out.println("inside merge login board ids"+bid);
		System.out.println("loginvalidation is   "+loginvalidation);
		
		model=new ModelAndView("mergeLogin");
		model.addObject("boardId", bid);
    	model.addObject("LGIN", "Login");
    	if(loginvalidation!=null){
    		model.addObject("loginvalidation", loginvalidation);
    	}
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}


@RequestMapping(value="/mergeLoginValidate", method=RequestMethod.POST)
public ModelAndView mergeLoginValidate(HttpServletRequest request,UserProfile userProfile)
{
	UserProfile profile=null;
	ModelAndView model=null;
	try{
		System.out.println("useremailaddress : "+userProfile.getEmailAddress());
		System.out.println("password : -------> "+userProfile.getPassword());
		System.out.println("logitude :=-----------------> "+userProfile.getLatLang());
		System.out.println("Merge login board id "+userProfile.getBoardId());
		
		String boardId = userProfile.getBoardId();
		String u="{\"emailAddress\":\""+userProfile.getEmailAddress()+"\",\"password\":\""+userProfile.getPassword()+"\"}";
		hubReq=new HubRequest(6);
		 hubReq.setMsgType(6);			
		 userProfile.setLoginType("CricketSocial");
		 userProfile.setLoginTypeId("bc7d0685-a030-485b-832a-2b18dd193e0d");
		 hubReq.setRequestParam(userProfile);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("controller result -------------------> "+result );
		 
		 JSONObject json;
			GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		    LoginResponse he=gson.fromJson(result, LoginResponse.class);
		   // System.out.println("he.getResults().getLoginStatus() : "+he.getResults().getLoginStatus());
		  
		    if(he!= null && he.getResults() != null&&  he.getResults().getLoginStatus()!=null){
		    	  if(he.getResults().getLoginStatus().equalsIgnoreCase("Matched"))
				    {
				    	System.out.println("LOGIN SUCCESS");
				    	
				    	profile=he.getResults().getItemsFound()[0];
						  
					 
						 HttpSession session=request.getSession();
						 session.setAttribute("USRID", profile.getUserId());
						 session.setAttribute("USRFNA", profile.getFirstName());
						 session.setAttribute("USREMAIL", profile.getEmailAddress());			 
						// System.out.println("session id : "+session.getAttribute("USRID"));
						 session.setAttribute("USRIMG", profile.getUserImageUrl());
						 session.setAttribute("USRLocation", userProfile.getLatLang());
						
						 

			    		 String name2=profile.getFirstName();
						 if(profile.getLastName()!=null){
							 name2=name2+" "+profile.getLastName();
						 }
						 session.removeAttribute("USRLastName");
						 session.setAttribute("USRLastName", name2);
						 
						 System.out.println("user location----------------------------------------->"+session.getAttribute("USRLocation"));
						 if(profile.getDateOfBirth()!=null){
							 model= new ModelAndView("redirect:/mergeAccount/"+boardId);
							 
						 }else{
							 model= new ModelAndView("redirect:/mergeAccount/"+boardId);
						 }
						
				    }else{
				    	
				    	model=new ModelAndView("redirect:/mergeLogin/"+boardId+".htm?loginvalidation=Invalid Credentials");
				    	//model.addObject("loginvalidation", "Invalid Credentials");
				    	request.setAttribute("loginvalidation", "Invalid Credentials");
				    	//model.addObject("LGIN", "Login");
				    	
				    	 
				    }
		    }else{
		    	System.out.println("invalid  service unavailable");
		    	model=new ModelAndView("redirect:/mergeLogin/"+boardId+".htm?loginvalidation=service unavailable");
		    	request.setAttribute("loginvalidation", "service unavailable");
		    }
		 
		 
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/mergeAccount/{bid}", method=RequestMethod.GET)
public ModelAndView mergeAccount(HttpServletRequest req,@PathVariable String bid){
	ModelAndView mav = null;
	
	try{
		
		HttpSession session = req.getSession(true);
		if(session !=  null && session.getAttribute("USRID") != null ){
	
			 String email = (String) session.getAttribute("USREMAIL");			
		System.out.println("Merge Account boardId"+bid);
		
		mav = new ModelAndView("MergeAccount");
		mav.addObject("email", email);
		//********************************** Getting User Board List  *******************************************************	 
		 hubReq=new HubRequest(41);
		 hubReq.setMsgType(41);
		 ModelMap map3=new ModelMap();
		 map3.put("userId", session.getAttribute("USRID"));
		 map3.put("startNode", 0);
		 map3.put("endNode", 200);
		  hubReq.setRequestParam(map3);
		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
			 if(hubResponse2!=null && hubResponse2.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse2.getResults().getBoardsList());
			 }else{
				// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
			 }
			 
		 }
		 
		 
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map11=new ModelMap();			
		 map11.put("userId", session.getAttribute("USRID"));			 
		 map11.put("boardId", bid);
		 hubReq1.setRequestParam(map11);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
		 if(strBoarddetail!=null)
		 {
			 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
			{
				 mav.addObject("boardId", bid);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);				
			}
		 }	
		 
		 
		}else{
			mav=new ModelAndView("redirect:/mergeLogin/"+bid+".htm?loginvalidation=Your session has been expired");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/cancelGame",method = RequestMethod.POST)
public @ResponseBody String cancelGame(@RequestBody CancelScheduleDTO dto, HttpServletRequest req){

	String response = null;
	try{
		
		hubReq = new HubRequest();
		hubReq.setMsgType(203);
		ModelMap map = new ModelMap();
		map.put("boardId", dto.getBoardId());
		map.put("schedulerArray", dto.getShedulerArray());
		map.put("scheduleCancelReason", dto.getScheduleCancelReason());
		hubReq.setRequestParam(map);
		
		String returnRes = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(returnRes != null){
			HubResponse res = GsonConverters.getGsonObject().fromJson(returnRes, HubResponse.class);
			if(res != null && res.getResults() != null){
				response = res.getResults().getStatus();
			}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
		
	}
	return response;
	
}

@RequestMapping(value="/CancelGameByDatePublicProfile/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView CancelGameByDatePublicProfile(HttpServletRequest req, @PathVariable String boardId) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("CancelGameByDatePublicProfile");
		mav.addObject("boardId", boardId);
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoardId", boardId);
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);				
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 hubReq = new HubRequest();
			 hubReq.setMsgType(133);
			 ModelMap map3 = new ModelMap();
			 map3.put("boardId", boardId);
			 map3.put("endNode", 10);
			 hubReq.setRequestParam(map3);
			 
			 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
			 
			 if(strGameScheduleList != null){
				 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
				 if(hubResponse != null && hubResponse.getResults() != null){
					 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
					 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
					 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
					 //System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
					 //System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
				 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
				 //mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
				 }else{
					System.out.println("null condition"); 
				 }
			 }
			 else{
				 
			 }
			
			 
		 
		 
		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/filterScheduleFunctionForUpcomingPublicProfile", method = RequestMethod.POST)
public ModelAndView filterScheduleFunctionForUpcomingPublicProfile(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
		mav = new ModelAndView("CancelGameByDatePublicProfile");
		mav.addObject("boardId", gs.getBoardId());
		//*************************** Getting Board info  ***************************************
		 HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
		 map1.put("userId", userId);			 
		 map1.put("boardId", gs.getBoardId());
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoardId", gs.getBoardId());
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 final String context = req.getContextPath();
				 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
				 mav.addObject("LeaugeMenuList", menuList);						
				
			}
		 }
		 
		 hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map2=new ModelMap();
		 map2.put("userId", userId);
		 map2.put("startNode", 0);
		 map2.put("endNode", 200);
		  hubReq.setRequestParam(map2);

			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		
			 String tournamentId = req.getParameter("tournamentHiddenId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			 
			 System.out.println("tournamentId :"+tournamentId+" fromDate :"+fromDate+" ToDate :"+toDate);
			 
			 String fromDateString = null;
			 
			 if(fromDate != null && fromDate != ""){
			 String[] spliteDOB = fromDate.split("/");
				
			 String monthInEditProfile = spliteDOB[0];
			 String dayInEditProfile = spliteDOB[1];
			 String yearInEditProfile = spliteDOB[2];
			 
			
			  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 System.out.println(fromDateString);
			 }
			 
			 
			 String toDateString = null;
			 if(toDate != null && toDate != ""){
			 String[] spliteDOB1 = toDate.split("/");
				
			 String monthInEditProfile1 = spliteDOB1[0];
			 String dayInEditProfile1 = spliteDOB1[1];
			 String yearInEditProfile1 = spliteDOB1[2];
			 
			
			 toDateString = yearInEditProfile1+'-'+monthInEditProfile1+'-'+dayInEditProfile1;
			 System.out.println(toDateString);
			 }
			 if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId == null || tournamentId == ""){
				System.out.println("inside if");
				 
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 //map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }else if(tournamentId != null && tournamentId != "" && fromDateString == null || fromDateString == "" && toDateString == null || toDateString == ""){
				 
				 System.out.println("inside else if");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				 
			 }else if(fromDateString != null && fromDateString != "" && toDateString != null && toDateString != "" && tournamentId != null && tournamentId != ""){
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("tournamentId", tournamentId);
				 map3.put("fromDateString", fromDateString);
				 map3.put("toDateString", toDateString);
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null && hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
			 }
			 else{
				 
				 System.out.println("inside else");
				 hubReq = new HubRequest();
				 hubReq.setMsgType(133);
				 ModelMap map3 = new ModelMap();
				 map3.put("boardId", gs.getBoardId());
				 map3.put("endNode", 10);
				 hubReq.setRequestParam(map3);
				 
				 String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				 
				 if(strGameScheduleList != null){
					 HubResponse hubResponse = gson.fromJson(strGameScheduleList, HubResponse.class);
					 if(hubResponse != null &&hubResponse.getResults().getGameSchedule().getUpComingMatchesList() != null){
						 mav.addObject("gameScheduleList", hubResponse.getResults().getGameSchedule());
						 mav.addObject("upcomingMatchesList", hubResponse.getResults().getGameSchedule().getUpComingMatchesList());
						 mav.addObject("completedMatchesList", hubResponse.getResults().getGameSchedule().getCompletedMatchesList());
						// System.out.println("sysout for completed matches size:"+ hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size());
						// System.out.println("sysout for upcoming matches size:"+ hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					 mav.addObject("upcomingMatchesListSize", hubResponse.getResults().getGameSchedule().getUpComingMatchesList().size());
					// mav.addObject("completedMatchesListSize",hubResponse.getResults().getGameSchedule().getCompletedMatchesList().size() );
					 }else{
						System.out.println("null condition"); 
					 }
				 }
				 else{
					 
				 }
				
			 } 
			 

		}
		else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/cancelTournamentFinal",method = RequestMethod.POST)
public @ResponseBody String cancelTournamentFinal(@RequestBody CancelScheduleDTO dto, HttpServletRequest req){

	String response = null;
	try{
		
		hubReq = new HubRequest();
		hubReq.setMsgType(140);
		ModelMap map = new ModelMap();
		map.put("tournamentId", dto.getTournamentId());
		map.put("scheduleCancelReason", dto.getScheduleCancelReason());
		hubReq.setRequestParam(map);
		
		String returnRes = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(returnRes != null){
			HubResponse res = GsonConverters.getGsonObject().fromJson(returnRes, HubResponse.class);
			if(res != null && res.getResults() != null){
				response = res.getResults().getCancelTournamentResponse();
			}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
		
	}
	return response;
	
}


@RequestMapping(value="/CancelTournamentPublicProfile/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView cancelTournamentPublicProfile(@PathVariable String boardId, HttpServletRequest req){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			mav =  new ModelAndView("CancelTournamentPublicProfile");
			mav.addObject("boardId", boardId);
			
			hubReq = new HubRequest(161);
			hubReq.setMsgType(161);
			
			ModelMap mod= new ModelMap();
			mod.put("createdBy", boardId);
			hubReq.setRequestParam(mod);
			String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentListOfTheBoard !=  null){
				HubResponse  hubRes = GsonConverters.getGsonObject().fromJson(tournamentListOfTheBoard, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
					mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
					//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
				}
		 
			}
			
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", userId);
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			
			
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
	
		}
		else{
			 mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/mergeAccountBoardSearch", method = RequestMethod.POST)
public @ResponseBody List<BoardProfile> mergeAccountBoardSearch(HttpServletRequest request,@RequestBody String key) throws CSException{

	List<BoardProfile> response = null;
	
	HttpSession session=request.getSession(true);
	
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(194);
		 hubReq.setMsgType(194);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", key);
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strUseList!=null)
		 {
			HubResponse res = GsonConverters.getGsonObject().fromJson(strUseList, HubResponse.class);
			if(res != null && res.getResults() != null){
				response = res.getResults().getMergeAccountBoradSearch();
				
			}
		 }
		
	 
	}else{
		//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return response;
	
}



@RequestMapping(value="/detailsOfTheBoard", method = RequestMethod.POST)
public @ResponseBody List<UserProfile> detailsOfTheBoard(HttpServletRequest request,@RequestBody String bid) throws CSException{

	List<UserProfile> response = null;
	
	HttpSession session=request.getSession(true);
	
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(204);
		 hubReq.setMsgType(204);
		 ModelMap map=new ModelMap();
		 map.put("boardId", bid);
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		
		 if(strUseList!=null)
		 {
			HubResponse res = GsonConverters.getGsonObject().fromJson(strUseList, HubResponse.class);
			if(res != null && res.getResults() != null){
				
				response = res.getResults().getBoardDetailsForMergeAccount();
			}
		 }
		
	 
	}else{
		//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return response;
	
}


@RequestMapping(value="/getDynamicAnswers", method = RequestMethod.POST)
public @ResponseBody SearchResponse getDynamicAnswers(@RequestBody String uid, HttpServletRequest req) throws CSException{
SearchResponse response = null;

HttpSession session=req.getSession(true);
Object ob=null;
if(session!=null && session.getAttribute("USRID")!=null)
{
	 hubReq=new HubRequest(210);
	 hubReq.setMsgType(210);
	 ModelMap map=new ModelMap();
	 map.put("userId", uid);
	 hubReq.setRequestParam(map);
	 
	 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 
	 if(strUseList!=null)
	 {
		 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
		 if(searchResponse!=null && searchResponse.getResults()!=null)
		 {
			 SearchResults results=searchResponse.getResults();
			 SearchResponse searchResponse1=results.getSearchResponse();
			 if(searchResponse1 != null){
				 response = searchResponse1;
			 }				 
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
	 }else{
		 ob=new ArrayList<UserSearchVO>();
	 }
	
 
}else{
	 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
}

return response;	
}

@RequestMapping(value="/getOTP", method = RequestMethod.POST)
public @ResponseBody String getOTPForMergerAccount(HttpServletRequest req,@RequestBody String email){
	String response = null;
	try{
		System.out.println("email id to sent :"+email);
		HttpSession session = req.getSession(true);
		if(session != null  && session.getAttribute("USRID") != null){
			hubReq = new HubRequest();
			hubReq.setMsgType(208);
			ModelMap map = new ModelMap();
			map.put("emailAddress", email);
			hubReq.setRequestParam(map);
			String otpResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(otpResponse != null){
				HubResponse res = GsonConverters.getGsonObject().fromJson(otpResponse, HubResponse.class);
				if(res != null && res.getRequestStatus() != null && res.getResults().getMergeOTPResult() != null){
					response = res.getResults().getMergeOTPResult().getMergeOTPResultStatus();
					System.out.println("response in controller :"+response);
				}else{
					response = "failure";
				}
			}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}

@RequestMapping(value="/mergeUser", method=RequestMethod.POST)
public @ResponseBody String mergeUser(@RequestBody UserProfile user, HttpServletRequest req){
	String merge = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null  && session.getAttribute("USRID") != null){
		hubReq =  new HubRequest();
		hubReq.setMsgType(209);
		
		String dateString = user.getStrdateOfBirth();

		System.out.println("date string :"+dateString);
		
		String[] spliteDOB = dateString.split("/");
		
		 String monthInEditProfile = spliteDOB[0];
		 String dayInEditProfile = spliteDOB[1];
		 String yearInEditProfile = spliteDOB[2];
		 
		
		 String convertedDate= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
		 System.out.println(convertedDate);

		
		ModelMap map = new ModelMap();
		map.put("userId", user.getUserId());
		map.put("dateOfBirth", convertedDate);
		map.put("city", user.getCity());
		map.put("zipcode", user.getZipcode().toString());
		map.put("emailAddress", user.getEmailAddress());
		
		if(user.getZipcode().length() == 0){
			map.put("zipcode", "None of the above");
		}else{
			map.put("zipcode", user.getZipcode().toString());
		}
		map.put("codeNumber", user.getCodeNumber());
		hubReq.setRequestParam(map);
		
		String mergeUser = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(mergeUser != null){
			HubResponse hubRes = GsonConverters.getGsonObject().fromJson(mergeUser, HubResponse.class);
			if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getUserValidationSuccess() != null){
				merge = hubRes.getResults().getUserValidationSuccess();
				
			}else{
				merge = "failure";
			}
		}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return merge;
}


@RequestMapping(value="/finalMerging", method=RequestMethod.POST)
public @ResponseBody String finalMerging(@RequestBody String uid, HttpServletRequest req){
	String merge = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null)
				{
		
			hubReq =  new HubRequest();
			hubReq.setMsgType(212);

			ModelMap map = new ModelMap();
			map.put("mergedUserId", uid);
			map.put("currentUserId", session.getAttribute("USRID"));
			
		
			hubReq.setRequestParam(map);
			
			String mergeUser = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(mergeUser != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(mergeUser, HubResponse.class);
				if(hubRes != null && hubRes.getResults() != null && hubRes.getResults().getMergeAccountStatus() != null){
					merge = hubRes.getResults().getMergeAccountStatus();
					
				}else{
					merge = "failure";
				}
			}
			
			
				}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return merge;
}


@RequestMapping(value="/playerSearchOfBoard", method=RequestMethod.POST)
@ResponseBody
public SearchResponse playerSearchOfBoard(HttpServletRequest request,@RequestBody TournamentDTO dto) throws CSException{

	SearchResponse response = null;
	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(214);
		 hubReq.setMsgType(214);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", dto.getAwayTeam());
		 map.put("boardId", dto.getHomeTeam());
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 response = searchResponse1;
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return response;
	
}

@RequestMapping(value="/mergeAccountHeader", method = RequestMethod.GET)
public ModelAndView mergeAccountHeader(HttpServletRequest req){
	ModelAndView mav = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			String email = (String) session.getAttribute("USREMAIL");			
			
			mav = new ModelAndView("MergeAccountHeaderMenu");
			mav.addObject("email", email);
			//********************************** Getting User Board List  *******************************************************	 
			 hubReq=new HubRequest(41);
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", session.getAttribute("USRID"));
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse2= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
				 if(hubResponse2!=null && hubResponse2.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse2.getResults().getBoardsList());
				 }else{
					// model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
				 
			 }
			 
			 
			//*************************** Getting Board info  ***************************************
			/* HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", bid);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= GsonConverters.getGsonObject().fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("boardId", bid);
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	*/
			 
			
			
		}else{
			 mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/scorecard/buddy/{buddyName}/{buddyId}",method=RequestMethod.GET)
public ModelAndView getBuddyPublicProfileFromScoreCard(HttpServletRequest request,@PathVariable String buddyId) throws CSException
{
	ModelAndView model=null;
	 HttpSession session = request.getSession(true);
	 if(session.getAttribute("USRID")!=null)
	 {
		 UUID userid=(UUID) session.getAttribute("USRID");
		 System.out.println("session userid : "+userid);
		 System.out.println("required userid : "+buddyId);
		 UUID BuddyId=null;
		 
			model=new ModelAndView("BuddyPublicProfileFromScorecard");	
			
		 hubReq=new HubRequest(13);
		 hubReq.setMsgType(13);		
		UserProfile userProfile= new UserProfile();
		UUID userIdUUID = UUID.fromString(buddyId);
		
		userProfile.setUserId(userIdUUID);
		model.addObject("publicUserId", userIdUUID);
		 hubReq.setRequestParam(userProfile);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 System.out.println("controller result -------------------> "+result ); 
		 LoginResponse profile = null;
		 if(result!=null)
		 {
			   profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
			  if(profile!=null && profile.getResults()!=null)
			  {
				  model.addObject("UserInfo", profile.getResults().getItemsFound()[0]);

					session.setAttribute("BuddyPublicFirstName", profile.getResults().getItemsFound()[0].getFirstName());
					session.setAttribute("BuddyPublicLastName", profile.getResults().getItemsFound()[0].getLastName());
					session.setAttribute("BuddyPublicIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
					session.setAttribute("BuddyPublicUserId", profile.getResults().getItemsFound()[0].getUserId());
					session.setAttribute("BuddyPublicFanCount", profile.getResults().getItemsFound()[0].getUserFanCount());
					BuddyId =profile.getResults().getItemsFound()[0].getUserId();
			  }
		 }
		 if(!(userid.equals(BuddyId))){
			 System.out.println("Not same users");
		
		 SelectedPlayersInfo playerInfo=new SelectedPlayersInfo(); 
		 if(userProfile.getUserId()!=null)
		 {
			 String userIdString = userProfile.getUserId().toString();
			 UserProfileRole role= CSRestFullService.getUserDetails(userIdString);
			 UserPlayrInfo roldinfo= UserCommons.getUserPlayerInfo(role);
			 playerInfo.setPlayer1(roldinfo);
		 }
		 model.addObject("SelectedPlayersInfo", playerInfo);
		 

		List<UserRole> userRole = profile.getResults().getItemsFound()[0].getUserRoleMap();
		
		hubReq=new HubRequest();
		hubReq.setMsgType(145);		
		ModelMap map = new ModelMap();
		map.put("uid", userIdUUID);
		map.put("startNode", 0);
		map.put("endNode", 10);
		hubReq.setRequestParam(map);
		String playerMatches =cricketSocialRestTemplateService.userRegistration(hubReq);
		if(playerMatches!=null)
		{
			HubResponse response= GsonConverters.getGsonObject().fromJson(playerMatches, HubResponse.class);
			if(response!=null && response.getResults()!=null)
			{
				model.addObject("UserMatchInfo", response.getResults().getSearchResponse());
			}
		}
		
		//for(int i=0 ; i< userRole.size(); i++){
			//String userRoleName = userRole.get(i).getRole();
			
			
			//if(userRoleName.equalsIgnoreCase("Player")){
		
		hubReq= new HubRequest();
		hubReq.setMsgType(170);
		ModelMap yearsMap = new ModelMap();
		yearsMap.put("uid", buddyId);
		yearsMap.put("startNode", 0);
		yearsMap.put("endNode", 10);
		hubReq.setRequestParam(yearsMap);
		String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
		String yearVal = null;
		
		
		if(strYears!=null)
		{
			HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
			if(response!=null && response.getResults()!=null && response.getResults() != null)
			{
				model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
				if(response.getResults().getCreateUmpire().getYearslist() != null){
					if(response.getResults().getCreateUmpire().getYearslist().size() !=0){
						model.addObject("yearListSize",response.getResults().getCreateUmpire().getYearslist().size());
						yearVal = response.getResults().getCreateUmpire().getYearslist().get(0);
					}
					
				}else{
					model.addObject("yearListSize",0);
				}
			}
		}
			
				hubReq= new HubRequest();
				hubReq.setMsgType(155);
				ModelMap battingmap = new ModelMap();
				battingmap.put("uid", userIdUUID);
				battingmap.put("startNode", 0);
				battingmap.put("endNode", 10);
				battingmap.put("filterByYear",yearVal);
				hubReq.setRequestParam(battingmap);
				String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				if(strBattingResponse!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("battingPerformanceList", response.getResults().getUserBattingPerformanceList());
						if(response.getResults().getUserBattingPerformanceList() != null){
							model.addObject("battingPerformanceListSize",response.getResults().getUserBattingPerformanceList().size());
						}else{
							model.addObject("battingPerformanceListSize",0);
						}
					}
				}
				
				hubReq= new HubRequest();
				hubReq.setMsgType(147);
				ModelMap bowlingmap = new ModelMap();
				bowlingmap.put("uid", userIdUUID);
				bowlingmap.put("startNode", 0);
				bowlingmap.put("endNode", 10);
				bowlingmap.put("flag", "forMyScore");
				bowlingmap.put("filterByYear",yearVal);
				hubReq.setRequestParam(bowlingmap);
				String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
				if(strBowlingResponse!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("bowlingPerformanceList", response.getResults().getUserBowlingPerformanceList());
						if(response.getResults().getUserBowlingPerformanceList() != null){
							model.addObject("bowlingPerformanceListSize",response.getResults().getUserBowlingPerformanceList().size());
						}else{
							model.addObject("bowlingPerformanceListSize",0);
						}
					}
				}
				
				hubReq= new HubRequest();
				hubReq.setMsgType(148);
				ModelMap achievements = new ModelMap();
				achievements.put("uid", userIdUUID);
				achievements.put("startNode", 0);
				achievements.put("endNode", 500);
				achievements.put("filterByYear",yearVal);
				hubReq.setRequestParam(achievements);
				String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				
				
				if(strAchievementsResponse!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("achievementsList", response.getResults().getUseronedaymatchsachivements());
						if(response.getResults().getUseronedaymatchsachivements() != null){
							model.addObject("achievementsListSize",response.getResults().getUseronedaymatchsachivements().size());
						}else{
							model.addObject("achievementsListSize",0);
						}
					}
				}
				
				
				/*hubReq= new HubRequest();
				hubReq.setMsgType(170);
				ModelMap yearsMap = new ModelMap();
				yearsMap.put("uid", userIdUUID);
				yearsMap.put("startNode", 0);
				yearsMap.put("endNode", 10);
				hubReq.setRequestParam(yearsMap);
				String strYears = cricketSocialRestTemplateService.userRegistration(hubReq);
				
				
				
				if(strYears!=null)
				{
					HubResponse response= GsonConverters.getGsonObject().fromJson(strYears, HubResponse.class);
					if(response!=null && response.getResults()!=null && response.getResults() != null)
					{
						model.addObject("yearsList", response.getResults().getCreateUmpire().getYearslist());
						
					}
				}
				
				*/
				
			/*}else{
				model.addObject("battingPerformanceListSize",0);
				model.addObject("bowlingPerformanceListSize",0);
				model.addObject("achievementsListSize",0);
			}*/
			
		//}
		 
				hubReq= new HubRequest();
				 hubReq.setMsgType(74);
				 ModelMap map2=new ModelMap();
				 map2.put("inviteeId",buddyId);
				 map2.put("invitorId", userid);						
				 hubReq.setRequestParam(map2);
				 String buddyDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean friend=false;
				 if(buddyDetails!=null)
				 {
					 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(buddyDetails, HubResponse.class);
					 if(buddyResponse!=null)
					 {
						 if(buddyResponse.getRequestStatus()!=null && buddyResponse.getRequestStatus().endsWith("4"))
						 {
							 friend=true;
						 }
					 }
					 
				 }
				// friend=true;
				
				 session.setAttribute("BuddyFriend", friend);
		 
				 hubReq= new HubRequest();
				 hubReq.setMsgType(75);
				 ModelMap map3=new ModelMap();

				 map3.put("userId",buddyId);
				 map3.put("buddyId", userid);						
				 hubReq.setRequestParam(map3);
				 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean buddyFan=false;
				 if(buddyFandeatil!=null)
				 {
					 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
					 if(buddyFanResponse!=null)
					 {
						 System.out.println("buddyFanResponse.getRequestStatus() --> "+buddyFanResponse.getRequestStatus());
						 if(buddyFanResponse.getRequestStatus().endsWith("4"))
						 {
							 buddyFan=true;
						 }
					 }
					 
				 }
			
				 System.out.println("fan request : "+buddyFan);
				 session.setAttribute("BuddyFanReq", buddyFan);
			
			
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap modelMAp=new ModelMap();
			 modelMAp.put("userId", session.getAttribute("USRID"));
			 modelMAp.put("startNode", 0);
			 modelMAp.put("endNode", 200);
			  hubReq.setRequestParam(modelMAp);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
		 }
		 else{
			 model=new ModelAndView("redirect:/MyScore");
		 }
	 }else{
		 model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");

	 }
	 return model;
}


@RequestMapping(value="/RollOverTournament/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView RollOverTournament(HttpServletRequest req,@PathVariable String boardId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null)  {
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map1=new ModelMap();
			 map1.put("userId", userId);
			 map1.put("startNode", 0);
			 map1.put("endNode", 200);
			  hubReq.setRequestParam(map1);
			  
			  GsonBuilder builder = new GsonBuilder();
			  Gson gson = builder.create();
			  
			  mav = new ModelAndView("RollOverTournament");
			  mav.addObject("boardId", boardId);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoardId", boardId);
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						// final String context = req.getContextPath();
						// MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						// mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
	
				 hubReq = new HubRequest(161);
					hubReq.setMsgType(161);
					
					ModelMap mod= new ModelMap();
					mod.put("createdBy", boardId);
					hubReq.setRequestParam(mod);
					String tournamentListOfTheBoard = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(tournamentListOfTheBoard !=  null){
						HubResponse  hubRes = gson.fromJson(tournamentListOfTheBoard, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null && hubRes.getResults().getTournamentNamestList() != null){
							mav.addObject("tournamentOfTheBoard", hubRes.getResults().getTournamentNamestList());
							//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
						}
				 
					}


		}else{
		 mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/getBoardsForAutoSchedule", method= RequestMethod.POST)
public @ResponseBody List<TeamDetailsDTO> getBoardsForAutoSchedule(@RequestBody Tournament tournament, HttpServletRequest req){
	List<TeamDetailsDTO> teamList =null;
	
	try{
		hubReq = new HubRequest();
		hubReq.setMsgType(216);
		ModelMap map = new ModelMap();
		map.put("createdBy", tournament.getCreatedBy());
		map.put("tournamentId", tournament.getTournamentId());
		hubReq.setRequestParam(map);
		
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response != null){
		HubResponse res = GsonConverters.getGsonObject().fromJson(response, HubResponse.class);
		if(res != null && res.getResults() != null){
			if(res.getResults().getTeamList().size() != 0){
			
			 teamList = res.getResults().getTeamList().get(0).getTeamboardslist();
	
		}else{
			teamList = new ArrayList<TeamDetailsDTO>();
		}
		}
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return teamList;
}



@RequestMapping(value="/autoScheduleInsert", method = RequestMethod.POST)
public @ResponseBody String autoScheduleInsert(HttpServletRequest req, @RequestBody AutoScheduleDTO autoDTO){
	String response = null;
	try{
			String idList = autoDTO.getBoardIds();
			List<String> boardIdList = new ArrayList<String>();
		
			
			if(idList!= null){
				List<String> boardIds = Arrays.asList(idList.split(","));
				for(int i = 0; i<boardIds.size(); i++){
					String boardId = boardIds.get(i);
					boardIdList.add(boardId);
			
				}
			}
			System.out.println("id list :"+boardIdList);
			
			String dateString = autoDTO.getStartDateStr();
			String[] spliteDOB = dateString.split("/");
			String monthInEditProfile = spliteDOB[0];
			String dayInEditProfile = spliteDOB[1];
			String yearInEditProfile = spliteDOB[2];
			String startDate= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
			 
			 	String incDate = autoDTO.getIncludeDateStr();
				String[] splitInc = incDate.split("/");
				String month = splitInc[0];
				String day = splitInc[1];
				String year = splitInc[2];
				String  incSpecialDate = year+'-'+month+'-'+day;
				 
				 	String excDate = autoDTO.getExcludeDateStr();
					String[] splitExc = excDate.split("/");
					String month1 = splitExc[0];
					String day1 = splitExc[1];
					String year1 = splitExc[2];
					String excSpecialDate = year1+'-'+month1+'-'+day1;
			 
		
					hubReq = new HubRequest();
					hubReq.setMsgType(217);
					ModelMap map = new ModelMap();
					map.put("createdBy", autoDTO.getCreatedBy());
					map.put("teamboardstrlist", boardIdList);
					map.put("tournamentId", autoDTO.getTournamentId());
					map.put("startDateStr", startDate);
					map.put("includeDateStr", incSpecialDate);
					map.put("excludeDateStr", excSpecialDate);
					map.put("daySelection", autoDTO.getDaySelection());
					map.put("groundSelection", autoDTO.getGroundSelection());
					map.put("umpireSelection", autoDTO.getUmpireSelection());
					map.put("scorerSelection", autoDTO.getScorerSelection());
					map.put("status", "Upcoming");
					map.put("newTrophyName", autoDTO.getNewTrophyName());
					hubReq.setRequestParam(map);
					
					String res = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(res != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(res, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							response = hubRes.getResults().getStatus();
						}
					}
				
					
					
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
	
}


@RequestMapping(value="/schedulerListPreviousNext",method= RequestMethod.POST)
public @ResponseBody ResponseTypeSchedule schedulerListPreviousNext(HttpServletRequest req,@RequestBody TournamentScheduler tournamentSchedule){
	//ResponseType returnList = null;
	ResponseTypeSchedule returnList = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			 hubReq = new HubRequest(104);
				hubReq.setMsgType(104);
				ModelMap m = new ModelMap();
				m.put("createdBy", tournamentSchedule.getCreatedBy());
				m.put("previousNextFlag", tournamentSchedule.getPreviousNextFlag());
				
				if(tournamentSchedule.getPreviousNextFlag().equalsIgnoreCase("Previous")){
					
					Calendar now = Calendar.getInstance(); 
				       SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						String comingDateString = tournamentSchedule.getDateString();
						 now.setTime(new SimpleDateFormat("yyyy-MM-dd").parse(comingDateString));
						 now.add(Calendar.DATE, -1);  // number of days to add
						 String afterAddedOne = sdf1.format(now.getTime());
						
						System.out.println("Previousssssssssssss =============="+afterAddedOne);
						m.put("startDateString", afterAddedOne);
					
				}else{
					
					
					Calendar now = Calendar.getInstance(); 
				       SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						String comingDateString = tournamentSchedule.getDateString();
						 now.setTime(new SimpleDateFormat("yyyy-MM-dd").parse(comingDateString));
						now.add(Calendar.DATE, 1);  // number of days to add
						String afterAddedOne = sdf1.format(now.getTime());
						
						System.out.println("Nextttttttttttttttttttttttt =============="+afterAddedOne);
						m.put("startDateString", afterAddedOne);
				}
				
				
				
				hubReq.setRequestParam(m);
				String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(tournamentList !=  null){
					HubResponse  hubRes = GsonConverters.getGsonObject().fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					String date = hubRes.getResults().getEndDateStr();
					
				//	returnList =  hubRes.getResults();
					JSONObject jobj=new JSONObject(tournamentList);
					JSONObject jresult=jobj.getJSONObject("results");
					returnList =  GsonConverters.getGsonObject().fromJson(jresult.toString(), ResponseTypeSchedule.class);
			
				
				}
			}
			
		}else{
			
		}
		 
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return returnList;
}

@RequestMapping(value="/loadMoreUmpires", method = RequestMethod.POST)
public @ResponseBody List<BoardUmpire> loadMoreUmpire(@RequestBody BoardUmpire umpire, HttpServletRequest req){
	List<BoardUmpire> umpireList = null;
	try{
		
		HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
	

	System.out.println("board id:"+umpire.getBoardId());
	
	 ModelMap modelMap = new ModelMap();
	modelMap.put("boardId", umpire.getBoardId());
	modelMap.put("paginationFlag", "Yes");
	modelMap.put("tokenId", umpire.getTokenId());
	modelMap.put("previousNextFlag", umpire.getPreviousNextFlag());
	
	hubReq = new HubRequest(65);
	hubReq.setMsgType(65);
	hubReq.setRequestParam(modelMap);
	 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
	 if(strBoardList != null){
		 HubResponse hubResponse= GsonConverters.getGsonObject().fromJson(strBoardList, HubResponse.class);
		 if(hubResponse!=null && hubResponse.getResults()!=null)
		 {					 
			 umpireList = hubResponse.getResults().getBoardUmpireList();
			 
		 }
	 }
		}
			 
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return umpireList;
}

@RequestMapping(value="/loadMoreGrounds", method = RequestMethod.POST)
public @ResponseBody List<Ground> loadMoreGrounds(@RequestBody Ground gnd, HttpServletRequest req){
	List<Ground> groundList = null;
	try{
		
        HttpSession session=req.getSession(true);
		
		if(session!=null && session.getAttribute("USRID")!=null)
		{
		
	
		hubReq = new HubRequest(85);
		hubReq.setMsgType(85);
		
		ModelMap model= new ModelMap();
		model.put("boardId", gnd.getBoardId());
		model.put("paginationFlag", "Yes");
		model.put("tokenId", gnd.getTokenId());
		
		
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		hubReq.setRequestParam(model);
		String response = cricketSocialRestTemplateService.userRegistration(hubReq);
		if(response !=  null){
			HubResponse  hubRes = gson.fromJson(response, HubResponse.class);
			if(hubRes !=  null && hubRes.getResults().getGroundList() !=  null){
				groundList =  hubRes.getResults().getGroundList();
			}
			
		}
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
		
	}
	return groundList;
}

@RequestMapping(value="/filterForScheduleList", method = RequestMethod.POST)
public ModelAndView filterForScheduleLiast(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
			mav = new ModelAndView("ScheduleList");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				 

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){
					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
					 
					 
					 
				 }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/ScheduleListPubProfWithEdit/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView SchedulerListPubProfWithEdit(HttpServletRequest req, @PathVariable String boardId) throws CSException{
ModelAndView mav = null;
try{
	HttpSession session = req.getSession(true);
	if(session != null && session.getAttribute("USRID") != null){
		UUID userId = (UUID) session.getAttribute("USRID");
		
	mav = new ModelAndView("ScheduleListPublicProfileWithEditOption");
	mav.addObject("boardId", boardId);
	
	//*************************** Getting Board info  ***************************************
	 HubRequest hubReq1=new HubRequest();
	 hubReq1.setMsgType(40);
	 ModelMap map1=new ModelMap();			
	 map1.put("userId", userId);			 
	 map1.put("boardId", boardId);
	 hubReq1.setRequestParam(map1);
	 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
	 if(strBoarddetail!=null){
		 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
		if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
			 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
			 final String context = req.getContextPath();
			 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
			 mav.addObject("LeaugeMenuList", menuList);
		}
	 }
	
	 hubReq= new HubRequest();
	 hubReq.setMsgType(41);
	 ModelMap map2=new ModelMap();
	 map2.put("userId", userId);
	 map2.put("startNode", 0);
	 map2.put("endNode", 200);
	  hubReq.setRequestParam(map2);

		 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
		 if(strBoardList!=null)
		 {
			 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
			 if(hubResponse!=null && hubResponse.getResults()!=null)
			 {
				 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
			 }
		 }
	 
		
		 
		 hubReq = new HubRequest(104);
			hubReq.setMsgType(104);
			ModelMap m = new ModelMap();
			m.put("createdBy", boardId);
			m.put("previousNextFlag", "current");
			
			hubReq.setRequestParam(m);
			String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(tournamentList !=  null){
				HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
					
					mav.addObject("dateString", hubRes.getResults().getEndDateStr());
					mav.addObject("startDate", hubRes.getResults().getStartDateStr());
					
					
					String endDate = hubRes.getResults().getEndDateStr();

					String startDate = hubRes.getResults().getStartDateStr();
					String[] spliteDOB1 = startDate.split("-");
					
					 String monthInEditProfile1 = spliteDOB1[0];
					 String dayInEditProfile1 = spliteDOB1[1];
					 String yearInEditProfile1 = spliteDOB1[2];
					
					 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
					
					
						mav.addObject("startDateSet", startDateSet);
					
					
					String[] spliteDOB = endDate.split("-");
					
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
					
					 mav.addObject("endDateSet", endDateSet);
					
					
					/*if(hubRes.getResults().getTournamentSchedulerList().size() !=0){
						String date = hubRes.getResults().getTournamentSchedulerList().get(0).getEndDateString();
						System.out.println("string date end date :"+date);
						
						mav.addObject("dateString", date);
						
					}else{
						
						Date newDate = new Date();
						
						DateFormat df = new SimpleDateFormat("YYYY-MM-dd");
						String dateFor = df.format(newDate);

						System.out.println("dateFor -------------"+dateFor);
						mav.addObject("dateString", dateFor);
					}*/
				}
			}
	 
	}
	else{
		mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
}catch(Exception ex){
	ex.printStackTrace();
}
return mav;
}


@RequestMapping(value="/editSchedulerPublicProfileScheduleEdit/boardId/{boardId}/tournamentSchedulerId/{tournamentSchedulerId}/tournamentId/{tournamentId}",method=RequestMethod.GET)
public ModelAndView editSchedulerPublicProfileScheduleEdit(HttpServletRequest req, @PathVariable String boardId, @PathVariable String tournamentSchedulerId,@PathVariable String tournamentId){
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			 hubReq = new HubRequest();
			 hubReq.setMsgType(109);
			 ModelMap map = new ModelMap();
			 map.put("tournamentSchedulerId", tournamentSchedulerId);
			 hubReq.setRequestParam(map);
			 
			 GsonBuilder builder  = new GsonBuilder();
			 Gson gson = builder.create();
			 
			 String response = cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class);
				 if(hubRes != null && hubRes.getResults() != null){
					 mav = new ModelAndView("EditSchedulerPublicProfileScheduleEdit");
					 mav.addObject("boardId", boardId);
					 mav.addObject("schedulerDetails", hubRes.getResults().getTournamentSchelduleDetails().get(0));
					 mav.addObject("tournamentSchedulerId",  hubRes.getResults().getTournamentSchelduleDetails().get(0).getTournamentSchedulerId());
					 mav.addObject("umpireList", hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 JSONArray arr = new JSONArray(hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList());
					 mav.addObject("umpireListForPrePopulate", arr);
					 
					 List<UmpireNameList> listOfUmpires = hubRes.getResults().getTournamentSchelduleDetails().get(0).getUmpireNamesList();
					 List<String> umpireIdList = new ArrayList<String>();
					 
					 System.out.println("size :"+listOfUmpires.size());
					 for(int i=0; i< listOfUmpires.size(); i++){
						 String id = listOfUmpires.get(i).getUmpireId();
						 umpireIdList.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("previousUmpireIds", umpireIdList);
					 
					 List<UserSearchVO> umpireNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr1 = new JSONArray();
					 for(int k=0; k<listOfUmpires.size(); k++){
						 String name = listOfUmpires.get(k).getUmpireName();
						 UserSearchVO user = new UserSearchVO();
						 user.setFullName(name);
						 user.setId(listOfUmpires.get(k).getUmpireId());
						 umpireNameList.add(user);
						 arr1 = new JSONArray(umpireNameList);
					 }
					 
					 mav.addObject("umpireNameList",arr1);
					 System.out.println("umpireNameList :"+arr1);

					 List<ScorerNameList> listOfScorers = hubRes.getResults().getTournamentSchelduleDetails().get(0).getScorerNamesList();
					 List<String> scorerIdList = new ArrayList<String>();
					 for(int i=0; i< listOfScorers.size(); i++){
						 String id = listOfScorers.get(i).getScorerId();
						 scorerIdList.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("previousScorerId", scorerIdList);
					 
					 List<UserSearchVO> scorerNameList = new ArrayList<UserSearchVO>();
					 JSONArray arr2 = new JSONArray();
					 for(int j=0; j < listOfScorers.size(); j++){
						 UserSearchVO userSearch = new  UserSearchVO();
						 userSearch.setId(listOfScorers.get(j).getScorerId());
						 userSearch.setFullName(listOfScorers.get(j).getScorerName());
						 scorerNameList.add(userSearch);
						 arr2 = new JSONArray(scorerNameList);
						
					 }
					 
					 mav.addObject("scorerNameList",arr2);
					 System.out.println("scorerNameList :"+arr2);
					 
					 
                  //Portal Scorer
					 
					 List<ScorerNameList> listofportalScorer=hubRes.getResults().getTournamentSchelduleDetails().get(0).getPortalScorerList();
					 List<String> portalscorerIdlist=new ArrayList<String>();
					 for(int i=0; i< listofportalScorer.size();i++)
					 {
						 String id=listofportalScorer.get(i).getScorerId();
						 portalscorerIdlist.add("\"" + id + "\"");
					 }
					 
					 mav.addObject("portalscorerIdlist", portalscorerIdlist);
					 List<UserSearchVO> portalscorernamelist=new ArrayList<UserSearchVO>();
					 JSONArray arr5=new JSONArray();
					 for(int j=0;j<listofportalScorer.size();j++)
					 {
						 UserSearchVO usersearch=new UserSearchVO();
						 usersearch.setId(listofportalScorer.get(j).getScorerId());
						 usersearch.setFullName(listofportalScorer.get(j).getScorerName());
						 portalscorernamelist.add(usersearch);
						 arr5=new JSONArray(portalscorernamelist);
					 }
					 mav.addObject("portalscorerNameList",arr5);
					 
					 
					 
					 
					 System.out.println("scorerId List :"+scorerIdList);
					 System.out.println("umpireList :"+umpireIdList);
					 Date date = hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate();
						DateFormat df = new SimpleDateFormat("MM/dd/YYYY");
						String dateFor = df.format(date);
						System.out.println("df "+date);
						mav.addObject("dateEdit", dateFor);
						
					/*	DateFormat df1 = new SimpleDateFormat("hh:mma");
						String time = df1.format(date);
						System.out.println("df "+time);
						mav.addObject("timeEdit", time);*/
						
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("M/d/YYYY hh:mm a");
						simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate());
						System.out.println("simple date format :"+simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
						mav.addObject("eventTime", simpleDateFormat.format(hubRes.getResults().getTournamentSchelduleDetails().get(0).getGameDate()));
				 
				 }
			 }
			 
			 hubReq = new HubRequest(85);
				hubReq.setMsgType(85);
				
				ModelMap model= new ModelMap();
				model.put("boardId", boardId);
				hubReq.setRequestParam(model);
				String groundList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(groundList !=  null){
					HubResponse  hubRes = gson.fromJson(groundList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("groundList", hubRes.getResults().getGroundList());
						//mav.addObject("groundListSize",hubRes.getResults().getGroundList().size());
					}
			 
				}	 
	 
					
				
				
				/*hubReq = new HubRequest(223);
				hubReq.setMsgType(223);
				ModelMap m = new ModelMap();
				m.put("createdBy",boardId);
				hubReq.setRequestParam(m);
				String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(tournamentList !=  null){
					HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
					if(hubRes !=  null && hubRes.getResults() !=  null){
						mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
						
					}
			 
				}*/
				
					hubReq = new HubRequest();
					hubReq.setMsgType(113);
					ModelMap map1 = new ModelMap();
					System.out.println("tournamentId *******************: "+tournamentId);
					if(tournamentId != null){
					map1.put("tournamentId",tournamentId);
					hubReq.setRequestParam(map1);
					System.out.println("hub REq param : "+hubReq.getRequestParam());
					String torunamentDetails = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(torunamentDetails != null){
						HubResponse hubRes = gson.fromJson(torunamentDetails, HubResponse.class);
						if(hubRes != null && hubRes.getRequestStatus() != null){
							mav.addObject("tournamentDetails", hubRes.getResults().getTournamentDetails());
							mav.addObject("tournamentName", hubRes.getResults().getTournamentDetails().get(0).getTournamentName());
							mav.addObject("teamList", hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean());
							mav.addObject("umpireCheck", hubRes.getResults().getTournamentDetails().get(0).getUmpireCheck());
							mav.addObject("tournamentId", hubRes.getResults().getTournamentDetails().get(0).getTournamentId());
							System.out.println("teamlistSize : "+hubRes.getResults().getTournamentDetails().get(0).getBoardSearchBean().size());
						}
					}
					}
					else{
						
					}
					
					
					hubReq = new HubRequest();
					hubReq.setMsgType(176);
					ModelMap gameTypeMap = new ModelMap();
					hubReq.setRequestParam(gameTypeMap);
					String gameResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(gameResponse != null){
						HubResponse hubRes = GsonConverters.getGsonObject().fromJson(gameResponse, HubResponse.class);
						if(hubRes != null && hubRes.getResults() != null){
							mav.addObject("gameTypeList", hubRes.getResults().getGameList());
							
						}
					}
					
					

					//*************************** Getting Board info  ***************************************
								 HubRequest hubReq1=new HubRequest();
								 hubReq1.setMsgType(40);
								 ModelMap map11=new ModelMap();			
								 map11.put("userId", session.getAttribute("USRID"));			 
								 map11.put("boardId", boardId);
								 hubReq1.setRequestParam(map11);
								 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
								 if(strBoarddetail!=null)
								 {
									 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
									if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
									{
										 mav.addObject("BoardId", boardId);
										 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
										 final String context = req.getContextPath();
										 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
										 mav.addObject("LeaugeMenuList", menuList);				
									}
								 }	
								 hubReq= new HubRequest();
								 hubReq.setMsgType(41);
								 ModelMap map2=new ModelMap();
								 map2.put("userId", session.getAttribute("USRID"));
								 map2.put("startNode", 0);
								 map2.put("endNode", 200);
								  hubReq.setRequestParam(map2);

									 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
									 if(strBoardList!=null)
									 {
										 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
										 if(hubResponse!=null && hubResponse.getResults()!=null)
										 {
											 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
										 }
									 }
								 
			
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation = Your session has been expired");
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/filterForScheduleListPublicProfile", method = RequestMethod.POST)
public ModelAndView filterForScheduleListPublicProfile(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
		//	mav = new ModelAndView("ScheduleListPublicProfile");
			 mav = new ModelAndView("ScheduleListpublicprofile");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				 

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){


					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
				 }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
								
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/filterForScheduleListPublicProfileWithEdit", method = RequestMethod.POST)
public ModelAndView filterForScheduleListPublicProfileWithEdit(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
			mav = new ModelAndView("ScheduleListPublicProfileWithEditOption");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				 

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){
					

					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
		                   }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
								
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/filterForScheduleListAssignUmpire", method = RequestMethod.POST)
public ModelAndView filterForScheduleListAssignUmpire(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
			mav = new ModelAndView("AssignUmpire");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				 hubReq = new HubRequest(121);
					hubReq.setMsgType(121);
					ModelMap m1 = new ModelMap();
					m1.put("createdBy", boardId);
					hubReq.setRequestParam(m1);
					String umpireList = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(umpireList !=  null){
						HubResponse  hubRes = gson.fromJson(umpireList, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null){
							if(hubRes.getResults().getUmpireList() !=null){
								mav.addObject("boardUmpires", hubRes.getResults().getUmpireList().get(0).getUmpireNamesList());
								List<UmpireNameList> nameList = hubRes.getResults().getUmpireList().get(0).getUmpireNamesList();
								System.out.println("boardUmpires size :"+nameList.size());
								
							}else{
							}
							
							
						}
					}

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){


					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
				 }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
								
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/filterForScheduleListAssignUmpirePubProf", method = RequestMethod.POST)
public ModelAndView filterForScheduleListAssignUmpirePubProf(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
			mav = new ModelAndView("AssignUmpireProfile");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				 hubReq = new HubRequest(121);
					hubReq.setMsgType(121);
					ModelMap m1 = new ModelMap();
					m1.put("createdBy", boardId);
					hubReq.setRequestParam(m1);
					String umpireList = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(umpireList !=  null){
						HubResponse  hubRes = gson.fromJson(umpireList, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null){
							if(hubRes.getResults().getUmpireList() !=null){
								mav.addObject("boardUmpires", hubRes.getResults().getUmpireList().get(0).getUmpireNamesList());
								List<UmpireNameList> nameList = hubRes.getResults().getUmpireList().get(0).getUmpireNamesList();
								System.out.println("boardUmpires size :"+nameList.size());
								
							}else{
							}
							
							
						}
					}

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){


					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
				 }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
								
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/filterForScheduleListAssignScorer", method = RequestMethod.POST)
public ModelAndView filterForScheduleListAssignScorer(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
			mav = new ModelAndView("AssignScorer");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
				 
				// Commented for code optimization
			 
				/* hubReq = new HubRequest(125);
					hubReq.setMsgType(125);
					ModelMap m1 = new ModelMap();
					hubReq.setRequestParam(m1);
					String scorerList = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(scorerList !=  null){
						HubResponse  hubRes = gson.fromJson(scorerList, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null){
							mav.addObject("scorersList", hubRes.getResults().getScorerList().get(0).getScorerNamesList());
							List<ScorerNameList> nameList = hubRes.getResults().getScorerList().get(0).getScorerNamesList();
							System.out.println("scorerList size :"+nameList.size());
						}
					}*/

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){


					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
				 }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
								
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/filterForScheduleListAssignScorerPubProf", method = RequestMethod.POST)
public ModelAndView filterForScheduleListAssignScorerPubProf(HttpServletRequest req, @ModelAttribute GameSchedule gs ) throws CSException{
	ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");

			 String boardId = req.getParameter("boardId");
			 String fromDate = req.getParameter("fromDate");
			 String toDate = req.getParameter("toDate");
			 
			
			mav = new ModelAndView("AssignScorerProfile");
			mav.addObject("boardId", boardId);
			
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", boardId);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map2=new ModelMap();
			 map2.put("userId", userId);
			 map2.put("startNode", 0);
			 map2.put("endNode", 200);
			  hubReq.setRequestParam(map2);

				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);	
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			 
				 hubReq = new HubRequest(121);
					hubReq.setMsgType(121);
					ModelMap m1 = new ModelMap();
					m1.put("createdBy", boardId);
					hubReq.setRequestParam(m1);
					String umpireList = cricketSocialRestTemplateService.userRegistration(hubReq);
					if(umpireList !=  null){
						HubResponse  hubRes = gson.fromJson(umpireList, HubResponse.class);
						if(hubRes !=  null && hubRes.getResults() !=  null){
							if(hubRes.getResults().getUmpireList() !=null){
								mav.addObject("boardUmpires", hubRes.getResults().getUmpireList().get(0).getUmpireNamesList());
								List<UmpireNameList> nameList = hubRes.getResults().getUmpireList().get(0).getUmpireNamesList();
								System.out.println("boardUmpires size :"+nameList.size());
								
							}else{
							}
							
							
						}
					}

				 String fromDateString = null;
				 String toDateString = null;
				 
				
				 if(fromDate != null && fromDate != ""){
					 String[] spliteDOB = fromDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					  fromDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(fromDateString);
					 }
				 
				 if(toDate != null && toDate != ""){
					 String[] spliteDOB = toDate.split("/");
						
					 String monthInEditProfile = spliteDOB[0];
					 String dayInEditProfile = spliteDOB[1];
					 String yearInEditProfile = spliteDOB[2];
					 
					
					 toDateString= yearInEditProfile+'-'+monthInEditProfile+'-'+dayInEditProfile;
					 System.out.println(toDateString);
					 }
				 
				 if(fromDateString != null && toDateString != null){


					 System.out.println("inside if");
					 
					 hubReq = new HubRequest(221);
						hubReq.setMsgType(221);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("fromDateString", fromDateString);
						m.put("toDateString", toDateString);
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
							
							}
						}
					 
				 }else{
					 
					 hubReq = new HubRequest(104);
						hubReq.setMsgType(104);
						ModelMap m = new ModelMap();
						m.put("createdBy", boardId);
						m.put("previousNextFlag", "current");
						
						hubReq.setRequestParam(m);
						String tournamentList = cricketSocialRestTemplateService.userRegistration(hubReq);
						if(tournamentList !=  null){
							HubResponse  hubRes = gson.fromJson(tournamentList, HubResponse.class);
							if(hubRes !=  null && hubRes.getResults() !=  null){
								mav.addObject("tournamentList", hubRes.getResults().getTournamentSchedulerList());
								
								mav.addObject("dateString", hubRes.getResults().getEndDateStr());
								mav.addObject("startDate", hubRes.getResults().getStartDateStr());
								
								String endDate = hubRes.getResults().getEndDateStr();

								String startDate = hubRes.getResults().getStartDateStr();
								String[] spliteDOB1 = startDate.split("-");
								
								 String monthInEditProfile1 = spliteDOB1[0];
								 String dayInEditProfile1 = spliteDOB1[1];
								 String yearInEditProfile1 = spliteDOB1[2];
								
								 String startDateSet= dayInEditProfile1+'/'+yearInEditProfile1+'/'+monthInEditProfile1;
								
								
									mav.addObject("startDateSet", startDateSet);
								
								
								String[] spliteDOB = endDate.split("-");
								
								 String monthInEditProfile = spliteDOB[0];
								 String dayInEditProfile = spliteDOB[1];
								 String yearInEditProfile = spliteDOB[2];
								 
								
								 String endDateSet= dayInEditProfile+'/'+yearInEditProfile+'/'+monthInEditProfile;
								
								 mav.addObject("endDateSet", endDateSet);
								
								
							}
						}
					 
				 }
				 
			 
			}
			else{
				mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
			}
			
			
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return mav;
}


@RequestMapping(value="/tournamentNameValidation", method=RequestMethod.POST)
public @ResponseBody String tournamentNameValidation(@RequestBody Tournament tournament, HttpServletRequest req){
	String response = null;
	try{
		
		HttpSession session = req.getSession(true);
		
		if(session != null && session.getAttribute("USRID") != null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(224);
			ModelMap map = new ModelMap();
			map.put("createdBy", tournament.getCreatedBy());
			map.put("tournamentName", tournament.getTournamentName());
			hubReq.setRequestParam(map);
			
			String retRes = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(retRes != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(retRes, HubResponse.class);
				if(hubRes != null && hubRes.getResults().getStatus() != null){
					response = hubRes.getResults().getStatus();
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}

@RequestMapping(value="/checkAffiliation", method = RequestMethod.POST)
public @ResponseBody String checkAffiliation(@RequestBody TournamentScheduler ts, HttpServletRequest req){
	String response = null;
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") !=  null){
			
			hubReq = new HubRequest();
			hubReq.setMsgType(230);
			ModelMap map = new ModelMap();
			map.put("createdBy", ts.getCreatedBy());
			map.put("boardId", ts.getHomeTeamId());
			hubReq.setRequestParam(map);
			
			String retRes = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(retRes != null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(retRes, HubResponse.class);
				if(hubRes != null && hubRes.getResults().getStatus() != null){
					response = hubRes.getResults().getStatus();
				}
			}
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}
/*
@RequestMapping(value="registration", method=RequestMethod.GET)
public ModelAndView getRegistrationForm(){
	ModelAndView model= new ModelAndView("Reg");
	return model;
}
@RequestMapping(value="/emailChecking",method=RequestMethod.POST)
public @ResponseBody UserStatus emailChecking(@RequestBody UserStatus userStatus, HttpServletRequest request){
	
	UserStatus status= new UserStatus();
	System.out.println("emailaddress---> "+userStatus.getEmailAddress());
	status.setEmailAddress("thamaramurthyd@gmail.com");
	int val=0;
	
	if(val>0){
		status.setUserStatus("User already exist");
		System.out.println("User already exist");
	}else{
		status.setUserStatus("User not exist");
		System.out.println("User not exist");
	}
	
	return status;
	
}
*/



@RequestMapping(value="/buddySearchWithoutCurrentUser", method=RequestMethod.GET)
@ResponseBody
public Object buddySearchWithoutCurrentUser(HttpServletRequest request,@RequestParam String q) throws CSException{

	
	HttpSession session=request.getSession(true);
	Object ob=null;
	if(session!=null && session.getAttribute("USRID")!=null)
	{
		 hubReq=new HubRequest(239);
		 hubReq.setMsgType(239);
		 ModelMap map=new ModelMap();
		 map.put("searchQuery", q);
		 map.put("uid", session.getAttribute("USRID"));
		 hubReq.setRequestParam(map);
		 
		 String strUseList=cricketSocialRestTemplateService.userRegistration(hubReq);
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 
		 if(strUseList!=null)
		 {
			 SearchMainResponse searchResponse= gson.fromJson(strUseList, SearchMainResponse.class);
			 if(searchResponse!=null && searchResponse.getResults()!=null)
			 {
				 SearchResults results=searchResponse.getResults();
				 SearchResponse searchResponse1=results.getSearchResponse();
				 if(searchResponse1 != null){
					 ob= searchResponse1.getUserSearchBean();
				 }				 
			 }else{
				 ob=new ArrayList<UserSearchVO>();
			 }
		 }else{
			 ob=new ArrayList<UserSearchVO>();
		 }
		
	 
	}else{
		 ob=new ArrayList<UserSearchVO>();//model=new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
	}
	
	return ob;
	
}

//duplicate by ramya for buddylist and buddy request tab load more options

@RequestMapping(value="/getMyBuddiesAjaxPaginationLimit", method=RequestMethod.POST)
@ResponseBody
public SearchResponse  getMyBuddiesAjaxPaginationLimit(@RequestBody BoardFanRequest user,HttpServletRequest request) throws CSException{
	HttpSession session=request.getSession(true);
	UUID userId=(UUID) session.getAttribute("USRID");
	hubReq=new HubRequest(32);
	 hubReq.setMsgType(32);
	 ModelMap map=new ModelMap();
	 map.put("userId", user.getUserId());
	 map.put("startNode", user.getStartNode());
	 map.put("endNode", user.getEndNode());
	 hubReq.setRequestParam(map);
	 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
	GsonBuilder builder = new GsonBuilder();
    Gson gson = builder.create();
    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
    SearchResults searchResults=response1.getResults();
    SearchResponse searchResponse1=searchResults.getSearchResponse();
   // List<UserProfile> myBuddies=new ArrayList<UserProfile>();
    SearchResponse myBuddies = null;
    if(searchResponse1.getUserList() != null){
    	//myBuddies=searchResponse1.getUserList();
    	myBuddies=searchResponse1;
    }
    System.out.println("user details ---------> "+myBuddies);
	return myBuddies;
}


@RequestMapping(value="/getMyBuddyRequestsAjaxLimit", method=RequestMethod.GET)
@ResponseBody
public SearchResponse getMyBuddyRequestsAjaxLimit(HttpServletRequest request) throws CSException{
	
	HttpSession session=request.getSession(true);

	hubReq=new HubRequest(34);
	 hubReq.setMsgType(34);
	 UUID userId=(UUID) session.getAttribute("USRID");
	 ModelMap map1=new ModelMap();
	 map1.put("userId", userId.toString());
	 map1.put("startNode", 0);
	 map1.put("endNode", 10);
	 hubReq.setRequestParam(map1);
	 
	 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
    SearchMainResponse response2=gson.fromJson(invitaionResponse, SearchMainResponse.class);
	
    SearchResults searchResults1=response2.getResults();
    SearchResponse searchResponse1=searchResults1.getSearchResponse();
    SearchResponse invitationUsers= null;
    if(searchResponse1.getUserList() != null){
    	invitationUsers=searchResponse1; 
    }
    	
	System.out.println("res-----------> "+invitationUsers);
	return invitationUsers;
}




@RequestMapping(value="/getMyBuddyRequestsAjaxPaginationLimit", method=RequestMethod.POST)
@ResponseBody
public  SearchResponse  getMyBuddyRequestsAjaxPaginationLimit(@RequestBody BoardFanRequest user,HttpServletRequest request) throws CSException{
	
	HttpSession session=request.getSession(true);

	hubReq=new HubRequest(34);
	 hubReq.setMsgType(34);
	 UUID userId=(UUID) session.getAttribute("USRID");
	 ModelMap map1=new ModelMap();
	 map1.put("userId", user.getUserId());  
	 map1.put("startNode", user.getStartNode());
	 map1.put("endNode", user.getEndNode());
	 hubReq.setRequestParam(map1);
	 
	 String invitaionResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
	 GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
    SearchMainResponse response2=gson.fromJson(invitaionResponse, SearchMainResponse.class);
	
    SearchResults searchResults1=response2.getResults();
    SearchResponse searchResponse1=searchResults1.getSearchResponse();
    SearchResponse invitationUsers= null;
    if(searchResponse1.getUserList() != null){
    	invitationUsers=searchResponse1;
    }
    	
	System.out.println("res-----------> "+invitationUsers);
	return invitationUsers;
}

@RequestMapping(value="/getMyBuddiesAjaxLimit", method=RequestMethod.GET)
@ResponseBody
public SearchResponse getMyBuddiesAjaxLimit(HttpServletRequest request) throws CSException{
	HttpSession session=request.getSession(true);
	UUID userId=(UUID) session.getAttribute("USRID");
	hubReq=new HubRequest(32);
	 hubReq.setMsgType(32);
	ModelMap map=new ModelMap();
	 map.put("userId", userId.toString());
	 map.put("startNode", 0);
	 map.put("endNode", 10);
	 hubReq.setRequestParam(map);
	 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
	GsonBuilder builder = new GsonBuilder();
    Gson gson = builder.create();
    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
    SearchResults searchResults=response1.getResults();
    SearchResponse searchResponse1=searchResults.getSearchResponse();
    SearchResponse myBuddies= null;
    if(searchResponse1.getUserList() != null){
    	myBuddies=searchResponse1;
    }
    System.out.println("user details ---------> "+myBuddies);
	return myBuddies;
}

@RequestMapping(value="/checkUmpireValidation", method= RequestMethod.POST)
public @ResponseBody String checkUmpireValidation(@RequestBody BoardUmpire bUmpire, HttpServletRequest req){
	String response = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			hubReq = new HubRequest();
			hubReq.setMsgType(241);
			ModelMap map = new ModelMap();
			map.put("userId", bUmpire.getUmpireId());
			map.put("boardId", bUmpire.getBoardId());
			hubReq.setRequestParam(map);
			
			String res = cricketSocialRestTemplateService.userRegistration(hubReq);
			if(res !=  null){
				HubResponse hubRes = GsonConverters.getGsonObject().fromJson(res, HubResponse.class);
				if(hubRes != null && hubRes.getRequestStatus() != null){
					response = hubRes.getResults().getStatus();
				}else{
					response = "failure";
				}
			}
			
		}
		
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return response;
}

@RequestMapping(value="/getMyBuddiesAjaxLimitPublicProfile", method=RequestMethod.POST)
@ResponseBody
public SearchResponse getMyBuddiesAjaxLimitPublicProfile(HttpServletRequest request, @RequestBody BoardFanRequest user) throws CSException{

	hubReq=new HubRequest(32);
	 hubReq.setMsgType(32);
	ModelMap map=new ModelMap();
	 map.put("userId", user.getUserId());
	 map.put("startNode", 0);
	 map.put("endNode", 10);
	 hubReq.setRequestParam(map);
	 String response=cricketSocialRestTemplateService.userRegistration(hubReq);
	GsonBuilder builder = new GsonBuilder();
    Gson gson = builder.create();
    SearchMainResponse response1=gson.fromJson(response, SearchMainResponse.class);
    SearchResults searchResults=response1.getResults();
    SearchResponse searchResponse1=searchResults.getSearchResponse();
    SearchResponse myBuddies= null;
    if(searchResponse1.getUserList() != null){
    	myBuddies=searchResponse1;
    }
    System.out.println("user details ---------> "+myBuddies);
	return myBuddies;
}

@RequestMapping(value="/paginationBattingPerformanceScorer",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> paginationBattingPerformanceScorer(@RequestBody GameSchedule game,HttpServletRequest req){
	List<UserBattingPerformanceDTO> battingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			hubReq.setMsgType(155);
			ModelMap battingmap = new ModelMap();
			battingmap.put("uid", game.getUserId());
			battingmap.put("startNode", game.getStartNode());
			battingmap.put("endNode", game.getEndNode());
			battingmap.put("filterByYear",game.getFilterByYear());
			
			hubReq.setRequestParam(battingmap);
			String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(strBattingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					 battingList = response.getResults().getUserBattingPerformanceList();
					
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return battingList;
}

@RequestMapping(value="/paginationBowlingPerformanceScorer",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> paginationBowlingPerformanceScorer(@RequestBody GameSchedule game,HttpServletRequest req){
	List<UserBattingPerformanceDTO> bowlingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(147);
			ModelMap bowlingmap = new ModelMap();
			bowlingmap.put("uid", game.getUserId());
			bowlingmap.put("startNode", game.getStartNode());
			bowlingmap.put("endNode", game.getEndNode());
			bowlingmap.put("filterByYear", game.getFilterByYear());
			bowlingmap.put("flag", game.getFlag());
			hubReq.setRequestParam(bowlingmap);
			String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
	
			if(strBowlingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					bowlingList = response.getResults().getUserBowlingPerformanceList();
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return bowlingList;
}

@RequestMapping(value="/paginationMatchAchievementsScorer",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> paginationMatchAchievementsScorer(@RequestBody GameSchedule game,HttpServletRequest req){
	List<UserBattingPerformanceDTO> achievementList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(148);
			ModelMap achievements = new ModelMap();
			achievements.put("uid", game.getUserId());
			achievements.put("startNode", game.getStartNode());
			achievements.put("endNode", game.getEndNode());
			achievements.put("filterByYear",game.getFilterByYear());
			hubReq.setRequestParam(achievements);
			String strAchievementsResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			
			
			if(strAchievementsResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strAchievementsResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					achievementList = response.getResults().getUseronedaymatchsachivements();
				}
			}
			
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return achievementList;
}


@RequestMapping(value="/yearWiseBattingScorer", method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> yearWiseBattingScorer(@RequestBody UserBattingPerformanceDTO userBat, HttpServletRequest req){
	List<UserBattingPerformanceDTO> battingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			hubReq= new HubRequest();
			hubReq.setMsgType(155);
			ModelMap battingmap = new ModelMap();
			battingmap.put("uid", userBat.getPlayerId());
			battingmap.put("startNode", 0);
			battingmap.put("endNode", 10);
			battingmap.put("filterByYear", userBat.getFilterByYear());
			hubReq.setRequestParam(battingmap);
			String strBattingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
			if(strBattingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBattingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					 battingList = response.getResults().getUserBattingPerformanceList();
					
				}
			}
			
		}else{
			
		}
}catch(Exception ex){
	ex.printStackTrace();
}
	return battingList;

}


@RequestMapping(value="/yearWiseBowlingScorer",method = RequestMethod.POST)
public @ResponseBody List<UserBattingPerformanceDTO> yearWiseBowlingScorer(@RequestBody UserBattingPerformanceDTO userBat,HttpServletRequest req){
	List<UserBattingPerformanceDTO> bowlingList = null;
	try{
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			
			hubReq= new HubRequest();
			hubReq.setMsgType(147);
			ModelMap bowlingmap = new ModelMap();
			bowlingmap.put("uid", userBat.getPlayerId());
			bowlingmap.put("startNode", 0);
			bowlingmap.put("endNode", 10);
			bowlingmap.put("filterByYear", userBat.getFilterByYear());
			bowlingmap.put("flag", "forMyScore");
			hubReq.setRequestParam(bowlingmap);
			String strBowlingResponse=cricketSocialRestTemplateService.userRegistration(hubReq);
			
	
			if(strBowlingResponse!=null)
			{
				HubResponse response= GsonConverters.getGsonObject().fromJson(strBowlingResponse, HubResponse.class);
				if(response!=null && response.getResults()!=null && response.getResults() != null)
				{
					bowlingList = response.getResults().getUserBowlingPerformanceList();
				}
			}
			
		}else{
			
		}
		
	}catch(Exception ex){
		ex.printStackTrace();
	}
	return bowlingList;
}








//********************************************  EnhanceMent   **************************************************************


@RequestMapping(value="/feedCommentDelete", method=RequestMethod.POST)
public @ResponseBody HubResponse feedCommentDelete( HttpServletRequest request, @RequestBody FeedDelete feed)
{
	HubResponse response=null;
	try{
		 hubReq=new HubRequest();
		 hubReq.setMsgType(245);
		 ModelMap feedComment = new ModelMap();
		 feedComment.put("feedCommentId", feed.getCommentId());
		 hubReq.setRequestParam(feedComment);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		    GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		   HubResponse hubres =gson.fromJson(result, HubResponse.class);
		   if(hubres!=null) {
			   response=hubres;
		   }
		   
		   
		  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	   
	return response;
}


@RequestMapping(value="/feedCommentSpam", method=RequestMethod.POST)
public @ResponseBody HubResponse feedCommentSpam( HttpServletRequest request, @RequestBody FeedDelete feed)
{
	HubResponse response=null;
	try{
		 hubReq=new HubRequest();
		 hubReq.setMsgType(247);
		 ModelMap feedComment = new ModelMap();
		 feedComment.put("feedCommentId", feed.getCommentId());
		 feedComment.put("feedCommentReportUserId", feed.getLoginUserId());
		 hubReq.setRequestParam(feedComment);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		    GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		   HubResponse hubres =gson.fromJson(result, HubResponse.class);
		   if(hubres!=null) {
			   response=hubres;
		   }
		   
		   
		  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	   
	return response;
}


@RequestMapping(value="/feedDelete", method=RequestMethod.POST)
public @ResponseBody HubResponse feedDelete( HttpServletRequest request, @RequestBody FeedDelete feed)
{
	HubResponse response=null;
	try{
		 hubReq=new HubRequest();
		 hubReq.setMsgType(244);
		 System.out.println("feedid---> "+feed.getFeedid());
		 System.out.println("postedBy ---> "+feed.getLoginUserId());
		 ModelMap feedDelete = new ModelMap();
		 feedDelete.put("feedId", feed.getFeedid());
		 feedDelete.put("postedBy", feed.getLoginUserId());
		 hubReq.setRequestParam(feedDelete);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
		 
		    GsonBuilder builder = new GsonBuilder();
		    Gson gson = builder.create();
		   HubResponse hubres =gson.fromJson(result, HubResponse.class);
		   if(hubres!=null) {
			   response=hubres;
		   }
		   
		   
		  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	   
	return response;
}
@RequestMapping(value="/feedSpam", method=RequestMethod.POST)
public @ResponseBody HubResponse feedSpam( HttpServletRequest request, @RequestBody FeedDelete feed)
{
	HubResponse response=null;
	try{
		 hubReq=new HubRequest();
		 hubReq.setMsgType(246);
		 System.out.println("feedid---> "+feed.getFeedid());
		 System.out.println("postedBy ---> "+feed.getLoginUserId());
		 ModelMap feedDelete = new ModelMap();
		 feedDelete.put("feedId", feed.getFeedid());
		 feedDelete.put("feedCommentReportUserId", feed.getLoginUserId());
		 hubReq.setRequestParam(feedDelete);
		 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
    	 HubResponse hubres =GsonConverters.getGsonObject().fromJson(result, HubResponse.class);
		   if(hubres!=null) {
			   response=hubres;
		   }
		   
		   
		  // System.out.println("response"+response.getUserList().get(0).isYourBuddy());
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	   
	return response;
}

@RequestMapping(value="/policy",method=RequestMethod.GET)
public ModelAndView getpolicy(){
	return new ModelAndView("policy");
}
@RequestMapping(value="/mailEventNotification/{userId}/{eventMatchMapId}/{matchId}/{rosterId}/{statusType}",method=RequestMethod.GET)
public ModelAndView mailEventNotification(HttpServletRequest req,@PathVariable UUID userId,@PathVariable String eventMatchMapId,@PathVariable String matchId,@PathVariable String rosterId,@PathVariable int statusType){
	
	    ModelAndView mav = null;
	try{
		HttpSession session = req.getSession(true);
		System.out.println("--------------welcome-----------------");
			hubReq = new HubRequest();
			hubReq.setMsgType(196);			
			ModelMap map = new ModelMap();
			map.put("eventMatchMapId", eventMatchMapId);	
			map.put("matchId", matchId);
			map.put("playerId", userId);
			map.put("rosterId", rosterId);
			
			if(statusType == 196){
				map.put("statusType", "ACCEPT");
			}else if(statusType == 197){
				map.put("statusType", "MAYBE");
			}else if(statusType == 198){
				map.put("statusType", "REJECT");
			}
			
			hubReq.setRequestParam(map);
			String strSearchResponse   = cricketSocialRestTemplateService.userRegistration(hubReq);
			String ScheduleUpdateCheck="";
			String Schedulemessage="";
			if(strSearchResponse!=null )
			{
				JSONObject jobj=new JSONObject(strSearchResponse);
				JSONObject jresult=jobj.getJSONObject("results");
				ScheduleUpdateCheck=jresult.getString("ScheduleUpdateCheck");
				
			//return "success";
			}else{
				//return "Request Failed";
			}
			System.out.println("The update check :"+ScheduleUpdateCheck.equals("Schedule Updated"));
			if(ScheduleUpdateCheck.equals("Schedule Updated")){
				Schedulemessage="No";
			}else
			{
				Schedulemessage="Yes";
			}
			if(session !=null && session.getAttribute("USRID") != null){
				UUID userid=(UUID) session.getAttribute("USRID");
				System.out.println("The userid matches true or false:"+(userid.equals(userId)));
				System.out.println("the login user id :"+userid);
				System.out.println("the url user id :"+userId);
				if((userid.equals(userId))){
				mav = new ModelAndView("redirect:/userEvent.htm?Status="+Schedulemessage);
				}else{
					
					// for public view
					
					gsonobj=GsonConverters.getGsonObject();		
					 hubReq=new HubRequest(13);
						 hubReq.setMsgType(13);			
						 ModelMap modelMap=new ModelMap();
						 modelMap.put("userId",userId);
						 modelMap.put("active", 0);
						 modelMap.put("isYourBuddy", false);
						 hubReq.setRequestParam(modelMap);
						 String result=cricketSocialRestTemplateService.userRegistration(hubReq);
					 
						 
						  LoginResponse profile=GsonConverters.getGsonObject().fromJson(result, LoginResponse.class);
						  
						 if(profile!= null &&  profile.getResults()!=null)
						 {
							 
							 
							if(profile.getResults().getItemsFound()!=null && profile.getResults().getItemsFound().length>0)
							{
							//	BuddyPublicFirstName
								session.removeAttribute("BuddyPublicFirstName");
								session.removeAttribute("BuddyPublicIMG");
								session.removeAttribute("BuddyPublicUserId");
								session.removeAttribute("BuddyPublicFanCount");
								session.removeAttribute("BuddyPublicBoradFanCount");
								
								//Remove value from the session.
								session.removeValue("BuddyPublicFirstName");
								session.removeValue("BuddyPublicIMG");
								session.removeValue("BuddyPublicUserId");
								session.removeValue("BuddyPublicFanCount");
								session.removeValue("BuddyPublicBoradFanCount");
								
								session.setAttribute("BuddyPublicFirstName", profile.getResults().getItemsFound()[0].getFullName());
								session.setAttribute("BuddyPublicIMG", profile.getResults().getItemsFound()[0].getUserImageUrl());
								session.setAttribute("BuddyPublicUserId", profile.getResults().getItemsFound()[0].getUserId());
								session.setAttribute("BuddyPublicFanCount", profile.getResults().getItemsFound()[0].getUserFanCount());
								session.setAttribute("BuddyPublicBoradFanCount", profile.getResults().getItemsFound()[0].getBuddyFansBoardsCount());
								System.out.println("buddy fan count : "+profile.getResults().getItemsFound()[0].getUserFanCount());
									
									
									 hubReq=new HubRequest();
									// hubReq.setMsgType(8);
									 hubReq.setMsgType(189);						
									 Feeds feed= new Feeds();
									 feed.setStartNode("0");
									 feed.setEndNode("50");
								//	 feed.setUserId(userid.toString());
									 feed.setUserId(userId.toString());
									 feed.setFeedHitUserId(userid.toString());
									// feed.setPublicProfileUserId(userid.toString());
									 feed.setPublicProfileUserId(userId.toString());
									 hubReq.setRequestParam(feed);
									 String result2=cricketSocialRestTemplateService.userRegistration(hubReq);
									 
									 HubResponse resp= GsonConverters.getGsonObject().fromJson(result2, HubResponse.class);
									 
								 
									 
									 hubReq= new HubRequest();
									 hubReq.setMsgType(74);
									 ModelMap map2=new ModelMap();
									 map2.put("inviteeId",userId);
									 map2.put("invitorId", userid);						
									 hubReq.setRequestParam(map2);
									 String buddyDetails=cricketSocialRestTemplateService.userRegistration(hubReq);
									 boolean friend=false;
									 if(buddyDetails!=null)
									 {
										 HubResponse buddyResponse= GsonConverters.getGsonObject().fromJson(buddyDetails, HubResponse.class);
										 if(buddyResponse!=null)
										 {
											 if(buddyResponse.getRequestStatus()!=null && buddyResponse.getRequestStatus().endsWith("4"))
											 {
												 friend=true;
											 }
										 }
										 session.setAttribute("BuddyFriendRequest", buddyResponse);
										 
									 }
									// friend=true;
									
									 session.setAttribute("BuddyFriend", friend);
									 
									 hubReq= new HubRequest();
									 hubReq.setMsgType(75);
									 ModelMap map3=new ModelMap();
									 
									 map3.put("userId",userId);
									 map3.put("buddyId", userid);						
									 hubReq.setRequestParam(map3);
									 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
									 boolean buddyFan=false;
									 if(buddyFandeatil!=null)
									 {
										 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
										 if(buddyFanResponse!=null)
										 {
											 System.out.println("buddyFanResponse.getRequestStatus() --> "+buddyFanResponse.getRequestStatus());
											 if(buddyFanResponse.getRequestStatus().endsWith("4"))
											 {
												 buddyFan=true;
											 }
										 }
										 
									 }
								
									 System.out.println("fan request : "+buddyFan);
									 session.setAttribute("BuddyFanReq", buddyFan);
							} else{
								mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
									} 
						 }else{
							 mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
							 }
					
					
					mav = new ModelAndView("redirect:/userEvent/buddy/user/"+userId+"?Status="+Schedulemessage);
				}
			}else{
				/*mav = new ModelAndView("welcome");
				mav.addObject("Schedulemessage", Schedulemessage);*/
				session.setAttribute("Schedulemessage",Schedulemessage);
				mav=new ModelAndView("redirect:/login.htm");
				
			}
			
		}catch(Exception e)
		{
			e.printStackTrace();
			//return "Request Failed";
		}
	
	return mav;
}

@RequestMapping(value="/gameScheduletPreNext",method=RequestMethod.POST)
public @ResponseBody ResponseTypeSchedule gameSchedulePreNext(HttpServletRequest req,@RequestBody GameScheduleFilter gamescheduler )
{
	//ResponseType returnList=null;
	ResponseTypeSchedule returnList=null;
	try{
		HttpSession session=req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			
			 hubReq = new HubRequest(133);
				ModelMap m = new ModelMap();
				m.put("boardId", gamescheduler.getBoardId());
				m.put("previousNextFlag", gamescheduler.getPreviousNextFlag());
				m.put("endNode", 10);
				
				if(gamescheduler.getPreviousNextFlag().equalsIgnoreCase("Previous")){
					
					Calendar now = Calendar.getInstance(); 
				       SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						String comingDateString = gamescheduler.getDateString();
						 now.setTime(new SimpleDateFormat("yyyy-MM-dd").parse(comingDateString));
						 System.out.println("Previous :"+sdf1.format(now.getTime()));
						 now.add(Calendar.DATE, -1);  // number of days to add
						 String afterAddedOne = sdf1.format(now.getTime());
						
						System.out.println("Previousssssssssssss =============="+afterAddedOne);
						m.put("startDateString", afterAddedOne);
					
				}else{
					
					
					Calendar now = Calendar.getInstance(); 
				       SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
						String comingDateString = gamescheduler.getDateString();
						 now.setTime(new SimpleDateFormat("yyyy-MM-dd").parse(comingDateString));
						 System.out.println("Next :"+sdf1.format(now.getTime()));
						now.add(Calendar.DATE, 1);  // number of days to add
						String afterAddedOne = sdf1.format(now.getTime());
						
						System.out.println("Nextttttttttttttttttttttttt =============="+afterAddedOne);
						m.put("startDateString", afterAddedOne);
				}
				
				
				
				hubReq.setRequestParam(m);
				String strGameScheduleList = cricketSocialRestTemplateService.userRegistration(hubReq);
				if(strGameScheduleList !=  null){
					HubResponse  hubRes = GsonConverters.getGsonObject().fromJson(strGameScheduleList, HubResponse.class);
				if(hubRes !=  null && hubRes.getResults() !=  null){
					String date = hubRes.getResults().getEndDateStr();
					
					//returnList =  hubRes.getResults();
					JSONObject jobj=new JSONObject(strGameScheduleList);
					JSONObject jresult=jobj.getJSONObject("results");
					returnList =  GsonConverters.getGsonObject().fromJson(jresult.toString(), ResponseTypeSchedule.class);
			
			
				
				}
			}
			
		}else{
			
		}
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return returnList;
}






@RequestMapping(value="/showScoreCardSessionOut/boardId/{boardId}/matchId/{matchId}", method=RequestMethod.GET)
public ModelAndView showScoreCardSessionout(HttpServletRequest req,@PathVariable String boardId,@PathVariable String matchId) throws CSException
{
	ModelAndView mav=null;
	GsonBuilder builder = new GsonBuilder();
	 Gson gson = builder.create();
		 try{
	     mav = new ModelAndView("ScoreCardSessionOut");
	     
	     
	     HubRequest hubReq1=new HubRequest();
		 hubReq1.setMsgType(40);
		 ModelMap map1=new ModelMap();			
	//	 map1.put("userId", userId);			 
		 map1.put("boardId", boardId);
		 hubReq1.setRequestParam(map1);
		 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
		 UUID ownerid=null;
		 if(strBoarddetail!=null){
			 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
			if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
				 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
				 ownerid=UUID.fromString(hubResponse1.getResults().getBoardStatusDetail().get(0).getCreatedBy());
				
			}
		 }
	     
	     
		 hubReq= new HubRequest();
		 hubReq.setMsgType(243);
		 ModelMap scoremap=new ModelMap();
		 scoremap.put("matchId", matchId);		
		  hubReq.setRequestParam(scoremap);

			 String strscoremap=cricketSocialRestTemplateService.userRegistration(hubReq);	
			 if(strscoremap!=null)
			 {
				 HubResponse hubResponse= gson.fromJson(strscoremap, HubResponse.class);
				 if(hubResponse!=null)
				 {
					 System.out.println("hubResponse.getRequestStatus() ---> "+hubResponse.getRequestStatus());
					 if(hubResponse.getRequestStatus().equalsIgnoreCase("4")){
						System.out.println("manual enter"); 
						
						
						 hubReq = new HubRequest();
						 hubReq.setMsgType(242);
						 ModelMap map3 = new ModelMap();
						 map3.put("matchId", matchId);
						// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
						 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
						 hubReq.setRequestParam(map3);
						  
						 String returnResponse = cricketSocialRestTemplateService.userRegistration(hubReq);
						 
						 if(returnResponse != null){
							 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
							 if(res != null && res.getResults() != null){
								mav.addObject("scoreCardList", res.getResults().getMatchResult());
								 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
									mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
								mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
								mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
								mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
								mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
								
								mav.addObject("fallOfWicketsFirstInningsWebPortal", res.getResults().getFirstInnings().getFallOfWickets());
								mav.addObject("fallOfWicketsSecondInningsWebPortal", res.getResults().getSecondInnings().getFallOfWickets());
								mav.addObject("webPortalScoreCard", "Yes");
								
								System.out.println("--------------------------------------------------------");
								System.out.println("---------------------------------------------------------");
								System.out.println("-------------fallOfWicketsFirstInnings-----"+res.getResults().getFirstInnings().getFallOfWickets().size());
								System.out.println("-------------fallOfWicketsSecondInnings-----"+res.getResults().getSecondInnings().getFallOfWickets().size());
								
								String manOfTheMatch="";
								if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
									for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
								
										if(i == 0){
											manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
										}else{
											manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
										}
									}
								}
								if(manOfTheMatch != ""){
								mav.addObject("PlayerOfTheMatch", manOfTheMatch);
								}
								System.out.println("------------ man of the match -----------"+manOfTheMatch);
								if(res.getResults().getMatchResult() == null ){
									mav.addObject("scoreCardListSize", 0);
								}else{
									mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
								}

								
								if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
									mav.addObject("firstInningsBattingPlayerSize", 0);
								}else{
									mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
								}
								if(res.getResults().getSecondInnings().getBattingPlayer() == null){
									mav.addObject("SecondInningsBattingPlayerSize", 0);
								}else{
									mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
								}
								if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
									mav.addObject("firstInningsBowlingPlayerSize", 0);
								}else{
									mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
								}
								if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
									mav.addObject("SecondInningsBowlingPlayerSize", 0);
								}else{
									mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
								}
								
							 }else{
								System.out.println("null condition"); 
							 }
						 }
						 else{
							 
						 }
						
						
					 }else{
						 System.out.println("scoring app");
						 
						 hubReq = new HubRequest();
						 hubReq.setMsgType(13);
						 ModelMap map3 = new ModelMap();
						 map3.put("matchId", matchId);
						// map3.put("matchId", "c0e5737c-2ab9-40e5-b357-0edacb604f0e");
						 //map3.put("matchScoreBoardId", "942a6a76-4a54-425b-b2e7-a8c0777bd9c4");
						 hubReq.setRequestParam(map3);
						  
						 String returnResponse = cricketSocialRestTemplateService.userRegistration1(hubReq);
						 
						 if(returnResponse != null){
							 NewResponse res = gson.fromJson(returnResponse, NewResponse.class);
							 if(res != null && res.getResults() != null){
								mav.addObject("scoreCardList", res.getResults().getMatchResult());
								 mav.addObject("getSecondInnings", res.getResults().getSecondInnings());
									mav.addObject("getFirstInnings", res.getResults().getFirstInnings());
								mav.addObject("firstInningsBattingPlayer", res.getResults().getFirstInnings().getBattingPlayer());
								mav.addObject("SecondInningsBattingPlayer", res.getResults().getSecondInnings().getBattingPlayer());
								mav.addObject("firstInningsBowlingPlayer", res.getResults().getFirstInnings().getBowlingPlayer());
								mav.addObject("SecondInningsBowlingPlayer", res.getResults().getSecondInnings().getBowlingPlayer());
								mav.addObject("fallOfWicketsFirstInnings", res.getResults().getFirstInnings().getFallOfWickets());
								mav.addObject("fallOfWicketsSecondInnings", res.getResults().getSecondInnings().getFallOfWickets());
								mav.addObject("firstInningsPowerPlayDetails", res.getResults().getFirstInnings().getCommentary().getPowerPlay());
								mav.addObject("firstInningsCommentryDetails", res.getResults().getFirstInnings().getCommentary().getCommentary());
								mav.addObject("secondInningsPowerPlayDetails", res.getResults().getSecondInnings().getCommentary().getPowerPlay());
								mav.addObject("secondInningsCommentryDetails", res.getResults().getSecondInnings().getCommentary().getCommentary());
								
								
								if(res.getResults().getFirstInnings().getCommentary().getCommentary().size() > 0 || res.getResults().getFirstInnings().getCommentary().getPowerPlay().size() > 0){
									mav.addObject("CommentryAvailable","Yes");
								}
								
								String manOfTheMatch = "";
								if(res.getResults().getMatchResult().getManOfTheMatch() != null){
								if(res.getResults().getMatchResult().getManOfTheMatch().size() > 0){
									for(int i=0;i<res.getResults().getMatchResult().getManOfTheMatch().size();i++){
								
										if(i == 0){
											manOfTheMatch += res.getResults().getMatchResult().getManOfTheMatch().get(i);
										}else{
											manOfTheMatch += ", "+res.getResults().getMatchResult().getManOfTheMatch().get(i);
										}
									}
								}
								}
								if(manOfTheMatch != ""){
								mav.addObject("PlayerOfTheMatch", manOfTheMatch);
								}
								if(res.getResults().getMatchResult() == null ){
									mav.addObject("scoreCardListSize", 0);
								}else{
									mav.addObject("scoreCardListSize", res.getResults().getMatchResult().toString().length());
								}
								if(res.getResults().getFirstInnings().getBattingPlayer() == null ){
									mav.addObject("firstInningsBattingPlayerSize", 0);
								}else{
									mav.addObject("firstInningsBattingPlayerSize", res.getResults().getFirstInnings().getBattingPlayer().size());
								}
								if(res.getResults().getSecondInnings().getBattingPlayer() == null){
									mav.addObject("SecondInningsBattingPlayerSize", 0);
								}else{
									mav.addObject("SecondInningsBattingPlayerSize", res.getResults().getSecondInnings().getBattingPlayer().size());
								}
								if(res.getResults().getFirstInnings().getBowlingPlayer() == null){
									mav.addObject("firstInningsBowlingPlayerSize", 0);
								}else{
									mav.addObject("firstInningsBowlingPlayerSize", res.getResults().getFirstInnings().getBowlingPlayer().size());
								}
								if(res.getResults().getSecondInnings().getBowlingPlayer() == null){
									mav.addObject("SecondInningsBowlingPlayerSize", 0);
								}else{
									mav.addObject("SecondInningsBowlingPlayerSize", res.getResults().getSecondInnings().getBowlingPlayer().size());
								}
								
							 }else{
								System.out.println("null condition"); 
							 }
						 }
						 else{
							 
						 }
						 
						 
					 }
				 }
			 }
		 }
		 catch(Exception e)
		 {
			 e.printStackTrace();
		 }
	return mav;
}


@RequestMapping(value="/clearScore",method=RequestMethod.POST)
public @ResponseBody String  clearscore(HttpServletRequest req,@RequestBody InprogressMatches matches)
{
	ModelAndView mav=null;
	System.out.println("The clear value match value is "+matches.getBoardId());
	String postresponse=null;
	List<TournamentScheduler> scheduleList = null;
	try{
		HttpSession session = req.getSession(true);
		/*if(session != null){
			
			hubReq=new HubRequest();
			hubReq.setMsgType(163);
			ModelMap map = new ModelMap();
			map.put("tournamentId", matches.getTournamentId());
			map.put("scorerId", session.getAttribute("USRID"));
			map.put("createdBy", matches.getCreatedBy());
			hubReq.setRequestParam(map);
			GsonBuilder builder=new GsonBuilder();
			Gson gson=builder.create();
			String response=cricketSocialRestTemplateService.userRegistration(hubReq);
			 if(response != null){
				 HubResponse hubRes = gson.fromJson(response, HubResponse.class );
				 if(hubRes != null && hubRes.getResults() != null){
					 scheduleList = hubRes.getResults().getTournamentScheduleList();
					 
					 if(scheduleList.size() > 0)
					 {*/
						 HubRequest hubreq1=new HubRequest(256);
						 hubreq1.setMsgType(256);
						 ModelMap map1=new ModelMap();
						 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());
						 hubreq1.setRequestParam(map1);
						 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
						 System.out.println("the 256 response is :"+response1);
						 if(response1 != null){
								
					 
						 JSONObject jobj=new JSONObject(response1);
						 JSONObject jresult=jobj.getJSONObject("results");
						  postresponse=jresult.getString("scoreResponse");
						  
						 
						  
						 }else{
							 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
								 }
					/* }
					 else{
						 postresponse="Not Authorized user";
					 }
				 }else{
					 
				 }
				 
			 }else{
				 
			 }
	
		}else{
		}*/
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	return postresponse;
}


@RequestMapping(value="/aboutOrganization/{boardId}",method=RequestMethod.GET)
public ModelAndView aboutOrganization(HttpServletRequest req,@PathVariable String boardId )
{
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("OrgDetails");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
			 
			 
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(261);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		orgdetails.setBoardInfoType("Organization");
		/* ModelMap map1=new ModelMap();
		 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 261 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
			  if(orgresponse.getFileDetails().size() > 0)
			  {
			   filesize=orgresponse.getFileDetails().size();
			  }
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "Organization");
			mav.addObject("OrgResponse", orgresponse);
			mav.addObject("FileSize", filesize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;
}
@RequestMapping(value="/aboutHistory/{boardId}",method=RequestMethod.GET)
public ModelAndView aboutHistory(HttpServletRequest req,@PathVariable String boardId )
{
	
	
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("OrgDetails");
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(261);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		orgdetails.setBoardInfoType("History");
		/* ModelMap map1=new ModelMap();
		 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 261 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
			  if(orgresponse.getFileDetails().size() > 0)
			  {
			   filesize=orgresponse.getFileDetails().size();
			  }
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "History");
			mav.addObject("OrgResponse", orgresponse);
			mav.addObject("FileSize", filesize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;
	
	
}
@RequestMapping(value="/aboutRulesRegulation/{boardId}",method=RequestMethod.GET)
public ModelAndView aboutRulesRegulation(HttpServletRequest req,@PathVariable String boardId )
{
	
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("OrgDetails");
		
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(261);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		orgdetails.setBoardInfoType("Rules&Regulations");
		/* ModelMap map1=new ModelMap();
		 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 261 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
			  if(orgresponse.getFileDetails().size() > 0)
			  {
			   filesize=orgresponse.getFileDetails().size();
			  }
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "Rules&Regulations");
			mav.addObject("OrgResponse", orgresponse);
			mav.addObject("FileSize", filesize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;
	
}
@RequestMapping(value="/aboutAwardhonor/{boardId}",method=RequestMethod.GET)
public ModelAndView aboutawardhonor(HttpServletRequest req,@PathVariable String boardId )
{
	
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("OrgDetails");
		
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(261);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		orgdetails.setBoardInfoType("Awards&Honors");
		/* ModelMap map1=new ModelMap();
		 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 261 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
			  if(orgresponse.getFileDetails().size() > 0)
			  {
			   filesize=orgresponse.getFileDetails().size();
			  }
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "Awards&Honors");
			mav.addObject("OrgResponse", orgresponse);
			mav.addObject("FileSize", filesize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;
}
@RequestMapping(value="/aboutFaq/{boardId}",method=RequestMethod.GET)
public ModelAndView aboutFaq(HttpServletRequest req,@PathVariable String boardId )
{
	
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("OrgDetails");
		
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(261);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		orgdetails.setBoardInfoType("FAQ");
		/* ModelMap map1=new ModelMap();
		 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 261 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
			  if(orgresponse.getFileDetails().size() > 0)
			  {
			   filesize=orgresponse.getFileDetails().size();
			  }
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "FAQ");
			mav.addObject("OrgResponse", orgresponse);
			mav.addObject("FileSize", filesize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;
}
@RequestMapping(value="/Directors/{boardId}",method=RequestMethod.GET)
public ModelAndView Directors(HttpServletRequest req,@PathVariable String boardId )
{
	
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	BoardResponse boardresponse=new BoardResponse();
	long filesize=0;
	long sponsersize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("BoardDirectors");
		
		
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
			 
			 
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map11=new ModelMap();			
			 map11.put("userId", session.getAttribute("USRID"));			 
			 map11.put("boardId", boardId);
			 hubReq1.setRequestParam(map11);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
			 if(strBoarddetail!=null)
			 {
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
				{
					 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
					 final String context = req.getContextPath();
					 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
					 mav.addObject("LeaugeMenuList", menuList);				
				}
			 }	
			 
		
		
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(262);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 262 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardDirectorsResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			 boardresponse= gson.fromJson(jboardobj.toString(), BoardResponse.class);
			  if(boardresponse.getUploadFileAttachementsList().size() > 0)
			  {
			   filesize=boardresponse.getUploadFileAttachementsList().size();
			  }
			  
			  if(boardresponse.getBoardDirectorsList().size() > 0)
			  {
				  sponsersize=boardresponse.getBoardDirectorsList().size();
			  }
			  
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "FAQ");
			mav.addObject("boardresponse", boardresponse);
			mav.addObject("FileSize", filesize);
			mav.addObject("SponserSize", sponsersize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;

}
@RequestMapping(value="/Sponser/{boardId}",method=RequestMethod.GET)
public ModelAndView Sponser(HttpServletRequest req,@PathVariable String boardId )
{
	
	
	ModelAndView mav=null;
	System.out.println("the board id :"+boardId);
	SponserResponse sporesponse=new SponserResponse();
	long filesize=0;
	long sponsersize=0;
	Gson gson=new Gson();
	HttpSession session = req.getSession(true);
	try{
		mav=new ModelAndView("Sponsers");
		
		
		
		hubReq= new HubRequest();
		 hubReq.setMsgType(41);
		 ModelMap map=new ModelMap();
		 map.put("userId", session.getAttribute("USRID"));
		 map.put("startNode", 0);
		 map.put("endNode", 200);
		  hubReq.setRequestParam(map);
			 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson1 = builder.create();
			 if(strBoardList!=null)
			 {
				 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
				 if(hubResponse!=null && hubResponse.getResults()!=null)
				 {
					 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
				 }
			 }
		
			 
			 
			 
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
		
		
		UUID uid=UUID.fromString(boardId);
		HubRequest hubreq1=new HubRequest(263);
		OrganizationDetails orgdetails=new OrganizationDetails();
		orgdetails.setBoardId(uid);
		 hubreq1.setRequestParam(orgdetails);
		 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
		 System.out.println("the 263 response is :"+response1);
		 if(response1 != null){
				
	 
		 JSONObject jobj=new JSONObject(response1);
		 JSONObject jresult=jobj.getJSONObject("results");
		 JSONObject jboardobj=jresult.getJSONObject("boardSponsersResponse");
		  
		 if(jboardobj.length() !=0)
		 {
			 sporesponse= gson.fromJson(jboardobj.toString(), SponserResponse.class);
			  if(sporesponse.getUploadFileAttachementsList().size() > 0)
			  {
			   filesize=sporesponse.getUploadFileAttachementsList().size();
			  }
			  
			  if(sporesponse.getBoardSponsorsList().size() > 0)
			  {
				  sponsersize=sporesponse.getBoardSponsorsList().size();
			  }
			  
		 }
		  
		 }else{
			 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
				 }
		 
		 
		 
			mav.addObject("BoardId", boardId);
			mav.addObject("boardInfoType", "FAQ");
			mav.addObject("spoResponse", sporesponse);
			mav.addObject("FileSize", filesize);
			mav.addObject("SponserSize", sponsersize);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	
	return mav;

	
}

	
@RequestMapping(value="/organizationDetails",method=RequestMethod.POST)
public @ResponseBody String organizationDetails(HttpServletRequest req,@RequestBody OrganizationDetails orgdetails )
{
	System.out.println("The organization details called :"+orgdetails.getBoardInfoType());
	
	try{
		hubReq=new HubRequest(258);
		hubReq.setRequestParam(orgdetails);
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		System.out.println("The response is :"+response);
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	String response="Successfully called";
	return response;
}



@RequestMapping(value="/SponserDetails",method=RequestMethod.POST)
public @ResponseBody String SponserDetails(HttpServletRequest req,@RequestBody SponserDetails spodetails )
{
	System.out.println("The sponser details called :");
	
	try{
		hubReq=new HubRequest(260);
		hubReq.setRequestParam(spodetails);
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		System.out.println("The 260 response is :"+response);
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	String response="Successfully called";
	return response;
}

@RequestMapping(value="/DirectorsDetails",method=RequestMethod.POST)
public @ResponseBody String DirectorsDetails(HttpServletRequest req,@RequestBody SponserDetails spodetails )
{
	System.out.println("The sponser details called :");
	
	try{
		hubReq=new HubRequest(259);
		hubReq.setRequestParam(spodetails);
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		System.out.println("The 259 response is :"+response);
		
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	String response="Successfully called";
	return response;
}




@RequestMapping(value="/Organizationdetails/boardId/{boardId}", method = RequestMethod.GET)
public ModelAndView Organizationdetails(HttpServletRequest req, @PathVariable String boardId){
	ModelAndView mav = null;
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson=new Gson();
	try{
		
		HttpSession session = req.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			mav = new ModelAndView("OrganizationInfo");
			mav.addObject("boardId", boardId);
			UUID uid=UUID.fromString(boardId);
			
			
			
			
			hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map=new ModelMap();
			 map.put("userId", session.getAttribute("USRID"));
			 map.put("startNode", 0);
			 map.put("endNode", 200);
			  hubReq.setRequestParam(map);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				 GsonBuilder builder = new GsonBuilder();
				 Gson gson1 = builder.create();
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse= gson1.fromJson(strBoardList, HubResponse.class);
					 if(hubResponse!=null && hubResponse.getResults()!=null)
					 {
						 mav.addObject("BoardList", hubResponse.getResults().getBoardsList());
					 }
				 }
			
			
			HubRequest hubreq1=new HubRequest(261);
			OrganizationDetails orgdetails=new OrganizationDetails();
			orgdetails.setBoardId(uid);
			orgdetails.setBoardInfoType("Organization");
			/* ModelMap map1=new ModelMap();
			 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
			 hubreq1.setRequestParam(orgdetails);
			 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
			 System.out.println("the 261 response is :"+response1);
			 if(response1 != null){
					
		 
			 JSONObject jobj=new JSONObject(response1);
			 JSONObject jresult=jobj.getJSONObject("results");
			 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
			  
			 if(jboardobj.length() !=0)
			 {
				  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
				  if(orgresponse.getFileDetails().size() > 0)
				  {
				   filesize=orgresponse.getFileDetails().size();
				  }
			 }
			  
			 }else{
				 	mav=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
			 
			
			 mav.addObject("OrgResponse", orgresponse);
				mav.addObject("FileSize", filesize);
				
				
				
				//*************************** Getting Board info  ***************************************
				 HubRequest hubReq1=new HubRequest();
				 hubReq1.setMsgType(40);
				 ModelMap map11=new ModelMap();			
				 map11.put("userId", session.getAttribute("USRID"));			 
				 map11.put("boardId", boardId);
				 hubReq1.setRequestParam(map11);
				 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);		
				 if(strBoarddetail!=null)
				 {
					 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
					if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0)
					{
						 mav.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));
						 final String context = req.getContextPath();
						 MenuList menuList= Util.leaugeMenuList(hubResponse1.getResults().getBoardStatusDetail().get(0), session.getAttribute("USRID")+"", context);						
						 mav.addObject("LeaugeMenuList", menuList);				
					}
				 }	
				
		}else{
			mav = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return mav;
}

@RequestMapping(value="/GetBoardInfoDetails",method=RequestMethod.POST)
public @ResponseBody OrganizationResponse GetBoardInfoDetails(HttpServletRequest req,@RequestBody OrganizationDetails orgdetails )
{
	System.out.println("The organization details called :"+orgdetails.getBoardInfoType());
	OrganizationResponse orgresponse=new OrganizationResponse();
	Gson gson=new Gson();
	
	try{
		hubReq=new HubRequest(261);
		hubReq.setRequestParam(orgdetails);
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		System.out.println("The response 261 is :"+response);
		 if(response != null){
				
			 
			 JSONObject jobj=new JSONObject(response);
			 JSONObject jresult=jobj.getJSONObject("results");
			 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
			  
			 if(jboardobj.length() !=0)
			 {
				  orgresponse= gson.fromJson(jboardobj.toString(), OrganizationResponse.class);
				  
				  System.out.println("The response board id : "+orgresponse.getBoardId());
				  
			 }
			  
			 }
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return orgresponse;
}
@RequestMapping(value="/sponsersInfoDetails",method=RequestMethod.POST)
public @ResponseBody SponserResponse sponsersInfoDetails(HttpServletRequest req,@RequestBody OrganizationDetails orgdetails )
{
	System.out.println("The organization details called :"+orgdetails.getBoardInfoType());
	SponserResponse sporesponse=new SponserResponse();
	Gson gson=new Gson();
	
	try{
		hubReq=new HubRequest(263);
		hubReq.setRequestParam(orgdetails);
		String response=cricketSocialRestTemplateService.userRegistration(hubReq);
		System.out.println("The response 263 is :"+response);
		 if(response != null){
				
			 JSONObject jobj=new JSONObject(response);
			 JSONObject jresult=jobj.getJSONObject("results");
			 JSONObject jboardobj=jresult.getJSONObject("boardSponsersResponse");
			  
			 if(jboardobj.length() !=0)
			 {
				 sporesponse= gson.fromJson(jboardobj.toString(), SponserResponse.class);
				  		  
			 }
			  
			 }
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return sporesponse;
}

@RequestMapping(value="/directorsInfoDetails",method=RequestMethod.POST)
	public @ResponseBody BoardResponse directorsInfoDetails(
			HttpServletRequest req, @RequestBody OrganizationDetails orgdetails) {
		System.out.println("The organization details called :"
				+ orgdetails.getBoardInfoType());
		BoardResponse boardresponse = new BoardResponse();
		Gson gson = new Gson();

		try {
			hubReq = new HubRequest(262);
			hubReq.setRequestParam(orgdetails);
			String response = cricketSocialRestTemplateService
					.userRegistration(hubReq);
			System.out.println("The response 262 is :" + response);
			if (response != null) {

				JSONObject jobj = new JSONObject(response);
				JSONObject jresult = jobj.getJSONObject("results");
				JSONObject jboardobj = jresult
						.getJSONObject("boardDirectorsResponse");

				if (jboardobj.length() != 0) {
					boardresponse = gson.fromJson(jboardobj.toString(),
							BoardResponse.class);

				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return boardresponse;
	}



@RequestMapping(value="BoardInfoPublic/{bid}", method=RequestMethod.GET)
public ModelAndView BoardInfoPublic(@PathVariable String bid, HttpServletRequest request)
{
	ModelAndView model= null;
	OrganizationResponse orgresponse=new OrganizationResponse();
	long filesize=0;
	Gson gson1=new Gson();
	try{	
		HttpSession session = request.getSession(true);
		if(session != null && session.getAttribute("USRID") != null){
			UUID userId = (UUID) session.getAttribute("USRID");
			
			//model =new ModelAndView("boardEventPublic");
			model= new ModelAndView("OrganizationInfopublic");
			
			
			model.addObject("boardId", bid);
			UUID uid=UUID.fromString(bid);
			HubRequest hubreq1=new HubRequest(261);
			OrganizationDetails orgdetails=new OrganizationDetails();
			orgdetails.setBoardId(uid);
			orgdetails.setBoardInfoType("Organization");
			/* ModelMap map1=new ModelMap();
			 map1.put("tournamentSchedulerId", matches.getTournamentSchedulerId());*/
			 hubreq1.setRequestParam(orgdetails);
			 String response1=cricketSocialRestTemplateService.userRegistration(hubreq1);
			 System.out.println("the 261 response is :"+response1);
			 if(response1 != null){
					
		 
			 JSONObject jobj=new JSONObject(response1);
			 JSONObject jresult=jobj.getJSONObject("results");
			 JSONObject jboardobj=jresult.getJSONObject("boardInfoResponse");
			  
			 if(jboardobj.length() !=0)
			 {
				  orgresponse= gson1.fromJson(jboardobj.toString(), OrganizationResponse.class);
				  if(orgresponse.getFileDetails().size() > 0)
				  {
				   filesize=orgresponse.getFileDetails().size();
				  }
			 }
			  
			 }else{
				 model=new ModelAndView("redirect:/login.htm?loginvalidation=Service unavailable");
					 }
			 
			
			 model.addObject("OrgResponse", orgresponse);
			 model.addObject("FileSize", filesize);
		
			
			
			
			 
			//*************************** Getting Board info  ***************************************
			 HubRequest hubReq1=new HubRequest();
			 hubReq1.setMsgType(40);
			 ModelMap map1=new ModelMap();			
			 map1.put("userId", userId);			 
			 map1.put("boardId", bid);
			 hubReq1.setRequestParam(map1);
			 String strBoarddetail=cricketSocialRestTemplateService.userRegistration(hubReq1);
			 GsonBuilder builder = new GsonBuilder();
			 Gson gson = builder.create();
			 if(strBoarddetail!=null){
				 HubResponse hubResponse1= gson.fromJson(strBoarddetail, HubResponse.class);
				if(hubResponse1!=null && hubResponse1.getResults().getBoardStatusDetail()!=null && hubResponse1.getResults().getBoardStatusDetail().size()>0){						 
					 model.addObject("BoradInfo", hubResponse1.getResults().getBoardStatusDetail().get(0));						
					
				}
			 }
			 
			//********************************************  Get board Details  ************************************************	  
			 hubReq= new HubRequest();
			 hubReq.setMsgType(41);
			 ModelMap map3=new ModelMap();
			 map3.put("userId", userId);
			 map3.put("startNode", 0);
			 map3.put("endNode", 200);
			  hubReq.setRequestParam(map3);
				 String strBoardList=cricketSocialRestTemplateService.userRegistration(hubReq);
				
				 if(strBoardList!=null)
				 {
					 HubResponse hubResponse2= GsonConverters.getGsonObject(). fromJson(strBoardList, HubResponse.class);
					 if(hubResponse2!=null && hubResponse2.getResults()!=null)
					 {
						 model.addObject("BoardList", hubResponse2.getResults().getBoardsList());
					 }
				 }

				 hubReq= new HubRequest();
				 hubReq.setMsgType(76);
				 ModelMap map4=new ModelMap();
				 map4.put("boardId",bid);
				 map4.put("userId", userId);						
				 hubReq.setRequestParam(map4);
				 String buddyFandeatil=cricketSocialRestTemplateService.userRegistration(hubReq);
				 boolean buddyFan=false;
				 if(buddyFandeatil!=null)
				 {
					 HubResponse buddyFanResponse= GsonConverters.getGsonObject().fromJson(buddyFandeatil, HubResponse.class);
					 if(buddyFanResponse!=null)
					 {
						 if(buddyFanResponse.getRequestStatus()!=null && buddyFanResponse.getRequestStatus().endsWith("4"))
						 {
							 buddyFan=true;
						 }
					 }
					 
				 }
				// buddyFan=true;
				 System.out.println("board : "+buddyFan);
				 model.addObject("BoardFanReq", buddyFan);
				 
				 
		}else{
			model = new ModelAndView("redirect:/login.htm?loginvalidation=Your session has been expired");
		}
		 logger.error("board event public profile");
		
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return model;
}

@RequestMapping(value="/leagueMatchesaaroundyou",method=RequestMethod.POST)
public @ResponseBody List<MatchesAroundYouResponse> matchesaround(HttpServletRequest req,@RequestBody String latlang)
{
	String matches="Success";
	System.out.println("Inside league matches around you");
	System.out.println("The latlang of users :"+latlang);
	List<MatchesAroundYouResponse> matcheslist=new ArrayList<MatchesAroundYouResponse>();
	try{
		
		Gson gson=new Gson();
		
		hubReq=new HubRequest();
		hubReq.setMsgType(77);
		ModelMap map=new ModelMap();
		map.put("latlang", latlang);
		map.put("startNode", "0");
		map.put("endNode", "20");
		map.put("category", "Matches");
		
		hubReq.setRequestParam(map);
		
		String res=cricketSocialRestTemplateService.userRegistration(hubReq);
		if(res !=null)
		{
			HubResponse response=gson.fromJson(res, HubResponse.class);
			if(response.getResults().getSearchResponse().getTournamentScheduler() != null)
			{
				matcheslist=response.getResults().getSearchResponse().getTournamentScheduler();
			}
		}
		System.out.println("Response : :"+res);
	}catch(Exception e)
	{
		e.printStackTrace();
	}
	return matcheslist;
}







}

class UpcommingComprator implements Comparator<Object>
{

	@Override
	public int compare(Object o1, Object o2) {
		// TODO Auto-generated method stub
		 GsonBuilder builder = new GsonBuilder();
		 Gson gson = builder.create();
		 int i=0;
		System.out.println("<><><><>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> :"+gson.toJson(o1));
		try{
		JSONObject jobj1=new JSONObject(o1);
		JSONObject jobj2=new JSONObject(o2);
		
		 SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
		 Date d1=formatter.parse(jobj1.getString("gameDate").toString());
		 Date d2=formatter.parse(jobj2.getString("gameDate").toString());
		 if(d1.before(d2))
		 {
			 i= -1; 
		 }
		 else if(d1.after(d2))
		 {
			 i= 1;
		 }else{i= 0;}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	return i;	
	}
	
}
